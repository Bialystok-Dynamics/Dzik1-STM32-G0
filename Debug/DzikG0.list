
DzikG0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007180  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800723c  0800723c  0001723c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007358  08007358  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007358  08007358  00017358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007360  08007360  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007360  08007360  00017360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007364  08007364  00017364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000000c  08007374  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08007374  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fde  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002667  00000000  00000000  00032012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00034680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de0  00000000  00000000  00035558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001657e  00000000  00000000  00036338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ddf  00000000  00000000  0004c8b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f71e  00000000  00000000  0005f695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eedb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003728  00000000  00000000  000eee04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007224 	.word	0x08007224

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08007224 	.word	0x08007224

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f824 	bl	800046c <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_d2uiz>:
 8000430:	b570      	push	{r4, r5, r6, lr}
 8000432:	2200      	movs	r2, #0
 8000434:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <__aeabi_d2uiz+0x38>)
 8000436:	0004      	movs	r4, r0
 8000438:	000d      	movs	r5, r1
 800043a:	f001 fb1d 	bl	8001a78 <__aeabi_dcmpge>
 800043e:	2800      	cmp	r0, #0
 8000440:	d104      	bne.n	800044c <__aeabi_d2uiz+0x1c>
 8000442:	0020      	movs	r0, r4
 8000444:	0029      	movs	r1, r5
 8000446:	f001 fa65 	bl	8001914 <__aeabi_d2iz>
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <__aeabi_d2uiz+0x38>)
 800044e:	2200      	movs	r2, #0
 8000450:	0020      	movs	r0, r4
 8000452:	0029      	movs	r1, r5
 8000454:	f000 fecc 	bl	80011f0 <__aeabi_dsub>
 8000458:	f001 fa5c 	bl	8001914 <__aeabi_d2iz>
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	061b      	lsls	r3, r3, #24
 8000460:	469c      	mov	ip, r3
 8000462:	4460      	add	r0, ip
 8000464:	e7f1      	b.n	800044a <__aeabi_d2uiz+0x1a>
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	41e00000 	.word	0x41e00000

0800046c <__udivmoddi4>:
 800046c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046e:	4657      	mov	r7, sl
 8000470:	464e      	mov	r6, r9
 8000472:	4645      	mov	r5, r8
 8000474:	46de      	mov	lr, fp
 8000476:	b5e0      	push	{r5, r6, r7, lr}
 8000478:	0004      	movs	r4, r0
 800047a:	000d      	movs	r5, r1
 800047c:	4692      	mov	sl, r2
 800047e:	4699      	mov	r9, r3
 8000480:	b083      	sub	sp, #12
 8000482:	428b      	cmp	r3, r1
 8000484:	d830      	bhi.n	80004e8 <__udivmoddi4+0x7c>
 8000486:	d02d      	beq.n	80004e4 <__udivmoddi4+0x78>
 8000488:	4649      	mov	r1, r9
 800048a:	4650      	mov	r0, sl
 800048c:	f001 fb1c 	bl	8001ac8 <__clzdi2>
 8000490:	0029      	movs	r1, r5
 8000492:	0006      	movs	r6, r0
 8000494:	0020      	movs	r0, r4
 8000496:	f001 fb17 	bl	8001ac8 <__clzdi2>
 800049a:	1a33      	subs	r3, r6, r0
 800049c:	4698      	mov	r8, r3
 800049e:	3b20      	subs	r3, #32
 80004a0:	469b      	mov	fp, r3
 80004a2:	d433      	bmi.n	800050c <__udivmoddi4+0xa0>
 80004a4:	465a      	mov	r2, fp
 80004a6:	4653      	mov	r3, sl
 80004a8:	4093      	lsls	r3, r2
 80004aa:	4642      	mov	r2, r8
 80004ac:	001f      	movs	r7, r3
 80004ae:	4653      	mov	r3, sl
 80004b0:	4093      	lsls	r3, r2
 80004b2:	001e      	movs	r6, r3
 80004b4:	42af      	cmp	r7, r5
 80004b6:	d83a      	bhi.n	800052e <__udivmoddi4+0xc2>
 80004b8:	42af      	cmp	r7, r5
 80004ba:	d100      	bne.n	80004be <__udivmoddi4+0x52>
 80004bc:	e078      	b.n	80005b0 <__udivmoddi4+0x144>
 80004be:	465b      	mov	r3, fp
 80004c0:	1ba4      	subs	r4, r4, r6
 80004c2:	41bd      	sbcs	r5, r7
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	da00      	bge.n	80004ca <__udivmoddi4+0x5e>
 80004c8:	e075      	b.n	80005b6 <__udivmoddi4+0x14a>
 80004ca:	2200      	movs	r2, #0
 80004cc:	2300      	movs	r3, #0
 80004ce:	9200      	str	r2, [sp, #0]
 80004d0:	9301      	str	r3, [sp, #4]
 80004d2:	2301      	movs	r3, #1
 80004d4:	465a      	mov	r2, fp
 80004d6:	4093      	lsls	r3, r2
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	2301      	movs	r3, #1
 80004dc:	4642      	mov	r2, r8
 80004de:	4093      	lsls	r3, r2
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	e028      	b.n	8000536 <__udivmoddi4+0xca>
 80004e4:	4282      	cmp	r2, r0
 80004e6:	d9cf      	bls.n	8000488 <__udivmoddi4+0x1c>
 80004e8:	2200      	movs	r2, #0
 80004ea:	2300      	movs	r3, #0
 80004ec:	9200      	str	r2, [sp, #0]
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <__udivmoddi4+0x8e>
 80004f6:	601c      	str	r4, [r3, #0]
 80004f8:	605d      	str	r5, [r3, #4]
 80004fa:	9800      	ldr	r0, [sp, #0]
 80004fc:	9901      	ldr	r1, [sp, #4]
 80004fe:	b003      	add	sp, #12
 8000500:	bcf0      	pop	{r4, r5, r6, r7}
 8000502:	46bb      	mov	fp, r7
 8000504:	46b2      	mov	sl, r6
 8000506:	46a9      	mov	r9, r5
 8000508:	46a0      	mov	r8, r4
 800050a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800050c:	4642      	mov	r2, r8
 800050e:	2320      	movs	r3, #32
 8000510:	1a9b      	subs	r3, r3, r2
 8000512:	4652      	mov	r2, sl
 8000514:	40da      	lsrs	r2, r3
 8000516:	4641      	mov	r1, r8
 8000518:	0013      	movs	r3, r2
 800051a:	464a      	mov	r2, r9
 800051c:	408a      	lsls	r2, r1
 800051e:	0017      	movs	r7, r2
 8000520:	4642      	mov	r2, r8
 8000522:	431f      	orrs	r7, r3
 8000524:	4653      	mov	r3, sl
 8000526:	4093      	lsls	r3, r2
 8000528:	001e      	movs	r6, r3
 800052a:	42af      	cmp	r7, r5
 800052c:	d9c4      	bls.n	80004b8 <__udivmoddi4+0x4c>
 800052e:	2200      	movs	r2, #0
 8000530:	2300      	movs	r3, #0
 8000532:	9200      	str	r2, [sp, #0]
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	4643      	mov	r3, r8
 8000538:	2b00      	cmp	r3, #0
 800053a:	d0d9      	beq.n	80004f0 <__udivmoddi4+0x84>
 800053c:	07fb      	lsls	r3, r7, #31
 800053e:	0872      	lsrs	r2, r6, #1
 8000540:	431a      	orrs	r2, r3
 8000542:	4646      	mov	r6, r8
 8000544:	087b      	lsrs	r3, r7, #1
 8000546:	e00e      	b.n	8000566 <__udivmoddi4+0xfa>
 8000548:	42ab      	cmp	r3, r5
 800054a:	d101      	bne.n	8000550 <__udivmoddi4+0xe4>
 800054c:	42a2      	cmp	r2, r4
 800054e:	d80c      	bhi.n	800056a <__udivmoddi4+0xfe>
 8000550:	1aa4      	subs	r4, r4, r2
 8000552:	419d      	sbcs	r5, r3
 8000554:	2001      	movs	r0, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2100      	movs	r1, #0
 800055c:	3e01      	subs	r6, #1
 800055e:	1824      	adds	r4, r4, r0
 8000560:	414d      	adcs	r5, r1
 8000562:	2e00      	cmp	r6, #0
 8000564:	d006      	beq.n	8000574 <__udivmoddi4+0x108>
 8000566:	42ab      	cmp	r3, r5
 8000568:	d9ee      	bls.n	8000548 <__udivmoddi4+0xdc>
 800056a:	3e01      	subs	r6, #1
 800056c:	1924      	adds	r4, r4, r4
 800056e:	416d      	adcs	r5, r5
 8000570:	2e00      	cmp	r6, #0
 8000572:	d1f8      	bne.n	8000566 <__udivmoddi4+0xfa>
 8000574:	9800      	ldr	r0, [sp, #0]
 8000576:	9901      	ldr	r1, [sp, #4]
 8000578:	465b      	mov	r3, fp
 800057a:	1900      	adds	r0, r0, r4
 800057c:	4169      	adcs	r1, r5
 800057e:	2b00      	cmp	r3, #0
 8000580:	db24      	blt.n	80005cc <__udivmoddi4+0x160>
 8000582:	002b      	movs	r3, r5
 8000584:	465a      	mov	r2, fp
 8000586:	4644      	mov	r4, r8
 8000588:	40d3      	lsrs	r3, r2
 800058a:	002a      	movs	r2, r5
 800058c:	40e2      	lsrs	r2, r4
 800058e:	001c      	movs	r4, r3
 8000590:	465b      	mov	r3, fp
 8000592:	0015      	movs	r5, r2
 8000594:	2b00      	cmp	r3, #0
 8000596:	db2a      	blt.n	80005ee <__udivmoddi4+0x182>
 8000598:	0026      	movs	r6, r4
 800059a:	409e      	lsls	r6, r3
 800059c:	0033      	movs	r3, r6
 800059e:	0026      	movs	r6, r4
 80005a0:	4647      	mov	r7, r8
 80005a2:	40be      	lsls	r6, r7
 80005a4:	0032      	movs	r2, r6
 80005a6:	1a80      	subs	r0, r0, r2
 80005a8:	4199      	sbcs	r1, r3
 80005aa:	9000      	str	r0, [sp, #0]
 80005ac:	9101      	str	r1, [sp, #4]
 80005ae:	e79f      	b.n	80004f0 <__udivmoddi4+0x84>
 80005b0:	42a3      	cmp	r3, r4
 80005b2:	d8bc      	bhi.n	800052e <__udivmoddi4+0xc2>
 80005b4:	e783      	b.n	80004be <__udivmoddi4+0x52>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	2100      	movs	r1, #0
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	2200      	movs	r2, #0
 80005c0:	9100      	str	r1, [sp, #0]
 80005c2:	9201      	str	r2, [sp, #4]
 80005c4:	2201      	movs	r2, #1
 80005c6:	40da      	lsrs	r2, r3
 80005c8:	9201      	str	r2, [sp, #4]
 80005ca:	e786      	b.n	80004da <__udivmoddi4+0x6e>
 80005cc:	4642      	mov	r2, r8
 80005ce:	2320      	movs	r3, #32
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	002a      	movs	r2, r5
 80005d4:	4646      	mov	r6, r8
 80005d6:	409a      	lsls	r2, r3
 80005d8:	0023      	movs	r3, r4
 80005da:	40f3      	lsrs	r3, r6
 80005dc:	4644      	mov	r4, r8
 80005de:	4313      	orrs	r3, r2
 80005e0:	002a      	movs	r2, r5
 80005e2:	40e2      	lsrs	r2, r4
 80005e4:	001c      	movs	r4, r3
 80005e6:	465b      	mov	r3, fp
 80005e8:	0015      	movs	r5, r2
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	dad4      	bge.n	8000598 <__udivmoddi4+0x12c>
 80005ee:	4642      	mov	r2, r8
 80005f0:	002f      	movs	r7, r5
 80005f2:	2320      	movs	r3, #32
 80005f4:	0026      	movs	r6, r4
 80005f6:	4097      	lsls	r7, r2
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	40de      	lsrs	r6, r3
 80005fc:	003b      	movs	r3, r7
 80005fe:	4333      	orrs	r3, r6
 8000600:	e7cd      	b.n	800059e <__udivmoddi4+0x132>
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__aeabi_i2f>:
 8000604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000606:	2800      	cmp	r0, #0
 8000608:	d013      	beq.n	8000632 <__aeabi_i2f+0x2e>
 800060a:	17c3      	asrs	r3, r0, #31
 800060c:	18c6      	adds	r6, r0, r3
 800060e:	405e      	eors	r6, r3
 8000610:	0fc4      	lsrs	r4, r0, #31
 8000612:	0030      	movs	r0, r6
 8000614:	f001 fa3a 	bl	8001a8c <__clzsi2>
 8000618:	239e      	movs	r3, #158	; 0x9e
 800061a:	0005      	movs	r5, r0
 800061c:	1a1b      	subs	r3, r3, r0
 800061e:	2b96      	cmp	r3, #150	; 0x96
 8000620:	dc0f      	bgt.n	8000642 <__aeabi_i2f+0x3e>
 8000622:	2808      	cmp	r0, #8
 8000624:	dd01      	ble.n	800062a <__aeabi_i2f+0x26>
 8000626:	3d08      	subs	r5, #8
 8000628:	40ae      	lsls	r6, r5
 800062a:	0276      	lsls	r6, r6, #9
 800062c:	0a76      	lsrs	r6, r6, #9
 800062e:	b2d8      	uxtb	r0, r3
 8000630:	e002      	b.n	8000638 <__aeabi_i2f+0x34>
 8000632:	2400      	movs	r4, #0
 8000634:	2000      	movs	r0, #0
 8000636:	2600      	movs	r6, #0
 8000638:	05c0      	lsls	r0, r0, #23
 800063a:	4330      	orrs	r0, r6
 800063c:	07e4      	lsls	r4, r4, #31
 800063e:	4320      	orrs	r0, r4
 8000640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000642:	2b99      	cmp	r3, #153	; 0x99
 8000644:	dd0c      	ble.n	8000660 <__aeabi_i2f+0x5c>
 8000646:	2205      	movs	r2, #5
 8000648:	0031      	movs	r1, r6
 800064a:	1a12      	subs	r2, r2, r0
 800064c:	40d1      	lsrs	r1, r2
 800064e:	000a      	movs	r2, r1
 8000650:	0001      	movs	r1, r0
 8000652:	0030      	movs	r0, r6
 8000654:	311b      	adds	r1, #27
 8000656:	4088      	lsls	r0, r1
 8000658:	1e41      	subs	r1, r0, #1
 800065a:	4188      	sbcs	r0, r1
 800065c:	4302      	orrs	r2, r0
 800065e:	0016      	movs	r6, r2
 8000660:	2d05      	cmp	r5, #5
 8000662:	dc12      	bgt.n	800068a <__aeabi_i2f+0x86>
 8000664:	0031      	movs	r1, r6
 8000666:	4f0d      	ldr	r7, [pc, #52]	; (800069c <__aeabi_i2f+0x98>)
 8000668:	4039      	ands	r1, r7
 800066a:	0772      	lsls	r2, r6, #29
 800066c:	d009      	beq.n	8000682 <__aeabi_i2f+0x7e>
 800066e:	200f      	movs	r0, #15
 8000670:	4030      	ands	r0, r6
 8000672:	2804      	cmp	r0, #4
 8000674:	d005      	beq.n	8000682 <__aeabi_i2f+0x7e>
 8000676:	3104      	adds	r1, #4
 8000678:	014a      	lsls	r2, r1, #5
 800067a:	d502      	bpl.n	8000682 <__aeabi_i2f+0x7e>
 800067c:	239f      	movs	r3, #159	; 0x9f
 800067e:	4039      	ands	r1, r7
 8000680:	1b5b      	subs	r3, r3, r5
 8000682:	0189      	lsls	r1, r1, #6
 8000684:	0a4e      	lsrs	r6, r1, #9
 8000686:	b2d8      	uxtb	r0, r3
 8000688:	e7d6      	b.n	8000638 <__aeabi_i2f+0x34>
 800068a:	1f6a      	subs	r2, r5, #5
 800068c:	4096      	lsls	r6, r2
 800068e:	0031      	movs	r1, r6
 8000690:	4f02      	ldr	r7, [pc, #8]	; (800069c <__aeabi_i2f+0x98>)
 8000692:	4039      	ands	r1, r7
 8000694:	0772      	lsls	r2, r6, #29
 8000696:	d0f4      	beq.n	8000682 <__aeabi_i2f+0x7e>
 8000698:	e7e9      	b.n	800066e <__aeabi_i2f+0x6a>
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	fbffffff 	.word	0xfbffffff

080006a0 <__aeabi_dadd>:
 80006a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006a2:	464f      	mov	r7, r9
 80006a4:	4646      	mov	r6, r8
 80006a6:	46d6      	mov	lr, sl
 80006a8:	000d      	movs	r5, r1
 80006aa:	0004      	movs	r4, r0
 80006ac:	b5c0      	push	{r6, r7, lr}
 80006ae:	001f      	movs	r7, r3
 80006b0:	0011      	movs	r1, r2
 80006b2:	0328      	lsls	r0, r5, #12
 80006b4:	0f62      	lsrs	r2, r4, #29
 80006b6:	0a40      	lsrs	r0, r0, #9
 80006b8:	4310      	orrs	r0, r2
 80006ba:	007a      	lsls	r2, r7, #1
 80006bc:	0d52      	lsrs	r2, r2, #21
 80006be:	00e3      	lsls	r3, r4, #3
 80006c0:	033c      	lsls	r4, r7, #12
 80006c2:	4691      	mov	r9, r2
 80006c4:	0a64      	lsrs	r4, r4, #9
 80006c6:	0ffa      	lsrs	r2, r7, #31
 80006c8:	0f4f      	lsrs	r7, r1, #29
 80006ca:	006e      	lsls	r6, r5, #1
 80006cc:	4327      	orrs	r7, r4
 80006ce:	4692      	mov	sl, r2
 80006d0:	46b8      	mov	r8, r7
 80006d2:	0d76      	lsrs	r6, r6, #21
 80006d4:	0fed      	lsrs	r5, r5, #31
 80006d6:	00c9      	lsls	r1, r1, #3
 80006d8:	4295      	cmp	r5, r2
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0x3e>
 80006dc:	e099      	b.n	8000812 <__aeabi_dadd+0x172>
 80006de:	464c      	mov	r4, r9
 80006e0:	1b34      	subs	r4, r6, r4
 80006e2:	46a4      	mov	ip, r4
 80006e4:	2c00      	cmp	r4, #0
 80006e6:	dc00      	bgt.n	80006ea <__aeabi_dadd+0x4a>
 80006e8:	e07c      	b.n	80007e4 <__aeabi_dadd+0x144>
 80006ea:	464a      	mov	r2, r9
 80006ec:	2a00      	cmp	r2, #0
 80006ee:	d100      	bne.n	80006f2 <__aeabi_dadd+0x52>
 80006f0:	e0b8      	b.n	8000864 <__aeabi_dadd+0x1c4>
 80006f2:	4ac5      	ldr	r2, [pc, #788]	; (8000a08 <__aeabi_dadd+0x368>)
 80006f4:	4296      	cmp	r6, r2
 80006f6:	d100      	bne.n	80006fa <__aeabi_dadd+0x5a>
 80006f8:	e11c      	b.n	8000934 <__aeabi_dadd+0x294>
 80006fa:	2280      	movs	r2, #128	; 0x80
 80006fc:	003c      	movs	r4, r7
 80006fe:	0412      	lsls	r2, r2, #16
 8000700:	4314      	orrs	r4, r2
 8000702:	46a0      	mov	r8, r4
 8000704:	4662      	mov	r2, ip
 8000706:	2a38      	cmp	r2, #56	; 0x38
 8000708:	dd00      	ble.n	800070c <__aeabi_dadd+0x6c>
 800070a:	e161      	b.n	80009d0 <__aeabi_dadd+0x330>
 800070c:	2a1f      	cmp	r2, #31
 800070e:	dd00      	ble.n	8000712 <__aeabi_dadd+0x72>
 8000710:	e1cc      	b.n	8000aac <__aeabi_dadd+0x40c>
 8000712:	4664      	mov	r4, ip
 8000714:	2220      	movs	r2, #32
 8000716:	1b12      	subs	r2, r2, r4
 8000718:	4644      	mov	r4, r8
 800071a:	4094      	lsls	r4, r2
 800071c:	000f      	movs	r7, r1
 800071e:	46a1      	mov	r9, r4
 8000720:	4664      	mov	r4, ip
 8000722:	4091      	lsls	r1, r2
 8000724:	40e7      	lsrs	r7, r4
 8000726:	464c      	mov	r4, r9
 8000728:	1e4a      	subs	r2, r1, #1
 800072a:	4191      	sbcs	r1, r2
 800072c:	433c      	orrs	r4, r7
 800072e:	4642      	mov	r2, r8
 8000730:	4321      	orrs	r1, r4
 8000732:	4664      	mov	r4, ip
 8000734:	40e2      	lsrs	r2, r4
 8000736:	1a80      	subs	r0, r0, r2
 8000738:	1a5c      	subs	r4, r3, r1
 800073a:	42a3      	cmp	r3, r4
 800073c:	419b      	sbcs	r3, r3
 800073e:	425f      	negs	r7, r3
 8000740:	1bc7      	subs	r7, r0, r7
 8000742:	023b      	lsls	r3, r7, #8
 8000744:	d400      	bmi.n	8000748 <__aeabi_dadd+0xa8>
 8000746:	e0d0      	b.n	80008ea <__aeabi_dadd+0x24a>
 8000748:	027f      	lsls	r7, r7, #9
 800074a:	0a7f      	lsrs	r7, r7, #9
 800074c:	2f00      	cmp	r7, #0
 800074e:	d100      	bne.n	8000752 <__aeabi_dadd+0xb2>
 8000750:	e0ff      	b.n	8000952 <__aeabi_dadd+0x2b2>
 8000752:	0038      	movs	r0, r7
 8000754:	f001 f99a 	bl	8001a8c <__clzsi2>
 8000758:	0001      	movs	r1, r0
 800075a:	3908      	subs	r1, #8
 800075c:	2320      	movs	r3, #32
 800075e:	0022      	movs	r2, r4
 8000760:	1a5b      	subs	r3, r3, r1
 8000762:	408f      	lsls	r7, r1
 8000764:	40da      	lsrs	r2, r3
 8000766:	408c      	lsls	r4, r1
 8000768:	4317      	orrs	r7, r2
 800076a:	42b1      	cmp	r1, r6
 800076c:	da00      	bge.n	8000770 <__aeabi_dadd+0xd0>
 800076e:	e0ff      	b.n	8000970 <__aeabi_dadd+0x2d0>
 8000770:	1b89      	subs	r1, r1, r6
 8000772:	1c4b      	adds	r3, r1, #1
 8000774:	2b1f      	cmp	r3, #31
 8000776:	dd00      	ble.n	800077a <__aeabi_dadd+0xda>
 8000778:	e0a8      	b.n	80008cc <__aeabi_dadd+0x22c>
 800077a:	2220      	movs	r2, #32
 800077c:	0039      	movs	r1, r7
 800077e:	1ad2      	subs	r2, r2, r3
 8000780:	0020      	movs	r0, r4
 8000782:	4094      	lsls	r4, r2
 8000784:	4091      	lsls	r1, r2
 8000786:	40d8      	lsrs	r0, r3
 8000788:	1e62      	subs	r2, r4, #1
 800078a:	4194      	sbcs	r4, r2
 800078c:	40df      	lsrs	r7, r3
 800078e:	2600      	movs	r6, #0
 8000790:	4301      	orrs	r1, r0
 8000792:	430c      	orrs	r4, r1
 8000794:	0763      	lsls	r3, r4, #29
 8000796:	d009      	beq.n	80007ac <__aeabi_dadd+0x10c>
 8000798:	230f      	movs	r3, #15
 800079a:	4023      	ands	r3, r4
 800079c:	2b04      	cmp	r3, #4
 800079e:	d005      	beq.n	80007ac <__aeabi_dadd+0x10c>
 80007a0:	1d23      	adds	r3, r4, #4
 80007a2:	42a3      	cmp	r3, r4
 80007a4:	41a4      	sbcs	r4, r4
 80007a6:	4264      	negs	r4, r4
 80007a8:	193f      	adds	r7, r7, r4
 80007aa:	001c      	movs	r4, r3
 80007ac:	023b      	lsls	r3, r7, #8
 80007ae:	d400      	bmi.n	80007b2 <__aeabi_dadd+0x112>
 80007b0:	e09e      	b.n	80008f0 <__aeabi_dadd+0x250>
 80007b2:	4b95      	ldr	r3, [pc, #596]	; (8000a08 <__aeabi_dadd+0x368>)
 80007b4:	3601      	adds	r6, #1
 80007b6:	429e      	cmp	r6, r3
 80007b8:	d100      	bne.n	80007bc <__aeabi_dadd+0x11c>
 80007ba:	e0b7      	b.n	800092c <__aeabi_dadd+0x28c>
 80007bc:	4a93      	ldr	r2, [pc, #588]	; (8000a0c <__aeabi_dadd+0x36c>)
 80007be:	08e4      	lsrs	r4, r4, #3
 80007c0:	4017      	ands	r7, r2
 80007c2:	077b      	lsls	r3, r7, #29
 80007c4:	0571      	lsls	r1, r6, #21
 80007c6:	027f      	lsls	r7, r7, #9
 80007c8:	4323      	orrs	r3, r4
 80007ca:	0b3f      	lsrs	r7, r7, #12
 80007cc:	0d4a      	lsrs	r2, r1, #21
 80007ce:	0512      	lsls	r2, r2, #20
 80007d0:	433a      	orrs	r2, r7
 80007d2:	07ed      	lsls	r5, r5, #31
 80007d4:	432a      	orrs	r2, r5
 80007d6:	0018      	movs	r0, r3
 80007d8:	0011      	movs	r1, r2
 80007da:	bce0      	pop	{r5, r6, r7}
 80007dc:	46ba      	mov	sl, r7
 80007de:	46b1      	mov	r9, r6
 80007e0:	46a8      	mov	r8, r5
 80007e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e4:	2c00      	cmp	r4, #0
 80007e6:	d04b      	beq.n	8000880 <__aeabi_dadd+0x1e0>
 80007e8:	464c      	mov	r4, r9
 80007ea:	1ba4      	subs	r4, r4, r6
 80007ec:	46a4      	mov	ip, r4
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d000      	beq.n	80007f4 <__aeabi_dadd+0x154>
 80007f2:	e123      	b.n	8000a3c <__aeabi_dadd+0x39c>
 80007f4:	0004      	movs	r4, r0
 80007f6:	431c      	orrs	r4, r3
 80007f8:	d100      	bne.n	80007fc <__aeabi_dadd+0x15c>
 80007fa:	e1af      	b.n	8000b5c <__aeabi_dadd+0x4bc>
 80007fc:	4662      	mov	r2, ip
 80007fe:	1e54      	subs	r4, r2, #1
 8000800:	2a01      	cmp	r2, #1
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x166>
 8000804:	e215      	b.n	8000c32 <__aeabi_dadd+0x592>
 8000806:	4d80      	ldr	r5, [pc, #512]	; (8000a08 <__aeabi_dadd+0x368>)
 8000808:	45ac      	cmp	ip, r5
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0x16e>
 800080c:	e1c8      	b.n	8000ba0 <__aeabi_dadd+0x500>
 800080e:	46a4      	mov	ip, r4
 8000810:	e11b      	b.n	8000a4a <__aeabi_dadd+0x3aa>
 8000812:	464a      	mov	r2, r9
 8000814:	1ab2      	subs	r2, r6, r2
 8000816:	4694      	mov	ip, r2
 8000818:	2a00      	cmp	r2, #0
 800081a:	dc00      	bgt.n	800081e <__aeabi_dadd+0x17e>
 800081c:	e0ac      	b.n	8000978 <__aeabi_dadd+0x2d8>
 800081e:	464a      	mov	r2, r9
 8000820:	2a00      	cmp	r2, #0
 8000822:	d043      	beq.n	80008ac <__aeabi_dadd+0x20c>
 8000824:	4a78      	ldr	r2, [pc, #480]	; (8000a08 <__aeabi_dadd+0x368>)
 8000826:	4296      	cmp	r6, r2
 8000828:	d100      	bne.n	800082c <__aeabi_dadd+0x18c>
 800082a:	e1af      	b.n	8000b8c <__aeabi_dadd+0x4ec>
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	003c      	movs	r4, r7
 8000830:	0412      	lsls	r2, r2, #16
 8000832:	4314      	orrs	r4, r2
 8000834:	46a0      	mov	r8, r4
 8000836:	4662      	mov	r2, ip
 8000838:	2a38      	cmp	r2, #56	; 0x38
 800083a:	dc67      	bgt.n	800090c <__aeabi_dadd+0x26c>
 800083c:	2a1f      	cmp	r2, #31
 800083e:	dc00      	bgt.n	8000842 <__aeabi_dadd+0x1a2>
 8000840:	e15f      	b.n	8000b02 <__aeabi_dadd+0x462>
 8000842:	4647      	mov	r7, r8
 8000844:	3a20      	subs	r2, #32
 8000846:	40d7      	lsrs	r7, r2
 8000848:	4662      	mov	r2, ip
 800084a:	2a20      	cmp	r2, #32
 800084c:	d005      	beq.n	800085a <__aeabi_dadd+0x1ba>
 800084e:	4664      	mov	r4, ip
 8000850:	2240      	movs	r2, #64	; 0x40
 8000852:	1b12      	subs	r2, r2, r4
 8000854:	4644      	mov	r4, r8
 8000856:	4094      	lsls	r4, r2
 8000858:	4321      	orrs	r1, r4
 800085a:	1e4a      	subs	r2, r1, #1
 800085c:	4191      	sbcs	r1, r2
 800085e:	000c      	movs	r4, r1
 8000860:	433c      	orrs	r4, r7
 8000862:	e057      	b.n	8000914 <__aeabi_dadd+0x274>
 8000864:	003a      	movs	r2, r7
 8000866:	430a      	orrs	r2, r1
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0x1cc>
 800086a:	e105      	b.n	8000a78 <__aeabi_dadd+0x3d8>
 800086c:	0022      	movs	r2, r4
 800086e:	3a01      	subs	r2, #1
 8000870:	2c01      	cmp	r4, #1
 8000872:	d100      	bne.n	8000876 <__aeabi_dadd+0x1d6>
 8000874:	e182      	b.n	8000b7c <__aeabi_dadd+0x4dc>
 8000876:	4c64      	ldr	r4, [pc, #400]	; (8000a08 <__aeabi_dadd+0x368>)
 8000878:	45a4      	cmp	ip, r4
 800087a:	d05b      	beq.n	8000934 <__aeabi_dadd+0x294>
 800087c:	4694      	mov	ip, r2
 800087e:	e741      	b.n	8000704 <__aeabi_dadd+0x64>
 8000880:	4c63      	ldr	r4, [pc, #396]	; (8000a10 <__aeabi_dadd+0x370>)
 8000882:	1c77      	adds	r7, r6, #1
 8000884:	4227      	tst	r7, r4
 8000886:	d000      	beq.n	800088a <__aeabi_dadd+0x1ea>
 8000888:	e0c4      	b.n	8000a14 <__aeabi_dadd+0x374>
 800088a:	0004      	movs	r4, r0
 800088c:	431c      	orrs	r4, r3
 800088e:	2e00      	cmp	r6, #0
 8000890:	d000      	beq.n	8000894 <__aeabi_dadd+0x1f4>
 8000892:	e169      	b.n	8000b68 <__aeabi_dadd+0x4c8>
 8000894:	2c00      	cmp	r4, #0
 8000896:	d100      	bne.n	800089a <__aeabi_dadd+0x1fa>
 8000898:	e1bf      	b.n	8000c1a <__aeabi_dadd+0x57a>
 800089a:	4644      	mov	r4, r8
 800089c:	430c      	orrs	r4, r1
 800089e:	d000      	beq.n	80008a2 <__aeabi_dadd+0x202>
 80008a0:	e1d0      	b.n	8000c44 <__aeabi_dadd+0x5a4>
 80008a2:	0742      	lsls	r2, r0, #29
 80008a4:	08db      	lsrs	r3, r3, #3
 80008a6:	4313      	orrs	r3, r2
 80008a8:	08c0      	lsrs	r0, r0, #3
 80008aa:	e029      	b.n	8000900 <__aeabi_dadd+0x260>
 80008ac:	003a      	movs	r2, r7
 80008ae:	430a      	orrs	r2, r1
 80008b0:	d100      	bne.n	80008b4 <__aeabi_dadd+0x214>
 80008b2:	e170      	b.n	8000b96 <__aeabi_dadd+0x4f6>
 80008b4:	4662      	mov	r2, ip
 80008b6:	4664      	mov	r4, ip
 80008b8:	3a01      	subs	r2, #1
 80008ba:	2c01      	cmp	r4, #1
 80008bc:	d100      	bne.n	80008c0 <__aeabi_dadd+0x220>
 80008be:	e0e0      	b.n	8000a82 <__aeabi_dadd+0x3e2>
 80008c0:	4c51      	ldr	r4, [pc, #324]	; (8000a08 <__aeabi_dadd+0x368>)
 80008c2:	45a4      	cmp	ip, r4
 80008c4:	d100      	bne.n	80008c8 <__aeabi_dadd+0x228>
 80008c6:	e161      	b.n	8000b8c <__aeabi_dadd+0x4ec>
 80008c8:	4694      	mov	ip, r2
 80008ca:	e7b4      	b.n	8000836 <__aeabi_dadd+0x196>
 80008cc:	003a      	movs	r2, r7
 80008ce:	391f      	subs	r1, #31
 80008d0:	40ca      	lsrs	r2, r1
 80008d2:	0011      	movs	r1, r2
 80008d4:	2b20      	cmp	r3, #32
 80008d6:	d003      	beq.n	80008e0 <__aeabi_dadd+0x240>
 80008d8:	2240      	movs	r2, #64	; 0x40
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	409f      	lsls	r7, r3
 80008de:	433c      	orrs	r4, r7
 80008e0:	1e63      	subs	r3, r4, #1
 80008e2:	419c      	sbcs	r4, r3
 80008e4:	2700      	movs	r7, #0
 80008e6:	2600      	movs	r6, #0
 80008e8:	430c      	orrs	r4, r1
 80008ea:	0763      	lsls	r3, r4, #29
 80008ec:	d000      	beq.n	80008f0 <__aeabi_dadd+0x250>
 80008ee:	e753      	b.n	8000798 <__aeabi_dadd+0xf8>
 80008f0:	46b4      	mov	ip, r6
 80008f2:	08e4      	lsrs	r4, r4, #3
 80008f4:	077b      	lsls	r3, r7, #29
 80008f6:	4323      	orrs	r3, r4
 80008f8:	08f8      	lsrs	r0, r7, #3
 80008fa:	4a43      	ldr	r2, [pc, #268]	; (8000a08 <__aeabi_dadd+0x368>)
 80008fc:	4594      	cmp	ip, r2
 80008fe:	d01d      	beq.n	800093c <__aeabi_dadd+0x29c>
 8000900:	4662      	mov	r2, ip
 8000902:	0307      	lsls	r7, r0, #12
 8000904:	0552      	lsls	r2, r2, #21
 8000906:	0b3f      	lsrs	r7, r7, #12
 8000908:	0d52      	lsrs	r2, r2, #21
 800090a:	e760      	b.n	80007ce <__aeabi_dadd+0x12e>
 800090c:	4644      	mov	r4, r8
 800090e:	430c      	orrs	r4, r1
 8000910:	1e62      	subs	r2, r4, #1
 8000912:	4194      	sbcs	r4, r2
 8000914:	18e4      	adds	r4, r4, r3
 8000916:	429c      	cmp	r4, r3
 8000918:	419b      	sbcs	r3, r3
 800091a:	425f      	negs	r7, r3
 800091c:	183f      	adds	r7, r7, r0
 800091e:	023b      	lsls	r3, r7, #8
 8000920:	d5e3      	bpl.n	80008ea <__aeabi_dadd+0x24a>
 8000922:	4b39      	ldr	r3, [pc, #228]	; (8000a08 <__aeabi_dadd+0x368>)
 8000924:	3601      	adds	r6, #1
 8000926:	429e      	cmp	r6, r3
 8000928:	d000      	beq.n	800092c <__aeabi_dadd+0x28c>
 800092a:	e0b5      	b.n	8000a98 <__aeabi_dadd+0x3f8>
 800092c:	0032      	movs	r2, r6
 800092e:	2700      	movs	r7, #0
 8000930:	2300      	movs	r3, #0
 8000932:	e74c      	b.n	80007ce <__aeabi_dadd+0x12e>
 8000934:	0742      	lsls	r2, r0, #29
 8000936:	08db      	lsrs	r3, r3, #3
 8000938:	4313      	orrs	r3, r2
 800093a:	08c0      	lsrs	r0, r0, #3
 800093c:	001a      	movs	r2, r3
 800093e:	4302      	orrs	r2, r0
 8000940:	d100      	bne.n	8000944 <__aeabi_dadd+0x2a4>
 8000942:	e1e1      	b.n	8000d08 <__aeabi_dadd+0x668>
 8000944:	2780      	movs	r7, #128	; 0x80
 8000946:	033f      	lsls	r7, r7, #12
 8000948:	4307      	orrs	r7, r0
 800094a:	033f      	lsls	r7, r7, #12
 800094c:	4a2e      	ldr	r2, [pc, #184]	; (8000a08 <__aeabi_dadd+0x368>)
 800094e:	0b3f      	lsrs	r7, r7, #12
 8000950:	e73d      	b.n	80007ce <__aeabi_dadd+0x12e>
 8000952:	0020      	movs	r0, r4
 8000954:	f001 f89a 	bl	8001a8c <__clzsi2>
 8000958:	0001      	movs	r1, r0
 800095a:	3118      	adds	r1, #24
 800095c:	291f      	cmp	r1, #31
 800095e:	dc00      	bgt.n	8000962 <__aeabi_dadd+0x2c2>
 8000960:	e6fc      	b.n	800075c <__aeabi_dadd+0xbc>
 8000962:	3808      	subs	r0, #8
 8000964:	4084      	lsls	r4, r0
 8000966:	0027      	movs	r7, r4
 8000968:	2400      	movs	r4, #0
 800096a:	42b1      	cmp	r1, r6
 800096c:	db00      	blt.n	8000970 <__aeabi_dadd+0x2d0>
 800096e:	e6ff      	b.n	8000770 <__aeabi_dadd+0xd0>
 8000970:	4a26      	ldr	r2, [pc, #152]	; (8000a0c <__aeabi_dadd+0x36c>)
 8000972:	1a76      	subs	r6, r6, r1
 8000974:	4017      	ands	r7, r2
 8000976:	e70d      	b.n	8000794 <__aeabi_dadd+0xf4>
 8000978:	2a00      	cmp	r2, #0
 800097a:	d02f      	beq.n	80009dc <__aeabi_dadd+0x33c>
 800097c:	464a      	mov	r2, r9
 800097e:	1b92      	subs	r2, r2, r6
 8000980:	4694      	mov	ip, r2
 8000982:	2e00      	cmp	r6, #0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x2e8>
 8000986:	e0ad      	b.n	8000ae4 <__aeabi_dadd+0x444>
 8000988:	4a1f      	ldr	r2, [pc, #124]	; (8000a08 <__aeabi_dadd+0x368>)
 800098a:	4591      	cmp	r9, r2
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x2f0>
 800098e:	e10f      	b.n	8000bb0 <__aeabi_dadd+0x510>
 8000990:	2280      	movs	r2, #128	; 0x80
 8000992:	0412      	lsls	r2, r2, #16
 8000994:	4310      	orrs	r0, r2
 8000996:	4662      	mov	r2, ip
 8000998:	2a38      	cmp	r2, #56	; 0x38
 800099a:	dd00      	ble.n	800099e <__aeabi_dadd+0x2fe>
 800099c:	e10f      	b.n	8000bbe <__aeabi_dadd+0x51e>
 800099e:	2a1f      	cmp	r2, #31
 80009a0:	dd00      	ble.n	80009a4 <__aeabi_dadd+0x304>
 80009a2:	e180      	b.n	8000ca6 <__aeabi_dadd+0x606>
 80009a4:	4664      	mov	r4, ip
 80009a6:	2220      	movs	r2, #32
 80009a8:	001e      	movs	r6, r3
 80009aa:	1b12      	subs	r2, r2, r4
 80009ac:	4667      	mov	r7, ip
 80009ae:	0004      	movs	r4, r0
 80009b0:	4093      	lsls	r3, r2
 80009b2:	4094      	lsls	r4, r2
 80009b4:	40fe      	lsrs	r6, r7
 80009b6:	1e5a      	subs	r2, r3, #1
 80009b8:	4193      	sbcs	r3, r2
 80009ba:	40f8      	lsrs	r0, r7
 80009bc:	4334      	orrs	r4, r6
 80009be:	431c      	orrs	r4, r3
 80009c0:	4480      	add	r8, r0
 80009c2:	1864      	adds	r4, r4, r1
 80009c4:	428c      	cmp	r4, r1
 80009c6:	41bf      	sbcs	r7, r7
 80009c8:	427f      	negs	r7, r7
 80009ca:	464e      	mov	r6, r9
 80009cc:	4447      	add	r7, r8
 80009ce:	e7a6      	b.n	800091e <__aeabi_dadd+0x27e>
 80009d0:	4642      	mov	r2, r8
 80009d2:	430a      	orrs	r2, r1
 80009d4:	0011      	movs	r1, r2
 80009d6:	1e4a      	subs	r2, r1, #1
 80009d8:	4191      	sbcs	r1, r2
 80009da:	e6ad      	b.n	8000738 <__aeabi_dadd+0x98>
 80009dc:	4c0c      	ldr	r4, [pc, #48]	; (8000a10 <__aeabi_dadd+0x370>)
 80009de:	1c72      	adds	r2, r6, #1
 80009e0:	4222      	tst	r2, r4
 80009e2:	d000      	beq.n	80009e6 <__aeabi_dadd+0x346>
 80009e4:	e0a1      	b.n	8000b2a <__aeabi_dadd+0x48a>
 80009e6:	0002      	movs	r2, r0
 80009e8:	431a      	orrs	r2, r3
 80009ea:	2e00      	cmp	r6, #0
 80009ec:	d000      	beq.n	80009f0 <__aeabi_dadd+0x350>
 80009ee:	e0fa      	b.n	8000be6 <__aeabi_dadd+0x546>
 80009f0:	2a00      	cmp	r2, #0
 80009f2:	d100      	bne.n	80009f6 <__aeabi_dadd+0x356>
 80009f4:	e145      	b.n	8000c82 <__aeabi_dadd+0x5e2>
 80009f6:	003a      	movs	r2, r7
 80009f8:	430a      	orrs	r2, r1
 80009fa:	d000      	beq.n	80009fe <__aeabi_dadd+0x35e>
 80009fc:	e146      	b.n	8000c8c <__aeabi_dadd+0x5ec>
 80009fe:	0742      	lsls	r2, r0, #29
 8000a00:	08db      	lsrs	r3, r3, #3
 8000a02:	4313      	orrs	r3, r2
 8000a04:	08c0      	lsrs	r0, r0, #3
 8000a06:	e77b      	b.n	8000900 <__aeabi_dadd+0x260>
 8000a08:	000007ff 	.word	0x000007ff
 8000a0c:	ff7fffff 	.word	0xff7fffff
 8000a10:	000007fe 	.word	0x000007fe
 8000a14:	4647      	mov	r7, r8
 8000a16:	1a5c      	subs	r4, r3, r1
 8000a18:	1bc2      	subs	r2, r0, r7
 8000a1a:	42a3      	cmp	r3, r4
 8000a1c:	41bf      	sbcs	r7, r7
 8000a1e:	427f      	negs	r7, r7
 8000a20:	46b9      	mov	r9, r7
 8000a22:	0017      	movs	r7, r2
 8000a24:	464a      	mov	r2, r9
 8000a26:	1abf      	subs	r7, r7, r2
 8000a28:	023a      	lsls	r2, r7, #8
 8000a2a:	d500      	bpl.n	8000a2e <__aeabi_dadd+0x38e>
 8000a2c:	e08d      	b.n	8000b4a <__aeabi_dadd+0x4aa>
 8000a2e:	0023      	movs	r3, r4
 8000a30:	433b      	orrs	r3, r7
 8000a32:	d000      	beq.n	8000a36 <__aeabi_dadd+0x396>
 8000a34:	e68a      	b.n	800074c <__aeabi_dadd+0xac>
 8000a36:	2000      	movs	r0, #0
 8000a38:	2500      	movs	r5, #0
 8000a3a:	e761      	b.n	8000900 <__aeabi_dadd+0x260>
 8000a3c:	4cb4      	ldr	r4, [pc, #720]	; (8000d10 <__aeabi_dadd+0x670>)
 8000a3e:	45a1      	cmp	r9, r4
 8000a40:	d100      	bne.n	8000a44 <__aeabi_dadd+0x3a4>
 8000a42:	e0ad      	b.n	8000ba0 <__aeabi_dadd+0x500>
 8000a44:	2480      	movs	r4, #128	; 0x80
 8000a46:	0424      	lsls	r4, r4, #16
 8000a48:	4320      	orrs	r0, r4
 8000a4a:	4664      	mov	r4, ip
 8000a4c:	2c38      	cmp	r4, #56	; 0x38
 8000a4e:	dc3d      	bgt.n	8000acc <__aeabi_dadd+0x42c>
 8000a50:	4662      	mov	r2, ip
 8000a52:	2c1f      	cmp	r4, #31
 8000a54:	dd00      	ble.n	8000a58 <__aeabi_dadd+0x3b8>
 8000a56:	e0b7      	b.n	8000bc8 <__aeabi_dadd+0x528>
 8000a58:	2520      	movs	r5, #32
 8000a5a:	001e      	movs	r6, r3
 8000a5c:	1b2d      	subs	r5, r5, r4
 8000a5e:	0004      	movs	r4, r0
 8000a60:	40ab      	lsls	r3, r5
 8000a62:	40ac      	lsls	r4, r5
 8000a64:	40d6      	lsrs	r6, r2
 8000a66:	40d0      	lsrs	r0, r2
 8000a68:	4642      	mov	r2, r8
 8000a6a:	1e5d      	subs	r5, r3, #1
 8000a6c:	41ab      	sbcs	r3, r5
 8000a6e:	4334      	orrs	r4, r6
 8000a70:	1a12      	subs	r2, r2, r0
 8000a72:	4690      	mov	r8, r2
 8000a74:	4323      	orrs	r3, r4
 8000a76:	e02c      	b.n	8000ad2 <__aeabi_dadd+0x432>
 8000a78:	0742      	lsls	r2, r0, #29
 8000a7a:	08db      	lsrs	r3, r3, #3
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	08c0      	lsrs	r0, r0, #3
 8000a80:	e73b      	b.n	80008fa <__aeabi_dadd+0x25a>
 8000a82:	185c      	adds	r4, r3, r1
 8000a84:	429c      	cmp	r4, r3
 8000a86:	419b      	sbcs	r3, r3
 8000a88:	4440      	add	r0, r8
 8000a8a:	425b      	negs	r3, r3
 8000a8c:	18c7      	adds	r7, r0, r3
 8000a8e:	2601      	movs	r6, #1
 8000a90:	023b      	lsls	r3, r7, #8
 8000a92:	d400      	bmi.n	8000a96 <__aeabi_dadd+0x3f6>
 8000a94:	e729      	b.n	80008ea <__aeabi_dadd+0x24a>
 8000a96:	2602      	movs	r6, #2
 8000a98:	4a9e      	ldr	r2, [pc, #632]	; (8000d14 <__aeabi_dadd+0x674>)
 8000a9a:	0863      	lsrs	r3, r4, #1
 8000a9c:	4017      	ands	r7, r2
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4014      	ands	r4, r2
 8000aa2:	431c      	orrs	r4, r3
 8000aa4:	07fb      	lsls	r3, r7, #31
 8000aa6:	431c      	orrs	r4, r3
 8000aa8:	087f      	lsrs	r7, r7, #1
 8000aaa:	e673      	b.n	8000794 <__aeabi_dadd+0xf4>
 8000aac:	4644      	mov	r4, r8
 8000aae:	3a20      	subs	r2, #32
 8000ab0:	40d4      	lsrs	r4, r2
 8000ab2:	4662      	mov	r2, ip
 8000ab4:	2a20      	cmp	r2, #32
 8000ab6:	d005      	beq.n	8000ac4 <__aeabi_dadd+0x424>
 8000ab8:	4667      	mov	r7, ip
 8000aba:	2240      	movs	r2, #64	; 0x40
 8000abc:	1bd2      	subs	r2, r2, r7
 8000abe:	4647      	mov	r7, r8
 8000ac0:	4097      	lsls	r7, r2
 8000ac2:	4339      	orrs	r1, r7
 8000ac4:	1e4a      	subs	r2, r1, #1
 8000ac6:	4191      	sbcs	r1, r2
 8000ac8:	4321      	orrs	r1, r4
 8000aca:	e635      	b.n	8000738 <__aeabi_dadd+0x98>
 8000acc:	4303      	orrs	r3, r0
 8000ace:	1e58      	subs	r0, r3, #1
 8000ad0:	4183      	sbcs	r3, r0
 8000ad2:	1acc      	subs	r4, r1, r3
 8000ad4:	42a1      	cmp	r1, r4
 8000ad6:	41bf      	sbcs	r7, r7
 8000ad8:	4643      	mov	r3, r8
 8000ada:	427f      	negs	r7, r7
 8000adc:	4655      	mov	r5, sl
 8000ade:	464e      	mov	r6, r9
 8000ae0:	1bdf      	subs	r7, r3, r7
 8000ae2:	e62e      	b.n	8000742 <__aeabi_dadd+0xa2>
 8000ae4:	0002      	movs	r2, r0
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	d100      	bne.n	8000aec <__aeabi_dadd+0x44c>
 8000aea:	e0bd      	b.n	8000c68 <__aeabi_dadd+0x5c8>
 8000aec:	4662      	mov	r2, ip
 8000aee:	4664      	mov	r4, ip
 8000af0:	3a01      	subs	r2, #1
 8000af2:	2c01      	cmp	r4, #1
 8000af4:	d100      	bne.n	8000af8 <__aeabi_dadd+0x458>
 8000af6:	e0e5      	b.n	8000cc4 <__aeabi_dadd+0x624>
 8000af8:	4c85      	ldr	r4, [pc, #532]	; (8000d10 <__aeabi_dadd+0x670>)
 8000afa:	45a4      	cmp	ip, r4
 8000afc:	d058      	beq.n	8000bb0 <__aeabi_dadd+0x510>
 8000afe:	4694      	mov	ip, r2
 8000b00:	e749      	b.n	8000996 <__aeabi_dadd+0x2f6>
 8000b02:	4664      	mov	r4, ip
 8000b04:	2220      	movs	r2, #32
 8000b06:	1b12      	subs	r2, r2, r4
 8000b08:	4644      	mov	r4, r8
 8000b0a:	4094      	lsls	r4, r2
 8000b0c:	000f      	movs	r7, r1
 8000b0e:	46a1      	mov	r9, r4
 8000b10:	4664      	mov	r4, ip
 8000b12:	4091      	lsls	r1, r2
 8000b14:	40e7      	lsrs	r7, r4
 8000b16:	464c      	mov	r4, r9
 8000b18:	1e4a      	subs	r2, r1, #1
 8000b1a:	4191      	sbcs	r1, r2
 8000b1c:	433c      	orrs	r4, r7
 8000b1e:	4642      	mov	r2, r8
 8000b20:	430c      	orrs	r4, r1
 8000b22:	4661      	mov	r1, ip
 8000b24:	40ca      	lsrs	r2, r1
 8000b26:	1880      	adds	r0, r0, r2
 8000b28:	e6f4      	b.n	8000914 <__aeabi_dadd+0x274>
 8000b2a:	4c79      	ldr	r4, [pc, #484]	; (8000d10 <__aeabi_dadd+0x670>)
 8000b2c:	42a2      	cmp	r2, r4
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_dadd+0x492>
 8000b30:	e6fd      	b.n	800092e <__aeabi_dadd+0x28e>
 8000b32:	1859      	adds	r1, r3, r1
 8000b34:	4299      	cmp	r1, r3
 8000b36:	419b      	sbcs	r3, r3
 8000b38:	4440      	add	r0, r8
 8000b3a:	425f      	negs	r7, r3
 8000b3c:	19c7      	adds	r7, r0, r7
 8000b3e:	07fc      	lsls	r4, r7, #31
 8000b40:	0849      	lsrs	r1, r1, #1
 8000b42:	0016      	movs	r6, r2
 8000b44:	430c      	orrs	r4, r1
 8000b46:	087f      	lsrs	r7, r7, #1
 8000b48:	e6cf      	b.n	80008ea <__aeabi_dadd+0x24a>
 8000b4a:	1acc      	subs	r4, r1, r3
 8000b4c:	42a1      	cmp	r1, r4
 8000b4e:	41bf      	sbcs	r7, r7
 8000b50:	4643      	mov	r3, r8
 8000b52:	427f      	negs	r7, r7
 8000b54:	1a18      	subs	r0, r3, r0
 8000b56:	4655      	mov	r5, sl
 8000b58:	1bc7      	subs	r7, r0, r7
 8000b5a:	e5f7      	b.n	800074c <__aeabi_dadd+0xac>
 8000b5c:	08c9      	lsrs	r1, r1, #3
 8000b5e:	077b      	lsls	r3, r7, #29
 8000b60:	4655      	mov	r5, sl
 8000b62:	430b      	orrs	r3, r1
 8000b64:	08f8      	lsrs	r0, r7, #3
 8000b66:	e6c8      	b.n	80008fa <__aeabi_dadd+0x25a>
 8000b68:	2c00      	cmp	r4, #0
 8000b6a:	d000      	beq.n	8000b6e <__aeabi_dadd+0x4ce>
 8000b6c:	e081      	b.n	8000c72 <__aeabi_dadd+0x5d2>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	430b      	orrs	r3, r1
 8000b72:	d115      	bne.n	8000ba0 <__aeabi_dadd+0x500>
 8000b74:	2080      	movs	r0, #128	; 0x80
 8000b76:	2500      	movs	r5, #0
 8000b78:	0300      	lsls	r0, r0, #12
 8000b7a:	e6e3      	b.n	8000944 <__aeabi_dadd+0x2a4>
 8000b7c:	1a5c      	subs	r4, r3, r1
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	419b      	sbcs	r3, r3
 8000b82:	1bc7      	subs	r7, r0, r7
 8000b84:	425b      	negs	r3, r3
 8000b86:	2601      	movs	r6, #1
 8000b88:	1aff      	subs	r7, r7, r3
 8000b8a:	e5da      	b.n	8000742 <__aeabi_dadd+0xa2>
 8000b8c:	0742      	lsls	r2, r0, #29
 8000b8e:	08db      	lsrs	r3, r3, #3
 8000b90:	4313      	orrs	r3, r2
 8000b92:	08c0      	lsrs	r0, r0, #3
 8000b94:	e6d2      	b.n	800093c <__aeabi_dadd+0x29c>
 8000b96:	0742      	lsls	r2, r0, #29
 8000b98:	08db      	lsrs	r3, r3, #3
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	08c0      	lsrs	r0, r0, #3
 8000b9e:	e6ac      	b.n	80008fa <__aeabi_dadd+0x25a>
 8000ba0:	4643      	mov	r3, r8
 8000ba2:	4642      	mov	r2, r8
 8000ba4:	08c9      	lsrs	r1, r1, #3
 8000ba6:	075b      	lsls	r3, r3, #29
 8000ba8:	4655      	mov	r5, sl
 8000baa:	430b      	orrs	r3, r1
 8000bac:	08d0      	lsrs	r0, r2, #3
 8000bae:	e6c5      	b.n	800093c <__aeabi_dadd+0x29c>
 8000bb0:	4643      	mov	r3, r8
 8000bb2:	4642      	mov	r2, r8
 8000bb4:	075b      	lsls	r3, r3, #29
 8000bb6:	08c9      	lsrs	r1, r1, #3
 8000bb8:	430b      	orrs	r3, r1
 8000bba:	08d0      	lsrs	r0, r2, #3
 8000bbc:	e6be      	b.n	800093c <__aeabi_dadd+0x29c>
 8000bbe:	4303      	orrs	r3, r0
 8000bc0:	001c      	movs	r4, r3
 8000bc2:	1e63      	subs	r3, r4, #1
 8000bc4:	419c      	sbcs	r4, r3
 8000bc6:	e6fc      	b.n	80009c2 <__aeabi_dadd+0x322>
 8000bc8:	0002      	movs	r2, r0
 8000bca:	3c20      	subs	r4, #32
 8000bcc:	40e2      	lsrs	r2, r4
 8000bce:	0014      	movs	r4, r2
 8000bd0:	4662      	mov	r2, ip
 8000bd2:	2a20      	cmp	r2, #32
 8000bd4:	d003      	beq.n	8000bde <__aeabi_dadd+0x53e>
 8000bd6:	2540      	movs	r5, #64	; 0x40
 8000bd8:	1aad      	subs	r5, r5, r2
 8000bda:	40a8      	lsls	r0, r5
 8000bdc:	4303      	orrs	r3, r0
 8000bde:	1e58      	subs	r0, r3, #1
 8000be0:	4183      	sbcs	r3, r0
 8000be2:	4323      	orrs	r3, r4
 8000be4:	e775      	b.n	8000ad2 <__aeabi_dadd+0x432>
 8000be6:	2a00      	cmp	r2, #0
 8000be8:	d0e2      	beq.n	8000bb0 <__aeabi_dadd+0x510>
 8000bea:	003a      	movs	r2, r7
 8000bec:	430a      	orrs	r2, r1
 8000bee:	d0cd      	beq.n	8000b8c <__aeabi_dadd+0x4ec>
 8000bf0:	0742      	lsls	r2, r0, #29
 8000bf2:	08db      	lsrs	r3, r3, #3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	2280      	movs	r2, #128	; 0x80
 8000bf8:	08c0      	lsrs	r0, r0, #3
 8000bfa:	0312      	lsls	r2, r2, #12
 8000bfc:	4210      	tst	r0, r2
 8000bfe:	d006      	beq.n	8000c0e <__aeabi_dadd+0x56e>
 8000c00:	08fc      	lsrs	r4, r7, #3
 8000c02:	4214      	tst	r4, r2
 8000c04:	d103      	bne.n	8000c0e <__aeabi_dadd+0x56e>
 8000c06:	0020      	movs	r0, r4
 8000c08:	08cb      	lsrs	r3, r1, #3
 8000c0a:	077a      	lsls	r2, r7, #29
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	0f5a      	lsrs	r2, r3, #29
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	0752      	lsls	r2, r2, #29
 8000c14:	08db      	lsrs	r3, r3, #3
 8000c16:	4313      	orrs	r3, r2
 8000c18:	e690      	b.n	800093c <__aeabi_dadd+0x29c>
 8000c1a:	4643      	mov	r3, r8
 8000c1c:	430b      	orrs	r3, r1
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_dadd+0x582>
 8000c20:	e709      	b.n	8000a36 <__aeabi_dadd+0x396>
 8000c22:	4643      	mov	r3, r8
 8000c24:	4642      	mov	r2, r8
 8000c26:	08c9      	lsrs	r1, r1, #3
 8000c28:	075b      	lsls	r3, r3, #29
 8000c2a:	4655      	mov	r5, sl
 8000c2c:	430b      	orrs	r3, r1
 8000c2e:	08d0      	lsrs	r0, r2, #3
 8000c30:	e666      	b.n	8000900 <__aeabi_dadd+0x260>
 8000c32:	1acc      	subs	r4, r1, r3
 8000c34:	42a1      	cmp	r1, r4
 8000c36:	4189      	sbcs	r1, r1
 8000c38:	1a3f      	subs	r7, r7, r0
 8000c3a:	4249      	negs	r1, r1
 8000c3c:	4655      	mov	r5, sl
 8000c3e:	2601      	movs	r6, #1
 8000c40:	1a7f      	subs	r7, r7, r1
 8000c42:	e57e      	b.n	8000742 <__aeabi_dadd+0xa2>
 8000c44:	4642      	mov	r2, r8
 8000c46:	1a5c      	subs	r4, r3, r1
 8000c48:	1a87      	subs	r7, r0, r2
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	4192      	sbcs	r2, r2
 8000c4e:	4252      	negs	r2, r2
 8000c50:	1abf      	subs	r7, r7, r2
 8000c52:	023a      	lsls	r2, r7, #8
 8000c54:	d53d      	bpl.n	8000cd2 <__aeabi_dadd+0x632>
 8000c56:	1acc      	subs	r4, r1, r3
 8000c58:	42a1      	cmp	r1, r4
 8000c5a:	4189      	sbcs	r1, r1
 8000c5c:	4643      	mov	r3, r8
 8000c5e:	4249      	negs	r1, r1
 8000c60:	1a1f      	subs	r7, r3, r0
 8000c62:	4655      	mov	r5, sl
 8000c64:	1a7f      	subs	r7, r7, r1
 8000c66:	e595      	b.n	8000794 <__aeabi_dadd+0xf4>
 8000c68:	077b      	lsls	r3, r7, #29
 8000c6a:	08c9      	lsrs	r1, r1, #3
 8000c6c:	430b      	orrs	r3, r1
 8000c6e:	08f8      	lsrs	r0, r7, #3
 8000c70:	e643      	b.n	80008fa <__aeabi_dadd+0x25a>
 8000c72:	4644      	mov	r4, r8
 8000c74:	08db      	lsrs	r3, r3, #3
 8000c76:	430c      	orrs	r4, r1
 8000c78:	d130      	bne.n	8000cdc <__aeabi_dadd+0x63c>
 8000c7a:	0742      	lsls	r2, r0, #29
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	08c0      	lsrs	r0, r0, #3
 8000c80:	e65c      	b.n	800093c <__aeabi_dadd+0x29c>
 8000c82:	077b      	lsls	r3, r7, #29
 8000c84:	08c9      	lsrs	r1, r1, #3
 8000c86:	430b      	orrs	r3, r1
 8000c88:	08f8      	lsrs	r0, r7, #3
 8000c8a:	e639      	b.n	8000900 <__aeabi_dadd+0x260>
 8000c8c:	185c      	adds	r4, r3, r1
 8000c8e:	429c      	cmp	r4, r3
 8000c90:	419b      	sbcs	r3, r3
 8000c92:	4440      	add	r0, r8
 8000c94:	425b      	negs	r3, r3
 8000c96:	18c7      	adds	r7, r0, r3
 8000c98:	023b      	lsls	r3, r7, #8
 8000c9a:	d400      	bmi.n	8000c9e <__aeabi_dadd+0x5fe>
 8000c9c:	e625      	b.n	80008ea <__aeabi_dadd+0x24a>
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <__aeabi_dadd+0x674>)
 8000ca0:	2601      	movs	r6, #1
 8000ca2:	401f      	ands	r7, r3
 8000ca4:	e621      	b.n	80008ea <__aeabi_dadd+0x24a>
 8000ca6:	0004      	movs	r4, r0
 8000ca8:	3a20      	subs	r2, #32
 8000caa:	40d4      	lsrs	r4, r2
 8000cac:	4662      	mov	r2, ip
 8000cae:	2a20      	cmp	r2, #32
 8000cb0:	d004      	beq.n	8000cbc <__aeabi_dadd+0x61c>
 8000cb2:	2240      	movs	r2, #64	; 0x40
 8000cb4:	4666      	mov	r6, ip
 8000cb6:	1b92      	subs	r2, r2, r6
 8000cb8:	4090      	lsls	r0, r2
 8000cba:	4303      	orrs	r3, r0
 8000cbc:	1e5a      	subs	r2, r3, #1
 8000cbe:	4193      	sbcs	r3, r2
 8000cc0:	431c      	orrs	r4, r3
 8000cc2:	e67e      	b.n	80009c2 <__aeabi_dadd+0x322>
 8000cc4:	185c      	adds	r4, r3, r1
 8000cc6:	428c      	cmp	r4, r1
 8000cc8:	4189      	sbcs	r1, r1
 8000cca:	4440      	add	r0, r8
 8000ccc:	4249      	negs	r1, r1
 8000cce:	1847      	adds	r7, r0, r1
 8000cd0:	e6dd      	b.n	8000a8e <__aeabi_dadd+0x3ee>
 8000cd2:	0023      	movs	r3, r4
 8000cd4:	433b      	orrs	r3, r7
 8000cd6:	d100      	bne.n	8000cda <__aeabi_dadd+0x63a>
 8000cd8:	e6ad      	b.n	8000a36 <__aeabi_dadd+0x396>
 8000cda:	e606      	b.n	80008ea <__aeabi_dadd+0x24a>
 8000cdc:	0744      	lsls	r4, r0, #29
 8000cde:	4323      	orrs	r3, r4
 8000ce0:	2480      	movs	r4, #128	; 0x80
 8000ce2:	08c0      	lsrs	r0, r0, #3
 8000ce4:	0324      	lsls	r4, r4, #12
 8000ce6:	4220      	tst	r0, r4
 8000ce8:	d008      	beq.n	8000cfc <__aeabi_dadd+0x65c>
 8000cea:	4642      	mov	r2, r8
 8000cec:	08d6      	lsrs	r6, r2, #3
 8000cee:	4226      	tst	r6, r4
 8000cf0:	d104      	bne.n	8000cfc <__aeabi_dadd+0x65c>
 8000cf2:	4655      	mov	r5, sl
 8000cf4:	0030      	movs	r0, r6
 8000cf6:	08cb      	lsrs	r3, r1, #3
 8000cf8:	0751      	lsls	r1, r2, #29
 8000cfa:	430b      	orrs	r3, r1
 8000cfc:	0f5a      	lsrs	r2, r3, #29
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	08db      	lsrs	r3, r3, #3
 8000d02:	0752      	lsls	r2, r2, #29
 8000d04:	4313      	orrs	r3, r2
 8000d06:	e619      	b.n	800093c <__aeabi_dadd+0x29c>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	4a01      	ldr	r2, [pc, #4]	; (8000d10 <__aeabi_dadd+0x670>)
 8000d0c:	001f      	movs	r7, r3
 8000d0e:	e55e      	b.n	80007ce <__aeabi_dadd+0x12e>
 8000d10:	000007ff 	.word	0x000007ff
 8000d14:	ff7fffff 	.word	0xff7fffff

08000d18 <__aeabi_dmul>:
 8000d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d1a:	4657      	mov	r7, sl
 8000d1c:	464e      	mov	r6, r9
 8000d1e:	4645      	mov	r5, r8
 8000d20:	46de      	mov	lr, fp
 8000d22:	b5e0      	push	{r5, r6, r7, lr}
 8000d24:	4698      	mov	r8, r3
 8000d26:	030c      	lsls	r4, r1, #12
 8000d28:	004b      	lsls	r3, r1, #1
 8000d2a:	0006      	movs	r6, r0
 8000d2c:	4692      	mov	sl, r2
 8000d2e:	b087      	sub	sp, #28
 8000d30:	0b24      	lsrs	r4, r4, #12
 8000d32:	0d5b      	lsrs	r3, r3, #21
 8000d34:	0fcf      	lsrs	r7, r1, #31
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d100      	bne.n	8000d3c <__aeabi_dmul+0x24>
 8000d3a:	e15c      	b.n	8000ff6 <__aeabi_dmul+0x2de>
 8000d3c:	4ad9      	ldr	r2, [pc, #868]	; (80010a4 <__aeabi_dmul+0x38c>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d100      	bne.n	8000d44 <__aeabi_dmul+0x2c>
 8000d42:	e175      	b.n	8001030 <__aeabi_dmul+0x318>
 8000d44:	0f42      	lsrs	r2, r0, #29
 8000d46:	00e4      	lsls	r4, r4, #3
 8000d48:	4314      	orrs	r4, r2
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	0412      	lsls	r2, r2, #16
 8000d4e:	4314      	orrs	r4, r2
 8000d50:	4ad5      	ldr	r2, [pc, #852]	; (80010a8 <__aeabi_dmul+0x390>)
 8000d52:	00c5      	lsls	r5, r0, #3
 8000d54:	4694      	mov	ip, r2
 8000d56:	4463      	add	r3, ip
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	4699      	mov	r9, r3
 8000d5e:	469b      	mov	fp, r3
 8000d60:	4643      	mov	r3, r8
 8000d62:	4642      	mov	r2, r8
 8000d64:	031e      	lsls	r6, r3, #12
 8000d66:	0fd2      	lsrs	r2, r2, #31
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4650      	mov	r0, sl
 8000d6c:	4690      	mov	r8, r2
 8000d6e:	0b36      	lsrs	r6, r6, #12
 8000d70:	0d5b      	lsrs	r3, r3, #21
 8000d72:	d100      	bne.n	8000d76 <__aeabi_dmul+0x5e>
 8000d74:	e120      	b.n	8000fb8 <__aeabi_dmul+0x2a0>
 8000d76:	4acb      	ldr	r2, [pc, #812]	; (80010a4 <__aeabi_dmul+0x38c>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d100      	bne.n	8000d7e <__aeabi_dmul+0x66>
 8000d7c:	e162      	b.n	8001044 <__aeabi_dmul+0x32c>
 8000d7e:	49ca      	ldr	r1, [pc, #808]	; (80010a8 <__aeabi_dmul+0x390>)
 8000d80:	0f42      	lsrs	r2, r0, #29
 8000d82:	468c      	mov	ip, r1
 8000d84:	9900      	ldr	r1, [sp, #0]
 8000d86:	4463      	add	r3, ip
 8000d88:	00f6      	lsls	r6, r6, #3
 8000d8a:	468c      	mov	ip, r1
 8000d8c:	4316      	orrs	r6, r2
 8000d8e:	2280      	movs	r2, #128	; 0x80
 8000d90:	449c      	add	ip, r3
 8000d92:	0412      	lsls	r2, r2, #16
 8000d94:	4663      	mov	r3, ip
 8000d96:	4316      	orrs	r6, r2
 8000d98:	00c2      	lsls	r2, r0, #3
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	9900      	ldr	r1, [sp, #0]
 8000da0:	4643      	mov	r3, r8
 8000da2:	3101      	adds	r1, #1
 8000da4:	468c      	mov	ip, r1
 8000da6:	4649      	mov	r1, r9
 8000da8:	407b      	eors	r3, r7
 8000daa:	9301      	str	r3, [sp, #4]
 8000dac:	290f      	cmp	r1, #15
 8000dae:	d826      	bhi.n	8000dfe <__aeabi_dmul+0xe6>
 8000db0:	4bbe      	ldr	r3, [pc, #760]	; (80010ac <__aeabi_dmul+0x394>)
 8000db2:	0089      	lsls	r1, r1, #2
 8000db4:	5859      	ldr	r1, [r3, r1]
 8000db6:	468f      	mov	pc, r1
 8000db8:	4643      	mov	r3, r8
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	0034      	movs	r4, r6
 8000dbe:	0015      	movs	r5, r2
 8000dc0:	4683      	mov	fp, r0
 8000dc2:	465b      	mov	r3, fp
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d016      	beq.n	8000df6 <__aeabi_dmul+0xde>
 8000dc8:	2b03      	cmp	r3, #3
 8000dca:	d100      	bne.n	8000dce <__aeabi_dmul+0xb6>
 8000dcc:	e203      	b.n	80011d6 <__aeabi_dmul+0x4be>
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d000      	beq.n	8000dd4 <__aeabi_dmul+0xbc>
 8000dd2:	e0cd      	b.n	8000f70 <__aeabi_dmul+0x258>
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2400      	movs	r4, #0
 8000dd8:	2500      	movs	r5, #0
 8000dda:	9b01      	ldr	r3, [sp, #4]
 8000ddc:	0512      	lsls	r2, r2, #20
 8000dde:	4322      	orrs	r2, r4
 8000de0:	07db      	lsls	r3, r3, #31
 8000de2:	431a      	orrs	r2, r3
 8000de4:	0028      	movs	r0, r5
 8000de6:	0011      	movs	r1, r2
 8000de8:	b007      	add	sp, #28
 8000dea:	bcf0      	pop	{r4, r5, r6, r7}
 8000dec:	46bb      	mov	fp, r7
 8000dee:	46b2      	mov	sl, r6
 8000df0:	46a9      	mov	r9, r5
 8000df2:	46a0      	mov	r8, r4
 8000df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df6:	2400      	movs	r4, #0
 8000df8:	2500      	movs	r5, #0
 8000dfa:	4aaa      	ldr	r2, [pc, #680]	; (80010a4 <__aeabi_dmul+0x38c>)
 8000dfc:	e7ed      	b.n	8000dda <__aeabi_dmul+0xc2>
 8000dfe:	0c28      	lsrs	r0, r5, #16
 8000e00:	042d      	lsls	r5, r5, #16
 8000e02:	0c2d      	lsrs	r5, r5, #16
 8000e04:	002b      	movs	r3, r5
 8000e06:	0c11      	lsrs	r1, r2, #16
 8000e08:	0412      	lsls	r2, r2, #16
 8000e0a:	0c12      	lsrs	r2, r2, #16
 8000e0c:	4353      	muls	r3, r2
 8000e0e:	4698      	mov	r8, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	002f      	movs	r7, r5
 8000e14:	4343      	muls	r3, r0
 8000e16:	4699      	mov	r9, r3
 8000e18:	434f      	muls	r7, r1
 8000e1a:	444f      	add	r7, r9
 8000e1c:	46bb      	mov	fp, r7
 8000e1e:	4647      	mov	r7, r8
 8000e20:	000b      	movs	r3, r1
 8000e22:	0c3f      	lsrs	r7, r7, #16
 8000e24:	46ba      	mov	sl, r7
 8000e26:	4343      	muls	r3, r0
 8000e28:	44da      	add	sl, fp
 8000e2a:	9302      	str	r3, [sp, #8]
 8000e2c:	45d1      	cmp	r9, sl
 8000e2e:	d904      	bls.n	8000e3a <__aeabi_dmul+0x122>
 8000e30:	2780      	movs	r7, #128	; 0x80
 8000e32:	027f      	lsls	r7, r7, #9
 8000e34:	46b9      	mov	r9, r7
 8000e36:	444b      	add	r3, r9
 8000e38:	9302      	str	r3, [sp, #8]
 8000e3a:	4653      	mov	r3, sl
 8000e3c:	0c1b      	lsrs	r3, r3, #16
 8000e3e:	469b      	mov	fp, r3
 8000e40:	4653      	mov	r3, sl
 8000e42:	041f      	lsls	r7, r3, #16
 8000e44:	4643      	mov	r3, r8
 8000e46:	041b      	lsls	r3, r3, #16
 8000e48:	0c1b      	lsrs	r3, r3, #16
 8000e4a:	4698      	mov	r8, r3
 8000e4c:	003b      	movs	r3, r7
 8000e4e:	4443      	add	r3, r8
 8000e50:	9304      	str	r3, [sp, #16]
 8000e52:	0c33      	lsrs	r3, r6, #16
 8000e54:	0436      	lsls	r6, r6, #16
 8000e56:	0c36      	lsrs	r6, r6, #16
 8000e58:	4698      	mov	r8, r3
 8000e5a:	0033      	movs	r3, r6
 8000e5c:	4343      	muls	r3, r0
 8000e5e:	4699      	mov	r9, r3
 8000e60:	4643      	mov	r3, r8
 8000e62:	4343      	muls	r3, r0
 8000e64:	002f      	movs	r7, r5
 8000e66:	469a      	mov	sl, r3
 8000e68:	4643      	mov	r3, r8
 8000e6a:	4377      	muls	r7, r6
 8000e6c:	435d      	muls	r5, r3
 8000e6e:	0c38      	lsrs	r0, r7, #16
 8000e70:	444d      	add	r5, r9
 8000e72:	1945      	adds	r5, r0, r5
 8000e74:	45a9      	cmp	r9, r5
 8000e76:	d903      	bls.n	8000e80 <__aeabi_dmul+0x168>
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	025b      	lsls	r3, r3, #9
 8000e7c:	4699      	mov	r9, r3
 8000e7e:	44ca      	add	sl, r9
 8000e80:	043f      	lsls	r7, r7, #16
 8000e82:	0c28      	lsrs	r0, r5, #16
 8000e84:	0c3f      	lsrs	r7, r7, #16
 8000e86:	042d      	lsls	r5, r5, #16
 8000e88:	19ed      	adds	r5, r5, r7
 8000e8a:	0c27      	lsrs	r7, r4, #16
 8000e8c:	0424      	lsls	r4, r4, #16
 8000e8e:	0c24      	lsrs	r4, r4, #16
 8000e90:	0003      	movs	r3, r0
 8000e92:	0020      	movs	r0, r4
 8000e94:	4350      	muls	r0, r2
 8000e96:	437a      	muls	r2, r7
 8000e98:	4691      	mov	r9, r2
 8000e9a:	003a      	movs	r2, r7
 8000e9c:	4453      	add	r3, sl
 8000e9e:	9305      	str	r3, [sp, #20]
 8000ea0:	0c03      	lsrs	r3, r0, #16
 8000ea2:	469a      	mov	sl, r3
 8000ea4:	434a      	muls	r2, r1
 8000ea6:	4361      	muls	r1, r4
 8000ea8:	4449      	add	r1, r9
 8000eaa:	4451      	add	r1, sl
 8000eac:	44ab      	add	fp, r5
 8000eae:	4589      	cmp	r9, r1
 8000eb0:	d903      	bls.n	8000eba <__aeabi_dmul+0x1a2>
 8000eb2:	2380      	movs	r3, #128	; 0x80
 8000eb4:	025b      	lsls	r3, r3, #9
 8000eb6:	4699      	mov	r9, r3
 8000eb8:	444a      	add	r2, r9
 8000eba:	0400      	lsls	r0, r0, #16
 8000ebc:	0c0b      	lsrs	r3, r1, #16
 8000ebe:	0c00      	lsrs	r0, r0, #16
 8000ec0:	0409      	lsls	r1, r1, #16
 8000ec2:	1809      	adds	r1, r1, r0
 8000ec4:	0020      	movs	r0, r4
 8000ec6:	4699      	mov	r9, r3
 8000ec8:	4643      	mov	r3, r8
 8000eca:	4370      	muls	r0, r6
 8000ecc:	435c      	muls	r4, r3
 8000ece:	437e      	muls	r6, r7
 8000ed0:	435f      	muls	r7, r3
 8000ed2:	0c03      	lsrs	r3, r0, #16
 8000ed4:	4698      	mov	r8, r3
 8000ed6:	19a4      	adds	r4, r4, r6
 8000ed8:	4444      	add	r4, r8
 8000eda:	444a      	add	r2, r9
 8000edc:	9703      	str	r7, [sp, #12]
 8000ede:	42a6      	cmp	r6, r4
 8000ee0:	d904      	bls.n	8000eec <__aeabi_dmul+0x1d4>
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	025b      	lsls	r3, r3, #9
 8000ee6:	4698      	mov	r8, r3
 8000ee8:	4447      	add	r7, r8
 8000eea:	9703      	str	r7, [sp, #12]
 8000eec:	0423      	lsls	r3, r4, #16
 8000eee:	9e02      	ldr	r6, [sp, #8]
 8000ef0:	469a      	mov	sl, r3
 8000ef2:	9b05      	ldr	r3, [sp, #20]
 8000ef4:	445e      	add	r6, fp
 8000ef6:	4698      	mov	r8, r3
 8000ef8:	42ae      	cmp	r6, r5
 8000efa:	41ad      	sbcs	r5, r5
 8000efc:	1876      	adds	r6, r6, r1
 8000efe:	428e      	cmp	r6, r1
 8000f00:	4189      	sbcs	r1, r1
 8000f02:	0400      	lsls	r0, r0, #16
 8000f04:	0c00      	lsrs	r0, r0, #16
 8000f06:	4450      	add	r0, sl
 8000f08:	4440      	add	r0, r8
 8000f0a:	426d      	negs	r5, r5
 8000f0c:	1947      	adds	r7, r0, r5
 8000f0e:	46b8      	mov	r8, r7
 8000f10:	4693      	mov	fp, r2
 8000f12:	4249      	negs	r1, r1
 8000f14:	4689      	mov	r9, r1
 8000f16:	44c3      	add	fp, r8
 8000f18:	44d9      	add	r9, fp
 8000f1a:	4298      	cmp	r0, r3
 8000f1c:	4180      	sbcs	r0, r0
 8000f1e:	45a8      	cmp	r8, r5
 8000f20:	41ad      	sbcs	r5, r5
 8000f22:	4593      	cmp	fp, r2
 8000f24:	4192      	sbcs	r2, r2
 8000f26:	4589      	cmp	r9, r1
 8000f28:	4189      	sbcs	r1, r1
 8000f2a:	426d      	negs	r5, r5
 8000f2c:	4240      	negs	r0, r0
 8000f2e:	4328      	orrs	r0, r5
 8000f30:	0c24      	lsrs	r4, r4, #16
 8000f32:	4252      	negs	r2, r2
 8000f34:	4249      	negs	r1, r1
 8000f36:	430a      	orrs	r2, r1
 8000f38:	9b03      	ldr	r3, [sp, #12]
 8000f3a:	1900      	adds	r0, r0, r4
 8000f3c:	1880      	adds	r0, r0, r2
 8000f3e:	18c7      	adds	r7, r0, r3
 8000f40:	464b      	mov	r3, r9
 8000f42:	0ddc      	lsrs	r4, r3, #23
 8000f44:	9b04      	ldr	r3, [sp, #16]
 8000f46:	0275      	lsls	r5, r6, #9
 8000f48:	431d      	orrs	r5, r3
 8000f4a:	1e6a      	subs	r2, r5, #1
 8000f4c:	4195      	sbcs	r5, r2
 8000f4e:	464b      	mov	r3, r9
 8000f50:	0df6      	lsrs	r6, r6, #23
 8000f52:	027f      	lsls	r7, r7, #9
 8000f54:	4335      	orrs	r5, r6
 8000f56:	025a      	lsls	r2, r3, #9
 8000f58:	433c      	orrs	r4, r7
 8000f5a:	4315      	orrs	r5, r2
 8000f5c:	01fb      	lsls	r3, r7, #7
 8000f5e:	d400      	bmi.n	8000f62 <__aeabi_dmul+0x24a>
 8000f60:	e11c      	b.n	800119c <__aeabi_dmul+0x484>
 8000f62:	2101      	movs	r1, #1
 8000f64:	086a      	lsrs	r2, r5, #1
 8000f66:	400d      	ands	r5, r1
 8000f68:	4315      	orrs	r5, r2
 8000f6a:	07e2      	lsls	r2, r4, #31
 8000f6c:	4315      	orrs	r5, r2
 8000f6e:	0864      	lsrs	r4, r4, #1
 8000f70:	494f      	ldr	r1, [pc, #316]	; (80010b0 <__aeabi_dmul+0x398>)
 8000f72:	4461      	add	r1, ip
 8000f74:	2900      	cmp	r1, #0
 8000f76:	dc00      	bgt.n	8000f7a <__aeabi_dmul+0x262>
 8000f78:	e0b0      	b.n	80010dc <__aeabi_dmul+0x3c4>
 8000f7a:	076b      	lsls	r3, r5, #29
 8000f7c:	d009      	beq.n	8000f92 <__aeabi_dmul+0x27a>
 8000f7e:	220f      	movs	r2, #15
 8000f80:	402a      	ands	r2, r5
 8000f82:	2a04      	cmp	r2, #4
 8000f84:	d005      	beq.n	8000f92 <__aeabi_dmul+0x27a>
 8000f86:	1d2a      	adds	r2, r5, #4
 8000f88:	42aa      	cmp	r2, r5
 8000f8a:	41ad      	sbcs	r5, r5
 8000f8c:	426d      	negs	r5, r5
 8000f8e:	1964      	adds	r4, r4, r5
 8000f90:	0015      	movs	r5, r2
 8000f92:	01e3      	lsls	r3, r4, #7
 8000f94:	d504      	bpl.n	8000fa0 <__aeabi_dmul+0x288>
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	4a46      	ldr	r2, [pc, #280]	; (80010b4 <__aeabi_dmul+0x39c>)
 8000f9a:	00c9      	lsls	r1, r1, #3
 8000f9c:	4014      	ands	r4, r2
 8000f9e:	4461      	add	r1, ip
 8000fa0:	4a45      	ldr	r2, [pc, #276]	; (80010b8 <__aeabi_dmul+0x3a0>)
 8000fa2:	4291      	cmp	r1, r2
 8000fa4:	dd00      	ble.n	8000fa8 <__aeabi_dmul+0x290>
 8000fa6:	e726      	b.n	8000df6 <__aeabi_dmul+0xde>
 8000fa8:	0762      	lsls	r2, r4, #29
 8000faa:	08ed      	lsrs	r5, r5, #3
 8000fac:	0264      	lsls	r4, r4, #9
 8000fae:	0549      	lsls	r1, r1, #21
 8000fb0:	4315      	orrs	r5, r2
 8000fb2:	0b24      	lsrs	r4, r4, #12
 8000fb4:	0d4a      	lsrs	r2, r1, #21
 8000fb6:	e710      	b.n	8000dda <__aeabi_dmul+0xc2>
 8000fb8:	4652      	mov	r2, sl
 8000fba:	4332      	orrs	r2, r6
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_dmul+0x2a8>
 8000fbe:	e07f      	b.n	80010c0 <__aeabi_dmul+0x3a8>
 8000fc0:	2e00      	cmp	r6, #0
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_dmul+0x2ae>
 8000fc4:	e0dc      	b.n	8001180 <__aeabi_dmul+0x468>
 8000fc6:	0030      	movs	r0, r6
 8000fc8:	f000 fd60 	bl	8001a8c <__clzsi2>
 8000fcc:	0002      	movs	r2, r0
 8000fce:	3a0b      	subs	r2, #11
 8000fd0:	231d      	movs	r3, #29
 8000fd2:	0001      	movs	r1, r0
 8000fd4:	1a9b      	subs	r3, r3, r2
 8000fd6:	4652      	mov	r2, sl
 8000fd8:	3908      	subs	r1, #8
 8000fda:	40da      	lsrs	r2, r3
 8000fdc:	408e      	lsls	r6, r1
 8000fde:	4316      	orrs	r6, r2
 8000fe0:	4652      	mov	r2, sl
 8000fe2:	408a      	lsls	r2, r1
 8000fe4:	9b00      	ldr	r3, [sp, #0]
 8000fe6:	4935      	ldr	r1, [pc, #212]	; (80010bc <__aeabi_dmul+0x3a4>)
 8000fe8:	1a18      	subs	r0, r3, r0
 8000fea:	0003      	movs	r3, r0
 8000fec:	468c      	mov	ip, r1
 8000fee:	4463      	add	r3, ip
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	e6d3      	b.n	8000d9e <__aeabi_dmul+0x86>
 8000ff6:	0025      	movs	r5, r4
 8000ff8:	4305      	orrs	r5, r0
 8000ffa:	d04a      	beq.n	8001092 <__aeabi_dmul+0x37a>
 8000ffc:	2c00      	cmp	r4, #0
 8000ffe:	d100      	bne.n	8001002 <__aeabi_dmul+0x2ea>
 8001000:	e0b0      	b.n	8001164 <__aeabi_dmul+0x44c>
 8001002:	0020      	movs	r0, r4
 8001004:	f000 fd42 	bl	8001a8c <__clzsi2>
 8001008:	0001      	movs	r1, r0
 800100a:	0002      	movs	r2, r0
 800100c:	390b      	subs	r1, #11
 800100e:	231d      	movs	r3, #29
 8001010:	0010      	movs	r0, r2
 8001012:	1a5b      	subs	r3, r3, r1
 8001014:	0031      	movs	r1, r6
 8001016:	0035      	movs	r5, r6
 8001018:	3808      	subs	r0, #8
 800101a:	4084      	lsls	r4, r0
 800101c:	40d9      	lsrs	r1, r3
 800101e:	4085      	lsls	r5, r0
 8001020:	430c      	orrs	r4, r1
 8001022:	4826      	ldr	r0, [pc, #152]	; (80010bc <__aeabi_dmul+0x3a4>)
 8001024:	1a83      	subs	r3, r0, r2
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2300      	movs	r3, #0
 800102a:	4699      	mov	r9, r3
 800102c:	469b      	mov	fp, r3
 800102e:	e697      	b.n	8000d60 <__aeabi_dmul+0x48>
 8001030:	0005      	movs	r5, r0
 8001032:	4325      	orrs	r5, r4
 8001034:	d126      	bne.n	8001084 <__aeabi_dmul+0x36c>
 8001036:	2208      	movs	r2, #8
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2302      	movs	r3, #2
 800103c:	2400      	movs	r4, #0
 800103e:	4691      	mov	r9, r2
 8001040:	469b      	mov	fp, r3
 8001042:	e68d      	b.n	8000d60 <__aeabi_dmul+0x48>
 8001044:	4652      	mov	r2, sl
 8001046:	9b00      	ldr	r3, [sp, #0]
 8001048:	4332      	orrs	r2, r6
 800104a:	d110      	bne.n	800106e <__aeabi_dmul+0x356>
 800104c:	4915      	ldr	r1, [pc, #84]	; (80010a4 <__aeabi_dmul+0x38c>)
 800104e:	2600      	movs	r6, #0
 8001050:	468c      	mov	ip, r1
 8001052:	4463      	add	r3, ip
 8001054:	4649      	mov	r1, r9
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2302      	movs	r3, #2
 800105a:	4319      	orrs	r1, r3
 800105c:	4689      	mov	r9, r1
 800105e:	2002      	movs	r0, #2
 8001060:	e69d      	b.n	8000d9e <__aeabi_dmul+0x86>
 8001062:	465b      	mov	r3, fp
 8001064:	9701      	str	r7, [sp, #4]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d000      	beq.n	800106c <__aeabi_dmul+0x354>
 800106a:	e6ad      	b.n	8000dc8 <__aeabi_dmul+0xb0>
 800106c:	e6c3      	b.n	8000df6 <__aeabi_dmul+0xde>
 800106e:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <__aeabi_dmul+0x38c>)
 8001070:	2003      	movs	r0, #3
 8001072:	4694      	mov	ip, r2
 8001074:	4463      	add	r3, ip
 8001076:	464a      	mov	r2, r9
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2303      	movs	r3, #3
 800107c:	431a      	orrs	r2, r3
 800107e:	4691      	mov	r9, r2
 8001080:	4652      	mov	r2, sl
 8001082:	e68c      	b.n	8000d9e <__aeabi_dmul+0x86>
 8001084:	220c      	movs	r2, #12
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2303      	movs	r3, #3
 800108a:	0005      	movs	r5, r0
 800108c:	4691      	mov	r9, r2
 800108e:	469b      	mov	fp, r3
 8001090:	e666      	b.n	8000d60 <__aeabi_dmul+0x48>
 8001092:	2304      	movs	r3, #4
 8001094:	4699      	mov	r9, r3
 8001096:	2300      	movs	r3, #0
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	3301      	adds	r3, #1
 800109c:	2400      	movs	r4, #0
 800109e:	469b      	mov	fp, r3
 80010a0:	e65e      	b.n	8000d60 <__aeabi_dmul+0x48>
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	000007ff 	.word	0x000007ff
 80010a8:	fffffc01 	.word	0xfffffc01
 80010ac:	0800723c 	.word	0x0800723c
 80010b0:	000003ff 	.word	0x000003ff
 80010b4:	feffffff 	.word	0xfeffffff
 80010b8:	000007fe 	.word	0x000007fe
 80010bc:	fffffc0d 	.word	0xfffffc0d
 80010c0:	4649      	mov	r1, r9
 80010c2:	2301      	movs	r3, #1
 80010c4:	4319      	orrs	r1, r3
 80010c6:	4689      	mov	r9, r1
 80010c8:	2600      	movs	r6, #0
 80010ca:	2001      	movs	r0, #1
 80010cc:	e667      	b.n	8000d9e <__aeabi_dmul+0x86>
 80010ce:	2300      	movs	r3, #0
 80010d0:	2480      	movs	r4, #128	; 0x80
 80010d2:	2500      	movs	r5, #0
 80010d4:	4a43      	ldr	r2, [pc, #268]	; (80011e4 <__aeabi_dmul+0x4cc>)
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	0324      	lsls	r4, r4, #12
 80010da:	e67e      	b.n	8000dda <__aeabi_dmul+0xc2>
 80010dc:	2001      	movs	r0, #1
 80010de:	1a40      	subs	r0, r0, r1
 80010e0:	2838      	cmp	r0, #56	; 0x38
 80010e2:	dd00      	ble.n	80010e6 <__aeabi_dmul+0x3ce>
 80010e4:	e676      	b.n	8000dd4 <__aeabi_dmul+0xbc>
 80010e6:	281f      	cmp	r0, #31
 80010e8:	dd5b      	ble.n	80011a2 <__aeabi_dmul+0x48a>
 80010ea:	221f      	movs	r2, #31
 80010ec:	0023      	movs	r3, r4
 80010ee:	4252      	negs	r2, r2
 80010f0:	1a51      	subs	r1, r2, r1
 80010f2:	40cb      	lsrs	r3, r1
 80010f4:	0019      	movs	r1, r3
 80010f6:	2820      	cmp	r0, #32
 80010f8:	d003      	beq.n	8001102 <__aeabi_dmul+0x3ea>
 80010fa:	4a3b      	ldr	r2, [pc, #236]	; (80011e8 <__aeabi_dmul+0x4d0>)
 80010fc:	4462      	add	r2, ip
 80010fe:	4094      	lsls	r4, r2
 8001100:	4325      	orrs	r5, r4
 8001102:	1e6a      	subs	r2, r5, #1
 8001104:	4195      	sbcs	r5, r2
 8001106:	002a      	movs	r2, r5
 8001108:	430a      	orrs	r2, r1
 800110a:	2107      	movs	r1, #7
 800110c:	000d      	movs	r5, r1
 800110e:	2400      	movs	r4, #0
 8001110:	4015      	ands	r5, r2
 8001112:	4211      	tst	r1, r2
 8001114:	d05b      	beq.n	80011ce <__aeabi_dmul+0x4b6>
 8001116:	210f      	movs	r1, #15
 8001118:	2400      	movs	r4, #0
 800111a:	4011      	ands	r1, r2
 800111c:	2904      	cmp	r1, #4
 800111e:	d053      	beq.n	80011c8 <__aeabi_dmul+0x4b0>
 8001120:	1d11      	adds	r1, r2, #4
 8001122:	4291      	cmp	r1, r2
 8001124:	4192      	sbcs	r2, r2
 8001126:	4252      	negs	r2, r2
 8001128:	18a4      	adds	r4, r4, r2
 800112a:	000a      	movs	r2, r1
 800112c:	0223      	lsls	r3, r4, #8
 800112e:	d54b      	bpl.n	80011c8 <__aeabi_dmul+0x4b0>
 8001130:	2201      	movs	r2, #1
 8001132:	2400      	movs	r4, #0
 8001134:	2500      	movs	r5, #0
 8001136:	e650      	b.n	8000dda <__aeabi_dmul+0xc2>
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	031b      	lsls	r3, r3, #12
 800113c:	421c      	tst	r4, r3
 800113e:	d009      	beq.n	8001154 <__aeabi_dmul+0x43c>
 8001140:	421e      	tst	r6, r3
 8001142:	d107      	bne.n	8001154 <__aeabi_dmul+0x43c>
 8001144:	4333      	orrs	r3, r6
 8001146:	031c      	lsls	r4, r3, #12
 8001148:	4643      	mov	r3, r8
 800114a:	0015      	movs	r5, r2
 800114c:	0b24      	lsrs	r4, r4, #12
 800114e:	4a25      	ldr	r2, [pc, #148]	; (80011e4 <__aeabi_dmul+0x4cc>)
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	e642      	b.n	8000dda <__aeabi_dmul+0xc2>
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	0312      	lsls	r2, r2, #12
 8001158:	4314      	orrs	r4, r2
 800115a:	0324      	lsls	r4, r4, #12
 800115c:	4a21      	ldr	r2, [pc, #132]	; (80011e4 <__aeabi_dmul+0x4cc>)
 800115e:	0b24      	lsrs	r4, r4, #12
 8001160:	9701      	str	r7, [sp, #4]
 8001162:	e63a      	b.n	8000dda <__aeabi_dmul+0xc2>
 8001164:	f000 fc92 	bl	8001a8c <__clzsi2>
 8001168:	0001      	movs	r1, r0
 800116a:	0002      	movs	r2, r0
 800116c:	3115      	adds	r1, #21
 800116e:	3220      	adds	r2, #32
 8001170:	291c      	cmp	r1, #28
 8001172:	dc00      	bgt.n	8001176 <__aeabi_dmul+0x45e>
 8001174:	e74b      	b.n	800100e <__aeabi_dmul+0x2f6>
 8001176:	0034      	movs	r4, r6
 8001178:	3808      	subs	r0, #8
 800117a:	2500      	movs	r5, #0
 800117c:	4084      	lsls	r4, r0
 800117e:	e750      	b.n	8001022 <__aeabi_dmul+0x30a>
 8001180:	f000 fc84 	bl	8001a8c <__clzsi2>
 8001184:	0003      	movs	r3, r0
 8001186:	001a      	movs	r2, r3
 8001188:	3215      	adds	r2, #21
 800118a:	3020      	adds	r0, #32
 800118c:	2a1c      	cmp	r2, #28
 800118e:	dc00      	bgt.n	8001192 <__aeabi_dmul+0x47a>
 8001190:	e71e      	b.n	8000fd0 <__aeabi_dmul+0x2b8>
 8001192:	4656      	mov	r6, sl
 8001194:	3b08      	subs	r3, #8
 8001196:	2200      	movs	r2, #0
 8001198:	409e      	lsls	r6, r3
 800119a:	e723      	b.n	8000fe4 <__aeabi_dmul+0x2cc>
 800119c:	9b00      	ldr	r3, [sp, #0]
 800119e:	469c      	mov	ip, r3
 80011a0:	e6e6      	b.n	8000f70 <__aeabi_dmul+0x258>
 80011a2:	4912      	ldr	r1, [pc, #72]	; (80011ec <__aeabi_dmul+0x4d4>)
 80011a4:	0022      	movs	r2, r4
 80011a6:	4461      	add	r1, ip
 80011a8:	002e      	movs	r6, r5
 80011aa:	408d      	lsls	r5, r1
 80011ac:	408a      	lsls	r2, r1
 80011ae:	40c6      	lsrs	r6, r0
 80011b0:	1e69      	subs	r1, r5, #1
 80011b2:	418d      	sbcs	r5, r1
 80011b4:	4332      	orrs	r2, r6
 80011b6:	432a      	orrs	r2, r5
 80011b8:	40c4      	lsrs	r4, r0
 80011ba:	0753      	lsls	r3, r2, #29
 80011bc:	d0b6      	beq.n	800112c <__aeabi_dmul+0x414>
 80011be:	210f      	movs	r1, #15
 80011c0:	4011      	ands	r1, r2
 80011c2:	2904      	cmp	r1, #4
 80011c4:	d1ac      	bne.n	8001120 <__aeabi_dmul+0x408>
 80011c6:	e7b1      	b.n	800112c <__aeabi_dmul+0x414>
 80011c8:	0765      	lsls	r5, r4, #29
 80011ca:	0264      	lsls	r4, r4, #9
 80011cc:	0b24      	lsrs	r4, r4, #12
 80011ce:	08d2      	lsrs	r2, r2, #3
 80011d0:	4315      	orrs	r5, r2
 80011d2:	2200      	movs	r2, #0
 80011d4:	e601      	b.n	8000dda <__aeabi_dmul+0xc2>
 80011d6:	2280      	movs	r2, #128	; 0x80
 80011d8:	0312      	lsls	r2, r2, #12
 80011da:	4314      	orrs	r4, r2
 80011dc:	0324      	lsls	r4, r4, #12
 80011de:	4a01      	ldr	r2, [pc, #4]	; (80011e4 <__aeabi_dmul+0x4cc>)
 80011e0:	0b24      	lsrs	r4, r4, #12
 80011e2:	e5fa      	b.n	8000dda <__aeabi_dmul+0xc2>
 80011e4:	000007ff 	.word	0x000007ff
 80011e8:	0000043e 	.word	0x0000043e
 80011ec:	0000041e 	.word	0x0000041e

080011f0 <__aeabi_dsub>:
 80011f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011f2:	4657      	mov	r7, sl
 80011f4:	464e      	mov	r6, r9
 80011f6:	4645      	mov	r5, r8
 80011f8:	46de      	mov	lr, fp
 80011fa:	b5e0      	push	{r5, r6, r7, lr}
 80011fc:	001e      	movs	r6, r3
 80011fe:	0017      	movs	r7, r2
 8001200:	004a      	lsls	r2, r1, #1
 8001202:	030b      	lsls	r3, r1, #12
 8001204:	0d52      	lsrs	r2, r2, #21
 8001206:	0a5b      	lsrs	r3, r3, #9
 8001208:	4690      	mov	r8, r2
 800120a:	0f42      	lsrs	r2, r0, #29
 800120c:	431a      	orrs	r2, r3
 800120e:	0fcd      	lsrs	r5, r1, #31
 8001210:	4ccd      	ldr	r4, [pc, #820]	; (8001548 <__aeabi_dsub+0x358>)
 8001212:	0331      	lsls	r1, r6, #12
 8001214:	00c3      	lsls	r3, r0, #3
 8001216:	4694      	mov	ip, r2
 8001218:	0070      	lsls	r0, r6, #1
 800121a:	0f7a      	lsrs	r2, r7, #29
 800121c:	0a49      	lsrs	r1, r1, #9
 800121e:	00ff      	lsls	r7, r7, #3
 8001220:	469a      	mov	sl, r3
 8001222:	46b9      	mov	r9, r7
 8001224:	0d40      	lsrs	r0, r0, #21
 8001226:	0ff6      	lsrs	r6, r6, #31
 8001228:	4311      	orrs	r1, r2
 800122a:	42a0      	cmp	r0, r4
 800122c:	d100      	bne.n	8001230 <__aeabi_dsub+0x40>
 800122e:	e0b1      	b.n	8001394 <__aeabi_dsub+0x1a4>
 8001230:	2201      	movs	r2, #1
 8001232:	4056      	eors	r6, r2
 8001234:	46b3      	mov	fp, r6
 8001236:	42b5      	cmp	r5, r6
 8001238:	d100      	bne.n	800123c <__aeabi_dsub+0x4c>
 800123a:	e088      	b.n	800134e <__aeabi_dsub+0x15e>
 800123c:	4642      	mov	r2, r8
 800123e:	1a12      	subs	r2, r2, r0
 8001240:	2a00      	cmp	r2, #0
 8001242:	dc00      	bgt.n	8001246 <__aeabi_dsub+0x56>
 8001244:	e0ae      	b.n	80013a4 <__aeabi_dsub+0x1b4>
 8001246:	2800      	cmp	r0, #0
 8001248:	d100      	bne.n	800124c <__aeabi_dsub+0x5c>
 800124a:	e0c1      	b.n	80013d0 <__aeabi_dsub+0x1e0>
 800124c:	48be      	ldr	r0, [pc, #760]	; (8001548 <__aeabi_dsub+0x358>)
 800124e:	4580      	cmp	r8, r0
 8001250:	d100      	bne.n	8001254 <__aeabi_dsub+0x64>
 8001252:	e151      	b.n	80014f8 <__aeabi_dsub+0x308>
 8001254:	2080      	movs	r0, #128	; 0x80
 8001256:	0400      	lsls	r0, r0, #16
 8001258:	4301      	orrs	r1, r0
 800125a:	2a38      	cmp	r2, #56	; 0x38
 800125c:	dd00      	ble.n	8001260 <__aeabi_dsub+0x70>
 800125e:	e17b      	b.n	8001558 <__aeabi_dsub+0x368>
 8001260:	2a1f      	cmp	r2, #31
 8001262:	dd00      	ble.n	8001266 <__aeabi_dsub+0x76>
 8001264:	e1ee      	b.n	8001644 <__aeabi_dsub+0x454>
 8001266:	2020      	movs	r0, #32
 8001268:	003e      	movs	r6, r7
 800126a:	1a80      	subs	r0, r0, r2
 800126c:	000c      	movs	r4, r1
 800126e:	40d6      	lsrs	r6, r2
 8001270:	40d1      	lsrs	r1, r2
 8001272:	4087      	lsls	r7, r0
 8001274:	4662      	mov	r2, ip
 8001276:	4084      	lsls	r4, r0
 8001278:	1a52      	subs	r2, r2, r1
 800127a:	1e78      	subs	r0, r7, #1
 800127c:	4187      	sbcs	r7, r0
 800127e:	4694      	mov	ip, r2
 8001280:	4334      	orrs	r4, r6
 8001282:	4327      	orrs	r7, r4
 8001284:	1bdc      	subs	r4, r3, r7
 8001286:	42a3      	cmp	r3, r4
 8001288:	419b      	sbcs	r3, r3
 800128a:	4662      	mov	r2, ip
 800128c:	425b      	negs	r3, r3
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	4699      	mov	r9, r3
 8001292:	464b      	mov	r3, r9
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	d400      	bmi.n	800129a <__aeabi_dsub+0xaa>
 8001298:	e118      	b.n	80014cc <__aeabi_dsub+0x2dc>
 800129a:	464b      	mov	r3, r9
 800129c:	0258      	lsls	r0, r3, #9
 800129e:	0a43      	lsrs	r3, r0, #9
 80012a0:	4699      	mov	r9, r3
 80012a2:	464b      	mov	r3, r9
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d100      	bne.n	80012aa <__aeabi_dsub+0xba>
 80012a8:	e137      	b.n	800151a <__aeabi_dsub+0x32a>
 80012aa:	4648      	mov	r0, r9
 80012ac:	f000 fbee 	bl	8001a8c <__clzsi2>
 80012b0:	0001      	movs	r1, r0
 80012b2:	3908      	subs	r1, #8
 80012b4:	2320      	movs	r3, #32
 80012b6:	0022      	movs	r2, r4
 80012b8:	4648      	mov	r0, r9
 80012ba:	1a5b      	subs	r3, r3, r1
 80012bc:	40da      	lsrs	r2, r3
 80012be:	4088      	lsls	r0, r1
 80012c0:	408c      	lsls	r4, r1
 80012c2:	4643      	mov	r3, r8
 80012c4:	4310      	orrs	r0, r2
 80012c6:	4588      	cmp	r8, r1
 80012c8:	dd00      	ble.n	80012cc <__aeabi_dsub+0xdc>
 80012ca:	e136      	b.n	800153a <__aeabi_dsub+0x34a>
 80012cc:	1ac9      	subs	r1, r1, r3
 80012ce:	1c4b      	adds	r3, r1, #1
 80012d0:	2b1f      	cmp	r3, #31
 80012d2:	dd00      	ble.n	80012d6 <__aeabi_dsub+0xe6>
 80012d4:	e0ea      	b.n	80014ac <__aeabi_dsub+0x2bc>
 80012d6:	2220      	movs	r2, #32
 80012d8:	0026      	movs	r6, r4
 80012da:	1ad2      	subs	r2, r2, r3
 80012dc:	0001      	movs	r1, r0
 80012de:	4094      	lsls	r4, r2
 80012e0:	40de      	lsrs	r6, r3
 80012e2:	40d8      	lsrs	r0, r3
 80012e4:	2300      	movs	r3, #0
 80012e6:	4091      	lsls	r1, r2
 80012e8:	1e62      	subs	r2, r4, #1
 80012ea:	4194      	sbcs	r4, r2
 80012ec:	4681      	mov	r9, r0
 80012ee:	4698      	mov	r8, r3
 80012f0:	4331      	orrs	r1, r6
 80012f2:	430c      	orrs	r4, r1
 80012f4:	0763      	lsls	r3, r4, #29
 80012f6:	d009      	beq.n	800130c <__aeabi_dsub+0x11c>
 80012f8:	230f      	movs	r3, #15
 80012fa:	4023      	ands	r3, r4
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	d005      	beq.n	800130c <__aeabi_dsub+0x11c>
 8001300:	1d23      	adds	r3, r4, #4
 8001302:	42a3      	cmp	r3, r4
 8001304:	41a4      	sbcs	r4, r4
 8001306:	4264      	negs	r4, r4
 8001308:	44a1      	add	r9, r4
 800130a:	001c      	movs	r4, r3
 800130c:	464b      	mov	r3, r9
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	d400      	bmi.n	8001314 <__aeabi_dsub+0x124>
 8001312:	e0de      	b.n	80014d2 <__aeabi_dsub+0x2e2>
 8001314:	4641      	mov	r1, r8
 8001316:	4b8c      	ldr	r3, [pc, #560]	; (8001548 <__aeabi_dsub+0x358>)
 8001318:	3101      	adds	r1, #1
 800131a:	4299      	cmp	r1, r3
 800131c:	d100      	bne.n	8001320 <__aeabi_dsub+0x130>
 800131e:	e0e7      	b.n	80014f0 <__aeabi_dsub+0x300>
 8001320:	464b      	mov	r3, r9
 8001322:	488a      	ldr	r0, [pc, #552]	; (800154c <__aeabi_dsub+0x35c>)
 8001324:	08e4      	lsrs	r4, r4, #3
 8001326:	4003      	ands	r3, r0
 8001328:	0018      	movs	r0, r3
 800132a:	0549      	lsls	r1, r1, #21
 800132c:	075b      	lsls	r3, r3, #29
 800132e:	0240      	lsls	r0, r0, #9
 8001330:	4323      	orrs	r3, r4
 8001332:	0d4a      	lsrs	r2, r1, #21
 8001334:	0b04      	lsrs	r4, r0, #12
 8001336:	0512      	lsls	r2, r2, #20
 8001338:	07ed      	lsls	r5, r5, #31
 800133a:	4322      	orrs	r2, r4
 800133c:	432a      	orrs	r2, r5
 800133e:	0018      	movs	r0, r3
 8001340:	0011      	movs	r1, r2
 8001342:	bcf0      	pop	{r4, r5, r6, r7}
 8001344:	46bb      	mov	fp, r7
 8001346:	46b2      	mov	sl, r6
 8001348:	46a9      	mov	r9, r5
 800134a:	46a0      	mov	r8, r4
 800134c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800134e:	4642      	mov	r2, r8
 8001350:	1a12      	subs	r2, r2, r0
 8001352:	2a00      	cmp	r2, #0
 8001354:	dd52      	ble.n	80013fc <__aeabi_dsub+0x20c>
 8001356:	2800      	cmp	r0, #0
 8001358:	d100      	bne.n	800135c <__aeabi_dsub+0x16c>
 800135a:	e09c      	b.n	8001496 <__aeabi_dsub+0x2a6>
 800135c:	45a0      	cmp	r8, r4
 800135e:	d100      	bne.n	8001362 <__aeabi_dsub+0x172>
 8001360:	e0ca      	b.n	80014f8 <__aeabi_dsub+0x308>
 8001362:	2080      	movs	r0, #128	; 0x80
 8001364:	0400      	lsls	r0, r0, #16
 8001366:	4301      	orrs	r1, r0
 8001368:	2a38      	cmp	r2, #56	; 0x38
 800136a:	dd00      	ble.n	800136e <__aeabi_dsub+0x17e>
 800136c:	e149      	b.n	8001602 <__aeabi_dsub+0x412>
 800136e:	2a1f      	cmp	r2, #31
 8001370:	dc00      	bgt.n	8001374 <__aeabi_dsub+0x184>
 8001372:	e197      	b.n	80016a4 <__aeabi_dsub+0x4b4>
 8001374:	0010      	movs	r0, r2
 8001376:	000e      	movs	r6, r1
 8001378:	3820      	subs	r0, #32
 800137a:	40c6      	lsrs	r6, r0
 800137c:	2a20      	cmp	r2, #32
 800137e:	d004      	beq.n	800138a <__aeabi_dsub+0x19a>
 8001380:	2040      	movs	r0, #64	; 0x40
 8001382:	1a82      	subs	r2, r0, r2
 8001384:	4091      	lsls	r1, r2
 8001386:	430f      	orrs	r7, r1
 8001388:	46b9      	mov	r9, r7
 800138a:	464c      	mov	r4, r9
 800138c:	1e62      	subs	r2, r4, #1
 800138e:	4194      	sbcs	r4, r2
 8001390:	4334      	orrs	r4, r6
 8001392:	e13a      	b.n	800160a <__aeabi_dsub+0x41a>
 8001394:	000a      	movs	r2, r1
 8001396:	433a      	orrs	r2, r7
 8001398:	d028      	beq.n	80013ec <__aeabi_dsub+0x1fc>
 800139a:	46b3      	mov	fp, r6
 800139c:	42b5      	cmp	r5, r6
 800139e:	d02b      	beq.n	80013f8 <__aeabi_dsub+0x208>
 80013a0:	4a6b      	ldr	r2, [pc, #428]	; (8001550 <__aeabi_dsub+0x360>)
 80013a2:	4442      	add	r2, r8
 80013a4:	2a00      	cmp	r2, #0
 80013a6:	d05d      	beq.n	8001464 <__aeabi_dsub+0x274>
 80013a8:	4642      	mov	r2, r8
 80013aa:	4644      	mov	r4, r8
 80013ac:	1a82      	subs	r2, r0, r2
 80013ae:	2c00      	cmp	r4, #0
 80013b0:	d000      	beq.n	80013b4 <__aeabi_dsub+0x1c4>
 80013b2:	e0f5      	b.n	80015a0 <__aeabi_dsub+0x3b0>
 80013b4:	4665      	mov	r5, ip
 80013b6:	431d      	orrs	r5, r3
 80013b8:	d100      	bne.n	80013bc <__aeabi_dsub+0x1cc>
 80013ba:	e19c      	b.n	80016f6 <__aeabi_dsub+0x506>
 80013bc:	1e55      	subs	r5, r2, #1
 80013be:	2a01      	cmp	r2, #1
 80013c0:	d100      	bne.n	80013c4 <__aeabi_dsub+0x1d4>
 80013c2:	e1fb      	b.n	80017bc <__aeabi_dsub+0x5cc>
 80013c4:	4c60      	ldr	r4, [pc, #384]	; (8001548 <__aeabi_dsub+0x358>)
 80013c6:	42a2      	cmp	r2, r4
 80013c8:	d100      	bne.n	80013cc <__aeabi_dsub+0x1dc>
 80013ca:	e1bd      	b.n	8001748 <__aeabi_dsub+0x558>
 80013cc:	002a      	movs	r2, r5
 80013ce:	e0f0      	b.n	80015b2 <__aeabi_dsub+0x3c2>
 80013d0:	0008      	movs	r0, r1
 80013d2:	4338      	orrs	r0, r7
 80013d4:	d100      	bne.n	80013d8 <__aeabi_dsub+0x1e8>
 80013d6:	e0c3      	b.n	8001560 <__aeabi_dsub+0x370>
 80013d8:	1e50      	subs	r0, r2, #1
 80013da:	2a01      	cmp	r2, #1
 80013dc:	d100      	bne.n	80013e0 <__aeabi_dsub+0x1f0>
 80013de:	e1a8      	b.n	8001732 <__aeabi_dsub+0x542>
 80013e0:	4c59      	ldr	r4, [pc, #356]	; (8001548 <__aeabi_dsub+0x358>)
 80013e2:	42a2      	cmp	r2, r4
 80013e4:	d100      	bne.n	80013e8 <__aeabi_dsub+0x1f8>
 80013e6:	e087      	b.n	80014f8 <__aeabi_dsub+0x308>
 80013e8:	0002      	movs	r2, r0
 80013ea:	e736      	b.n	800125a <__aeabi_dsub+0x6a>
 80013ec:	2201      	movs	r2, #1
 80013ee:	4056      	eors	r6, r2
 80013f0:	46b3      	mov	fp, r6
 80013f2:	42b5      	cmp	r5, r6
 80013f4:	d000      	beq.n	80013f8 <__aeabi_dsub+0x208>
 80013f6:	e721      	b.n	800123c <__aeabi_dsub+0x4c>
 80013f8:	4a55      	ldr	r2, [pc, #340]	; (8001550 <__aeabi_dsub+0x360>)
 80013fa:	4442      	add	r2, r8
 80013fc:	2a00      	cmp	r2, #0
 80013fe:	d100      	bne.n	8001402 <__aeabi_dsub+0x212>
 8001400:	e0b5      	b.n	800156e <__aeabi_dsub+0x37e>
 8001402:	4642      	mov	r2, r8
 8001404:	4644      	mov	r4, r8
 8001406:	1a82      	subs	r2, r0, r2
 8001408:	2c00      	cmp	r4, #0
 800140a:	d100      	bne.n	800140e <__aeabi_dsub+0x21e>
 800140c:	e138      	b.n	8001680 <__aeabi_dsub+0x490>
 800140e:	4e4e      	ldr	r6, [pc, #312]	; (8001548 <__aeabi_dsub+0x358>)
 8001410:	42b0      	cmp	r0, r6
 8001412:	d100      	bne.n	8001416 <__aeabi_dsub+0x226>
 8001414:	e1de      	b.n	80017d4 <__aeabi_dsub+0x5e4>
 8001416:	2680      	movs	r6, #128	; 0x80
 8001418:	4664      	mov	r4, ip
 800141a:	0436      	lsls	r6, r6, #16
 800141c:	4334      	orrs	r4, r6
 800141e:	46a4      	mov	ip, r4
 8001420:	2a38      	cmp	r2, #56	; 0x38
 8001422:	dd00      	ble.n	8001426 <__aeabi_dsub+0x236>
 8001424:	e196      	b.n	8001754 <__aeabi_dsub+0x564>
 8001426:	2a1f      	cmp	r2, #31
 8001428:	dd00      	ble.n	800142c <__aeabi_dsub+0x23c>
 800142a:	e224      	b.n	8001876 <__aeabi_dsub+0x686>
 800142c:	2620      	movs	r6, #32
 800142e:	1ab4      	subs	r4, r6, r2
 8001430:	46a2      	mov	sl, r4
 8001432:	4664      	mov	r4, ip
 8001434:	4656      	mov	r6, sl
 8001436:	40b4      	lsls	r4, r6
 8001438:	46a1      	mov	r9, r4
 800143a:	001c      	movs	r4, r3
 800143c:	464e      	mov	r6, r9
 800143e:	40d4      	lsrs	r4, r2
 8001440:	4326      	orrs	r6, r4
 8001442:	0034      	movs	r4, r6
 8001444:	4656      	mov	r6, sl
 8001446:	40b3      	lsls	r3, r6
 8001448:	1e5e      	subs	r6, r3, #1
 800144a:	41b3      	sbcs	r3, r6
 800144c:	431c      	orrs	r4, r3
 800144e:	4663      	mov	r3, ip
 8001450:	40d3      	lsrs	r3, r2
 8001452:	18c9      	adds	r1, r1, r3
 8001454:	19e4      	adds	r4, r4, r7
 8001456:	42bc      	cmp	r4, r7
 8001458:	41bf      	sbcs	r7, r7
 800145a:	427f      	negs	r7, r7
 800145c:	46b9      	mov	r9, r7
 800145e:	4680      	mov	r8, r0
 8001460:	4489      	add	r9, r1
 8001462:	e0d8      	b.n	8001616 <__aeabi_dsub+0x426>
 8001464:	4640      	mov	r0, r8
 8001466:	4c3b      	ldr	r4, [pc, #236]	; (8001554 <__aeabi_dsub+0x364>)
 8001468:	3001      	adds	r0, #1
 800146a:	4220      	tst	r0, r4
 800146c:	d000      	beq.n	8001470 <__aeabi_dsub+0x280>
 800146e:	e0b4      	b.n	80015da <__aeabi_dsub+0x3ea>
 8001470:	4640      	mov	r0, r8
 8001472:	2800      	cmp	r0, #0
 8001474:	d000      	beq.n	8001478 <__aeabi_dsub+0x288>
 8001476:	e144      	b.n	8001702 <__aeabi_dsub+0x512>
 8001478:	4660      	mov	r0, ip
 800147a:	4318      	orrs	r0, r3
 800147c:	d100      	bne.n	8001480 <__aeabi_dsub+0x290>
 800147e:	e190      	b.n	80017a2 <__aeabi_dsub+0x5b2>
 8001480:	0008      	movs	r0, r1
 8001482:	4338      	orrs	r0, r7
 8001484:	d000      	beq.n	8001488 <__aeabi_dsub+0x298>
 8001486:	e1aa      	b.n	80017de <__aeabi_dsub+0x5ee>
 8001488:	4661      	mov	r1, ip
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	0749      	lsls	r1, r1, #29
 800148e:	430b      	orrs	r3, r1
 8001490:	4661      	mov	r1, ip
 8001492:	08cc      	lsrs	r4, r1, #3
 8001494:	e027      	b.n	80014e6 <__aeabi_dsub+0x2f6>
 8001496:	0008      	movs	r0, r1
 8001498:	4338      	orrs	r0, r7
 800149a:	d061      	beq.n	8001560 <__aeabi_dsub+0x370>
 800149c:	1e50      	subs	r0, r2, #1
 800149e:	2a01      	cmp	r2, #1
 80014a0:	d100      	bne.n	80014a4 <__aeabi_dsub+0x2b4>
 80014a2:	e139      	b.n	8001718 <__aeabi_dsub+0x528>
 80014a4:	42a2      	cmp	r2, r4
 80014a6:	d027      	beq.n	80014f8 <__aeabi_dsub+0x308>
 80014a8:	0002      	movs	r2, r0
 80014aa:	e75d      	b.n	8001368 <__aeabi_dsub+0x178>
 80014ac:	0002      	movs	r2, r0
 80014ae:	391f      	subs	r1, #31
 80014b0:	40ca      	lsrs	r2, r1
 80014b2:	0011      	movs	r1, r2
 80014b4:	2b20      	cmp	r3, #32
 80014b6:	d003      	beq.n	80014c0 <__aeabi_dsub+0x2d0>
 80014b8:	2240      	movs	r2, #64	; 0x40
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	4098      	lsls	r0, r3
 80014be:	4304      	orrs	r4, r0
 80014c0:	1e63      	subs	r3, r4, #1
 80014c2:	419c      	sbcs	r4, r3
 80014c4:	2300      	movs	r3, #0
 80014c6:	4699      	mov	r9, r3
 80014c8:	4698      	mov	r8, r3
 80014ca:	430c      	orrs	r4, r1
 80014cc:	0763      	lsls	r3, r4, #29
 80014ce:	d000      	beq.n	80014d2 <__aeabi_dsub+0x2e2>
 80014d0:	e712      	b.n	80012f8 <__aeabi_dsub+0x108>
 80014d2:	464b      	mov	r3, r9
 80014d4:	464a      	mov	r2, r9
 80014d6:	08e4      	lsrs	r4, r4, #3
 80014d8:	075b      	lsls	r3, r3, #29
 80014da:	4323      	orrs	r3, r4
 80014dc:	08d4      	lsrs	r4, r2, #3
 80014de:	4642      	mov	r2, r8
 80014e0:	4919      	ldr	r1, [pc, #100]	; (8001548 <__aeabi_dsub+0x358>)
 80014e2:	428a      	cmp	r2, r1
 80014e4:	d00e      	beq.n	8001504 <__aeabi_dsub+0x314>
 80014e6:	0324      	lsls	r4, r4, #12
 80014e8:	0552      	lsls	r2, r2, #21
 80014ea:	0b24      	lsrs	r4, r4, #12
 80014ec:	0d52      	lsrs	r2, r2, #21
 80014ee:	e722      	b.n	8001336 <__aeabi_dsub+0x146>
 80014f0:	000a      	movs	r2, r1
 80014f2:	2400      	movs	r4, #0
 80014f4:	2300      	movs	r3, #0
 80014f6:	e71e      	b.n	8001336 <__aeabi_dsub+0x146>
 80014f8:	08db      	lsrs	r3, r3, #3
 80014fa:	4662      	mov	r2, ip
 80014fc:	0752      	lsls	r2, r2, #29
 80014fe:	4313      	orrs	r3, r2
 8001500:	4662      	mov	r2, ip
 8001502:	08d4      	lsrs	r4, r2, #3
 8001504:	001a      	movs	r2, r3
 8001506:	4322      	orrs	r2, r4
 8001508:	d100      	bne.n	800150c <__aeabi_dsub+0x31c>
 800150a:	e1fc      	b.n	8001906 <__aeabi_dsub+0x716>
 800150c:	2280      	movs	r2, #128	; 0x80
 800150e:	0312      	lsls	r2, r2, #12
 8001510:	4314      	orrs	r4, r2
 8001512:	0324      	lsls	r4, r4, #12
 8001514:	4a0c      	ldr	r2, [pc, #48]	; (8001548 <__aeabi_dsub+0x358>)
 8001516:	0b24      	lsrs	r4, r4, #12
 8001518:	e70d      	b.n	8001336 <__aeabi_dsub+0x146>
 800151a:	0020      	movs	r0, r4
 800151c:	f000 fab6 	bl	8001a8c <__clzsi2>
 8001520:	0001      	movs	r1, r0
 8001522:	3118      	adds	r1, #24
 8001524:	291f      	cmp	r1, #31
 8001526:	dc00      	bgt.n	800152a <__aeabi_dsub+0x33a>
 8001528:	e6c4      	b.n	80012b4 <__aeabi_dsub+0xc4>
 800152a:	3808      	subs	r0, #8
 800152c:	4084      	lsls	r4, r0
 800152e:	4643      	mov	r3, r8
 8001530:	0020      	movs	r0, r4
 8001532:	2400      	movs	r4, #0
 8001534:	4588      	cmp	r8, r1
 8001536:	dc00      	bgt.n	800153a <__aeabi_dsub+0x34a>
 8001538:	e6c8      	b.n	80012cc <__aeabi_dsub+0xdc>
 800153a:	4a04      	ldr	r2, [pc, #16]	; (800154c <__aeabi_dsub+0x35c>)
 800153c:	1a5b      	subs	r3, r3, r1
 800153e:	4010      	ands	r0, r2
 8001540:	4698      	mov	r8, r3
 8001542:	4681      	mov	r9, r0
 8001544:	e6d6      	b.n	80012f4 <__aeabi_dsub+0x104>
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	000007ff 	.word	0x000007ff
 800154c:	ff7fffff 	.word	0xff7fffff
 8001550:	fffff801 	.word	0xfffff801
 8001554:	000007fe 	.word	0x000007fe
 8001558:	430f      	orrs	r7, r1
 800155a:	1e7a      	subs	r2, r7, #1
 800155c:	4197      	sbcs	r7, r2
 800155e:	e691      	b.n	8001284 <__aeabi_dsub+0x94>
 8001560:	4661      	mov	r1, ip
 8001562:	08db      	lsrs	r3, r3, #3
 8001564:	0749      	lsls	r1, r1, #29
 8001566:	430b      	orrs	r3, r1
 8001568:	4661      	mov	r1, ip
 800156a:	08cc      	lsrs	r4, r1, #3
 800156c:	e7b8      	b.n	80014e0 <__aeabi_dsub+0x2f0>
 800156e:	4640      	mov	r0, r8
 8001570:	4cd3      	ldr	r4, [pc, #844]	; (80018c0 <__aeabi_dsub+0x6d0>)
 8001572:	3001      	adds	r0, #1
 8001574:	4220      	tst	r0, r4
 8001576:	d000      	beq.n	800157a <__aeabi_dsub+0x38a>
 8001578:	e0a2      	b.n	80016c0 <__aeabi_dsub+0x4d0>
 800157a:	4640      	mov	r0, r8
 800157c:	2800      	cmp	r0, #0
 800157e:	d000      	beq.n	8001582 <__aeabi_dsub+0x392>
 8001580:	e101      	b.n	8001786 <__aeabi_dsub+0x596>
 8001582:	4660      	mov	r0, ip
 8001584:	4318      	orrs	r0, r3
 8001586:	d100      	bne.n	800158a <__aeabi_dsub+0x39a>
 8001588:	e15e      	b.n	8001848 <__aeabi_dsub+0x658>
 800158a:	0008      	movs	r0, r1
 800158c:	4338      	orrs	r0, r7
 800158e:	d000      	beq.n	8001592 <__aeabi_dsub+0x3a2>
 8001590:	e15f      	b.n	8001852 <__aeabi_dsub+0x662>
 8001592:	4661      	mov	r1, ip
 8001594:	08db      	lsrs	r3, r3, #3
 8001596:	0749      	lsls	r1, r1, #29
 8001598:	430b      	orrs	r3, r1
 800159a:	4661      	mov	r1, ip
 800159c:	08cc      	lsrs	r4, r1, #3
 800159e:	e7a2      	b.n	80014e6 <__aeabi_dsub+0x2f6>
 80015a0:	4dc8      	ldr	r5, [pc, #800]	; (80018c4 <__aeabi_dsub+0x6d4>)
 80015a2:	42a8      	cmp	r0, r5
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dsub+0x3b8>
 80015a6:	e0cf      	b.n	8001748 <__aeabi_dsub+0x558>
 80015a8:	2580      	movs	r5, #128	; 0x80
 80015aa:	4664      	mov	r4, ip
 80015ac:	042d      	lsls	r5, r5, #16
 80015ae:	432c      	orrs	r4, r5
 80015b0:	46a4      	mov	ip, r4
 80015b2:	2a38      	cmp	r2, #56	; 0x38
 80015b4:	dc56      	bgt.n	8001664 <__aeabi_dsub+0x474>
 80015b6:	2a1f      	cmp	r2, #31
 80015b8:	dd00      	ble.n	80015bc <__aeabi_dsub+0x3cc>
 80015ba:	e0d1      	b.n	8001760 <__aeabi_dsub+0x570>
 80015bc:	2520      	movs	r5, #32
 80015be:	001e      	movs	r6, r3
 80015c0:	1aad      	subs	r5, r5, r2
 80015c2:	4664      	mov	r4, ip
 80015c4:	40ab      	lsls	r3, r5
 80015c6:	40ac      	lsls	r4, r5
 80015c8:	40d6      	lsrs	r6, r2
 80015ca:	1e5d      	subs	r5, r3, #1
 80015cc:	41ab      	sbcs	r3, r5
 80015ce:	4334      	orrs	r4, r6
 80015d0:	4323      	orrs	r3, r4
 80015d2:	4664      	mov	r4, ip
 80015d4:	40d4      	lsrs	r4, r2
 80015d6:	1b09      	subs	r1, r1, r4
 80015d8:	e049      	b.n	800166e <__aeabi_dsub+0x47e>
 80015da:	4660      	mov	r0, ip
 80015dc:	1bdc      	subs	r4, r3, r7
 80015de:	1a46      	subs	r6, r0, r1
 80015e0:	42a3      	cmp	r3, r4
 80015e2:	4180      	sbcs	r0, r0
 80015e4:	4240      	negs	r0, r0
 80015e6:	4681      	mov	r9, r0
 80015e8:	0030      	movs	r0, r6
 80015ea:	464e      	mov	r6, r9
 80015ec:	1b80      	subs	r0, r0, r6
 80015ee:	4681      	mov	r9, r0
 80015f0:	0200      	lsls	r0, r0, #8
 80015f2:	d476      	bmi.n	80016e2 <__aeabi_dsub+0x4f2>
 80015f4:	464b      	mov	r3, r9
 80015f6:	4323      	orrs	r3, r4
 80015f8:	d000      	beq.n	80015fc <__aeabi_dsub+0x40c>
 80015fa:	e652      	b.n	80012a2 <__aeabi_dsub+0xb2>
 80015fc:	2400      	movs	r4, #0
 80015fe:	2500      	movs	r5, #0
 8001600:	e771      	b.n	80014e6 <__aeabi_dsub+0x2f6>
 8001602:	4339      	orrs	r1, r7
 8001604:	000c      	movs	r4, r1
 8001606:	1e62      	subs	r2, r4, #1
 8001608:	4194      	sbcs	r4, r2
 800160a:	18e4      	adds	r4, r4, r3
 800160c:	429c      	cmp	r4, r3
 800160e:	419b      	sbcs	r3, r3
 8001610:	425b      	negs	r3, r3
 8001612:	4463      	add	r3, ip
 8001614:	4699      	mov	r9, r3
 8001616:	464b      	mov	r3, r9
 8001618:	021b      	lsls	r3, r3, #8
 800161a:	d400      	bmi.n	800161e <__aeabi_dsub+0x42e>
 800161c:	e756      	b.n	80014cc <__aeabi_dsub+0x2dc>
 800161e:	2301      	movs	r3, #1
 8001620:	469c      	mov	ip, r3
 8001622:	4ba8      	ldr	r3, [pc, #672]	; (80018c4 <__aeabi_dsub+0x6d4>)
 8001624:	44e0      	add	r8, ip
 8001626:	4598      	cmp	r8, r3
 8001628:	d038      	beq.n	800169c <__aeabi_dsub+0x4ac>
 800162a:	464b      	mov	r3, r9
 800162c:	48a6      	ldr	r0, [pc, #664]	; (80018c8 <__aeabi_dsub+0x6d8>)
 800162e:	2201      	movs	r2, #1
 8001630:	4003      	ands	r3, r0
 8001632:	0018      	movs	r0, r3
 8001634:	0863      	lsrs	r3, r4, #1
 8001636:	4014      	ands	r4, r2
 8001638:	431c      	orrs	r4, r3
 800163a:	07c3      	lsls	r3, r0, #31
 800163c:	431c      	orrs	r4, r3
 800163e:	0843      	lsrs	r3, r0, #1
 8001640:	4699      	mov	r9, r3
 8001642:	e657      	b.n	80012f4 <__aeabi_dsub+0x104>
 8001644:	0010      	movs	r0, r2
 8001646:	000e      	movs	r6, r1
 8001648:	3820      	subs	r0, #32
 800164a:	40c6      	lsrs	r6, r0
 800164c:	2a20      	cmp	r2, #32
 800164e:	d004      	beq.n	800165a <__aeabi_dsub+0x46a>
 8001650:	2040      	movs	r0, #64	; 0x40
 8001652:	1a82      	subs	r2, r0, r2
 8001654:	4091      	lsls	r1, r2
 8001656:	430f      	orrs	r7, r1
 8001658:	46b9      	mov	r9, r7
 800165a:	464f      	mov	r7, r9
 800165c:	1e7a      	subs	r2, r7, #1
 800165e:	4197      	sbcs	r7, r2
 8001660:	4337      	orrs	r7, r6
 8001662:	e60f      	b.n	8001284 <__aeabi_dsub+0x94>
 8001664:	4662      	mov	r2, ip
 8001666:	431a      	orrs	r2, r3
 8001668:	0013      	movs	r3, r2
 800166a:	1e5a      	subs	r2, r3, #1
 800166c:	4193      	sbcs	r3, r2
 800166e:	1afc      	subs	r4, r7, r3
 8001670:	42a7      	cmp	r7, r4
 8001672:	41bf      	sbcs	r7, r7
 8001674:	427f      	negs	r7, r7
 8001676:	1bcb      	subs	r3, r1, r7
 8001678:	4699      	mov	r9, r3
 800167a:	465d      	mov	r5, fp
 800167c:	4680      	mov	r8, r0
 800167e:	e608      	b.n	8001292 <__aeabi_dsub+0xa2>
 8001680:	4666      	mov	r6, ip
 8001682:	431e      	orrs	r6, r3
 8001684:	d100      	bne.n	8001688 <__aeabi_dsub+0x498>
 8001686:	e0be      	b.n	8001806 <__aeabi_dsub+0x616>
 8001688:	1e56      	subs	r6, r2, #1
 800168a:	2a01      	cmp	r2, #1
 800168c:	d100      	bne.n	8001690 <__aeabi_dsub+0x4a0>
 800168e:	e109      	b.n	80018a4 <__aeabi_dsub+0x6b4>
 8001690:	4c8c      	ldr	r4, [pc, #560]	; (80018c4 <__aeabi_dsub+0x6d4>)
 8001692:	42a2      	cmp	r2, r4
 8001694:	d100      	bne.n	8001698 <__aeabi_dsub+0x4a8>
 8001696:	e119      	b.n	80018cc <__aeabi_dsub+0x6dc>
 8001698:	0032      	movs	r2, r6
 800169a:	e6c1      	b.n	8001420 <__aeabi_dsub+0x230>
 800169c:	4642      	mov	r2, r8
 800169e:	2400      	movs	r4, #0
 80016a0:	2300      	movs	r3, #0
 80016a2:	e648      	b.n	8001336 <__aeabi_dsub+0x146>
 80016a4:	2020      	movs	r0, #32
 80016a6:	000c      	movs	r4, r1
 80016a8:	1a80      	subs	r0, r0, r2
 80016aa:	003e      	movs	r6, r7
 80016ac:	4087      	lsls	r7, r0
 80016ae:	4084      	lsls	r4, r0
 80016b0:	40d6      	lsrs	r6, r2
 80016b2:	1e78      	subs	r0, r7, #1
 80016b4:	4187      	sbcs	r7, r0
 80016b6:	40d1      	lsrs	r1, r2
 80016b8:	4334      	orrs	r4, r6
 80016ba:	433c      	orrs	r4, r7
 80016bc:	448c      	add	ip, r1
 80016be:	e7a4      	b.n	800160a <__aeabi_dsub+0x41a>
 80016c0:	4a80      	ldr	r2, [pc, #512]	; (80018c4 <__aeabi_dsub+0x6d4>)
 80016c2:	4290      	cmp	r0, r2
 80016c4:	d100      	bne.n	80016c8 <__aeabi_dsub+0x4d8>
 80016c6:	e0e9      	b.n	800189c <__aeabi_dsub+0x6ac>
 80016c8:	19df      	adds	r7, r3, r7
 80016ca:	429f      	cmp	r7, r3
 80016cc:	419b      	sbcs	r3, r3
 80016ce:	4461      	add	r1, ip
 80016d0:	425b      	negs	r3, r3
 80016d2:	18c9      	adds	r1, r1, r3
 80016d4:	07cc      	lsls	r4, r1, #31
 80016d6:	087f      	lsrs	r7, r7, #1
 80016d8:	084b      	lsrs	r3, r1, #1
 80016da:	4699      	mov	r9, r3
 80016dc:	4680      	mov	r8, r0
 80016de:	433c      	orrs	r4, r7
 80016e0:	e6f4      	b.n	80014cc <__aeabi_dsub+0x2dc>
 80016e2:	1afc      	subs	r4, r7, r3
 80016e4:	42a7      	cmp	r7, r4
 80016e6:	41bf      	sbcs	r7, r7
 80016e8:	4663      	mov	r3, ip
 80016ea:	427f      	negs	r7, r7
 80016ec:	1ac9      	subs	r1, r1, r3
 80016ee:	1bcb      	subs	r3, r1, r7
 80016f0:	4699      	mov	r9, r3
 80016f2:	465d      	mov	r5, fp
 80016f4:	e5d5      	b.n	80012a2 <__aeabi_dsub+0xb2>
 80016f6:	08ff      	lsrs	r7, r7, #3
 80016f8:	074b      	lsls	r3, r1, #29
 80016fa:	465d      	mov	r5, fp
 80016fc:	433b      	orrs	r3, r7
 80016fe:	08cc      	lsrs	r4, r1, #3
 8001700:	e6ee      	b.n	80014e0 <__aeabi_dsub+0x2f0>
 8001702:	4662      	mov	r2, ip
 8001704:	431a      	orrs	r2, r3
 8001706:	d000      	beq.n	800170a <__aeabi_dsub+0x51a>
 8001708:	e082      	b.n	8001810 <__aeabi_dsub+0x620>
 800170a:	000b      	movs	r3, r1
 800170c:	433b      	orrs	r3, r7
 800170e:	d11b      	bne.n	8001748 <__aeabi_dsub+0x558>
 8001710:	2480      	movs	r4, #128	; 0x80
 8001712:	2500      	movs	r5, #0
 8001714:	0324      	lsls	r4, r4, #12
 8001716:	e6f9      	b.n	800150c <__aeabi_dsub+0x31c>
 8001718:	19dc      	adds	r4, r3, r7
 800171a:	429c      	cmp	r4, r3
 800171c:	419b      	sbcs	r3, r3
 800171e:	4461      	add	r1, ip
 8001720:	4689      	mov	r9, r1
 8001722:	425b      	negs	r3, r3
 8001724:	4499      	add	r9, r3
 8001726:	464b      	mov	r3, r9
 8001728:	021b      	lsls	r3, r3, #8
 800172a:	d444      	bmi.n	80017b6 <__aeabi_dsub+0x5c6>
 800172c:	2301      	movs	r3, #1
 800172e:	4698      	mov	r8, r3
 8001730:	e6cc      	b.n	80014cc <__aeabi_dsub+0x2dc>
 8001732:	1bdc      	subs	r4, r3, r7
 8001734:	4662      	mov	r2, ip
 8001736:	42a3      	cmp	r3, r4
 8001738:	419b      	sbcs	r3, r3
 800173a:	1a51      	subs	r1, r2, r1
 800173c:	425b      	negs	r3, r3
 800173e:	1acb      	subs	r3, r1, r3
 8001740:	4699      	mov	r9, r3
 8001742:	2301      	movs	r3, #1
 8001744:	4698      	mov	r8, r3
 8001746:	e5a4      	b.n	8001292 <__aeabi_dsub+0xa2>
 8001748:	08ff      	lsrs	r7, r7, #3
 800174a:	074b      	lsls	r3, r1, #29
 800174c:	465d      	mov	r5, fp
 800174e:	433b      	orrs	r3, r7
 8001750:	08cc      	lsrs	r4, r1, #3
 8001752:	e6d7      	b.n	8001504 <__aeabi_dsub+0x314>
 8001754:	4662      	mov	r2, ip
 8001756:	431a      	orrs	r2, r3
 8001758:	0014      	movs	r4, r2
 800175a:	1e63      	subs	r3, r4, #1
 800175c:	419c      	sbcs	r4, r3
 800175e:	e679      	b.n	8001454 <__aeabi_dsub+0x264>
 8001760:	0015      	movs	r5, r2
 8001762:	4664      	mov	r4, ip
 8001764:	3d20      	subs	r5, #32
 8001766:	40ec      	lsrs	r4, r5
 8001768:	46a0      	mov	r8, r4
 800176a:	2a20      	cmp	r2, #32
 800176c:	d005      	beq.n	800177a <__aeabi_dsub+0x58a>
 800176e:	2540      	movs	r5, #64	; 0x40
 8001770:	4664      	mov	r4, ip
 8001772:	1aaa      	subs	r2, r5, r2
 8001774:	4094      	lsls	r4, r2
 8001776:	4323      	orrs	r3, r4
 8001778:	469a      	mov	sl, r3
 800177a:	4654      	mov	r4, sl
 800177c:	1e63      	subs	r3, r4, #1
 800177e:	419c      	sbcs	r4, r3
 8001780:	4643      	mov	r3, r8
 8001782:	4323      	orrs	r3, r4
 8001784:	e773      	b.n	800166e <__aeabi_dsub+0x47e>
 8001786:	4662      	mov	r2, ip
 8001788:	431a      	orrs	r2, r3
 800178a:	d023      	beq.n	80017d4 <__aeabi_dsub+0x5e4>
 800178c:	000a      	movs	r2, r1
 800178e:	433a      	orrs	r2, r7
 8001790:	d000      	beq.n	8001794 <__aeabi_dsub+0x5a4>
 8001792:	e0a0      	b.n	80018d6 <__aeabi_dsub+0x6e6>
 8001794:	4662      	mov	r2, ip
 8001796:	08db      	lsrs	r3, r3, #3
 8001798:	0752      	lsls	r2, r2, #29
 800179a:	4313      	orrs	r3, r2
 800179c:	4662      	mov	r2, ip
 800179e:	08d4      	lsrs	r4, r2, #3
 80017a0:	e6b0      	b.n	8001504 <__aeabi_dsub+0x314>
 80017a2:	000b      	movs	r3, r1
 80017a4:	433b      	orrs	r3, r7
 80017a6:	d100      	bne.n	80017aa <__aeabi_dsub+0x5ba>
 80017a8:	e728      	b.n	80015fc <__aeabi_dsub+0x40c>
 80017aa:	08ff      	lsrs	r7, r7, #3
 80017ac:	074b      	lsls	r3, r1, #29
 80017ae:	465d      	mov	r5, fp
 80017b0:	433b      	orrs	r3, r7
 80017b2:	08cc      	lsrs	r4, r1, #3
 80017b4:	e697      	b.n	80014e6 <__aeabi_dsub+0x2f6>
 80017b6:	2302      	movs	r3, #2
 80017b8:	4698      	mov	r8, r3
 80017ba:	e736      	b.n	800162a <__aeabi_dsub+0x43a>
 80017bc:	1afc      	subs	r4, r7, r3
 80017be:	42a7      	cmp	r7, r4
 80017c0:	41bf      	sbcs	r7, r7
 80017c2:	4663      	mov	r3, ip
 80017c4:	427f      	negs	r7, r7
 80017c6:	1ac9      	subs	r1, r1, r3
 80017c8:	1bcb      	subs	r3, r1, r7
 80017ca:	4699      	mov	r9, r3
 80017cc:	2301      	movs	r3, #1
 80017ce:	465d      	mov	r5, fp
 80017d0:	4698      	mov	r8, r3
 80017d2:	e55e      	b.n	8001292 <__aeabi_dsub+0xa2>
 80017d4:	074b      	lsls	r3, r1, #29
 80017d6:	08ff      	lsrs	r7, r7, #3
 80017d8:	433b      	orrs	r3, r7
 80017da:	08cc      	lsrs	r4, r1, #3
 80017dc:	e692      	b.n	8001504 <__aeabi_dsub+0x314>
 80017de:	1bdc      	subs	r4, r3, r7
 80017e0:	4660      	mov	r0, ip
 80017e2:	42a3      	cmp	r3, r4
 80017e4:	41b6      	sbcs	r6, r6
 80017e6:	1a40      	subs	r0, r0, r1
 80017e8:	4276      	negs	r6, r6
 80017ea:	1b80      	subs	r0, r0, r6
 80017ec:	4681      	mov	r9, r0
 80017ee:	0200      	lsls	r0, r0, #8
 80017f0:	d560      	bpl.n	80018b4 <__aeabi_dsub+0x6c4>
 80017f2:	1afc      	subs	r4, r7, r3
 80017f4:	42a7      	cmp	r7, r4
 80017f6:	41bf      	sbcs	r7, r7
 80017f8:	4663      	mov	r3, ip
 80017fa:	427f      	negs	r7, r7
 80017fc:	1ac9      	subs	r1, r1, r3
 80017fe:	1bcb      	subs	r3, r1, r7
 8001800:	4699      	mov	r9, r3
 8001802:	465d      	mov	r5, fp
 8001804:	e576      	b.n	80012f4 <__aeabi_dsub+0x104>
 8001806:	08ff      	lsrs	r7, r7, #3
 8001808:	074b      	lsls	r3, r1, #29
 800180a:	433b      	orrs	r3, r7
 800180c:	08cc      	lsrs	r4, r1, #3
 800180e:	e667      	b.n	80014e0 <__aeabi_dsub+0x2f0>
 8001810:	000a      	movs	r2, r1
 8001812:	08db      	lsrs	r3, r3, #3
 8001814:	433a      	orrs	r2, r7
 8001816:	d100      	bne.n	800181a <__aeabi_dsub+0x62a>
 8001818:	e66f      	b.n	80014fa <__aeabi_dsub+0x30a>
 800181a:	4662      	mov	r2, ip
 800181c:	0752      	lsls	r2, r2, #29
 800181e:	4313      	orrs	r3, r2
 8001820:	4662      	mov	r2, ip
 8001822:	08d4      	lsrs	r4, r2, #3
 8001824:	2280      	movs	r2, #128	; 0x80
 8001826:	0312      	lsls	r2, r2, #12
 8001828:	4214      	tst	r4, r2
 800182a:	d007      	beq.n	800183c <__aeabi_dsub+0x64c>
 800182c:	08c8      	lsrs	r0, r1, #3
 800182e:	4210      	tst	r0, r2
 8001830:	d104      	bne.n	800183c <__aeabi_dsub+0x64c>
 8001832:	465d      	mov	r5, fp
 8001834:	0004      	movs	r4, r0
 8001836:	08fb      	lsrs	r3, r7, #3
 8001838:	0749      	lsls	r1, r1, #29
 800183a:	430b      	orrs	r3, r1
 800183c:	0f5a      	lsrs	r2, r3, #29
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	08db      	lsrs	r3, r3, #3
 8001842:	0752      	lsls	r2, r2, #29
 8001844:	4313      	orrs	r3, r2
 8001846:	e65d      	b.n	8001504 <__aeabi_dsub+0x314>
 8001848:	074b      	lsls	r3, r1, #29
 800184a:	08ff      	lsrs	r7, r7, #3
 800184c:	433b      	orrs	r3, r7
 800184e:	08cc      	lsrs	r4, r1, #3
 8001850:	e649      	b.n	80014e6 <__aeabi_dsub+0x2f6>
 8001852:	19dc      	adds	r4, r3, r7
 8001854:	429c      	cmp	r4, r3
 8001856:	419b      	sbcs	r3, r3
 8001858:	4461      	add	r1, ip
 800185a:	4689      	mov	r9, r1
 800185c:	425b      	negs	r3, r3
 800185e:	4499      	add	r9, r3
 8001860:	464b      	mov	r3, r9
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	d400      	bmi.n	8001868 <__aeabi_dsub+0x678>
 8001866:	e631      	b.n	80014cc <__aeabi_dsub+0x2dc>
 8001868:	464a      	mov	r2, r9
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <__aeabi_dsub+0x6d8>)
 800186c:	401a      	ands	r2, r3
 800186e:	2301      	movs	r3, #1
 8001870:	4691      	mov	r9, r2
 8001872:	4698      	mov	r8, r3
 8001874:	e62a      	b.n	80014cc <__aeabi_dsub+0x2dc>
 8001876:	0016      	movs	r6, r2
 8001878:	4664      	mov	r4, ip
 800187a:	3e20      	subs	r6, #32
 800187c:	40f4      	lsrs	r4, r6
 800187e:	46a0      	mov	r8, r4
 8001880:	2a20      	cmp	r2, #32
 8001882:	d005      	beq.n	8001890 <__aeabi_dsub+0x6a0>
 8001884:	2640      	movs	r6, #64	; 0x40
 8001886:	4664      	mov	r4, ip
 8001888:	1ab2      	subs	r2, r6, r2
 800188a:	4094      	lsls	r4, r2
 800188c:	4323      	orrs	r3, r4
 800188e:	469a      	mov	sl, r3
 8001890:	4654      	mov	r4, sl
 8001892:	1e63      	subs	r3, r4, #1
 8001894:	419c      	sbcs	r4, r3
 8001896:	4643      	mov	r3, r8
 8001898:	431c      	orrs	r4, r3
 800189a:	e5db      	b.n	8001454 <__aeabi_dsub+0x264>
 800189c:	0002      	movs	r2, r0
 800189e:	2400      	movs	r4, #0
 80018a0:	2300      	movs	r3, #0
 80018a2:	e548      	b.n	8001336 <__aeabi_dsub+0x146>
 80018a4:	19dc      	adds	r4, r3, r7
 80018a6:	42bc      	cmp	r4, r7
 80018a8:	41bf      	sbcs	r7, r7
 80018aa:	4461      	add	r1, ip
 80018ac:	4689      	mov	r9, r1
 80018ae:	427f      	negs	r7, r7
 80018b0:	44b9      	add	r9, r7
 80018b2:	e738      	b.n	8001726 <__aeabi_dsub+0x536>
 80018b4:	464b      	mov	r3, r9
 80018b6:	4323      	orrs	r3, r4
 80018b8:	d100      	bne.n	80018bc <__aeabi_dsub+0x6cc>
 80018ba:	e69f      	b.n	80015fc <__aeabi_dsub+0x40c>
 80018bc:	e606      	b.n	80014cc <__aeabi_dsub+0x2dc>
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	000007fe 	.word	0x000007fe
 80018c4:	000007ff 	.word	0x000007ff
 80018c8:	ff7fffff 	.word	0xff7fffff
 80018cc:	08ff      	lsrs	r7, r7, #3
 80018ce:	074b      	lsls	r3, r1, #29
 80018d0:	433b      	orrs	r3, r7
 80018d2:	08cc      	lsrs	r4, r1, #3
 80018d4:	e616      	b.n	8001504 <__aeabi_dsub+0x314>
 80018d6:	4662      	mov	r2, ip
 80018d8:	08db      	lsrs	r3, r3, #3
 80018da:	0752      	lsls	r2, r2, #29
 80018dc:	4313      	orrs	r3, r2
 80018de:	4662      	mov	r2, ip
 80018e0:	08d4      	lsrs	r4, r2, #3
 80018e2:	2280      	movs	r2, #128	; 0x80
 80018e4:	0312      	lsls	r2, r2, #12
 80018e6:	4214      	tst	r4, r2
 80018e8:	d007      	beq.n	80018fa <__aeabi_dsub+0x70a>
 80018ea:	08c8      	lsrs	r0, r1, #3
 80018ec:	4210      	tst	r0, r2
 80018ee:	d104      	bne.n	80018fa <__aeabi_dsub+0x70a>
 80018f0:	465d      	mov	r5, fp
 80018f2:	0004      	movs	r4, r0
 80018f4:	08fb      	lsrs	r3, r7, #3
 80018f6:	0749      	lsls	r1, r1, #29
 80018f8:	430b      	orrs	r3, r1
 80018fa:	0f5a      	lsrs	r2, r3, #29
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	0752      	lsls	r2, r2, #29
 8001900:	08db      	lsrs	r3, r3, #3
 8001902:	4313      	orrs	r3, r2
 8001904:	e5fe      	b.n	8001504 <__aeabi_dsub+0x314>
 8001906:	2300      	movs	r3, #0
 8001908:	4a01      	ldr	r2, [pc, #4]	; (8001910 <__aeabi_dsub+0x720>)
 800190a:	001c      	movs	r4, r3
 800190c:	e513      	b.n	8001336 <__aeabi_dsub+0x146>
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	000007ff 	.word	0x000007ff

08001914 <__aeabi_d2iz>:
 8001914:	000a      	movs	r2, r1
 8001916:	b530      	push	{r4, r5, lr}
 8001918:	4c13      	ldr	r4, [pc, #76]	; (8001968 <__aeabi_d2iz+0x54>)
 800191a:	0053      	lsls	r3, r2, #1
 800191c:	0309      	lsls	r1, r1, #12
 800191e:	0005      	movs	r5, r0
 8001920:	0b09      	lsrs	r1, r1, #12
 8001922:	2000      	movs	r0, #0
 8001924:	0d5b      	lsrs	r3, r3, #21
 8001926:	0fd2      	lsrs	r2, r2, #31
 8001928:	42a3      	cmp	r3, r4
 800192a:	dd04      	ble.n	8001936 <__aeabi_d2iz+0x22>
 800192c:	480f      	ldr	r0, [pc, #60]	; (800196c <__aeabi_d2iz+0x58>)
 800192e:	4283      	cmp	r3, r0
 8001930:	dd02      	ble.n	8001938 <__aeabi_d2iz+0x24>
 8001932:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <__aeabi_d2iz+0x5c>)
 8001934:	18d0      	adds	r0, r2, r3
 8001936:	bd30      	pop	{r4, r5, pc}
 8001938:	2080      	movs	r0, #128	; 0x80
 800193a:	0340      	lsls	r0, r0, #13
 800193c:	4301      	orrs	r1, r0
 800193e:	480d      	ldr	r0, [pc, #52]	; (8001974 <__aeabi_d2iz+0x60>)
 8001940:	1ac0      	subs	r0, r0, r3
 8001942:	281f      	cmp	r0, #31
 8001944:	dd08      	ble.n	8001958 <__aeabi_d2iz+0x44>
 8001946:	480c      	ldr	r0, [pc, #48]	; (8001978 <__aeabi_d2iz+0x64>)
 8001948:	1ac3      	subs	r3, r0, r3
 800194a:	40d9      	lsrs	r1, r3
 800194c:	000b      	movs	r3, r1
 800194e:	4258      	negs	r0, r3
 8001950:	2a00      	cmp	r2, #0
 8001952:	d1f0      	bne.n	8001936 <__aeabi_d2iz+0x22>
 8001954:	0018      	movs	r0, r3
 8001956:	e7ee      	b.n	8001936 <__aeabi_d2iz+0x22>
 8001958:	4c08      	ldr	r4, [pc, #32]	; (800197c <__aeabi_d2iz+0x68>)
 800195a:	40c5      	lsrs	r5, r0
 800195c:	46a4      	mov	ip, r4
 800195e:	4463      	add	r3, ip
 8001960:	4099      	lsls	r1, r3
 8001962:	000b      	movs	r3, r1
 8001964:	432b      	orrs	r3, r5
 8001966:	e7f2      	b.n	800194e <__aeabi_d2iz+0x3a>
 8001968:	000003fe 	.word	0x000003fe
 800196c:	0000041d 	.word	0x0000041d
 8001970:	7fffffff 	.word	0x7fffffff
 8001974:	00000433 	.word	0x00000433
 8001978:	00000413 	.word	0x00000413
 800197c:	fffffbed 	.word	0xfffffbed

08001980 <__aeabi_f2d>:
 8001980:	b570      	push	{r4, r5, r6, lr}
 8001982:	0043      	lsls	r3, r0, #1
 8001984:	0246      	lsls	r6, r0, #9
 8001986:	0fc4      	lsrs	r4, r0, #31
 8001988:	20fe      	movs	r0, #254	; 0xfe
 800198a:	0e1b      	lsrs	r3, r3, #24
 800198c:	1c59      	adds	r1, r3, #1
 800198e:	0a75      	lsrs	r5, r6, #9
 8001990:	4208      	tst	r0, r1
 8001992:	d00c      	beq.n	80019ae <__aeabi_f2d+0x2e>
 8001994:	22e0      	movs	r2, #224	; 0xe0
 8001996:	0092      	lsls	r2, r2, #2
 8001998:	4694      	mov	ip, r2
 800199a:	076d      	lsls	r5, r5, #29
 800199c:	0b36      	lsrs	r6, r6, #12
 800199e:	4463      	add	r3, ip
 80019a0:	051b      	lsls	r3, r3, #20
 80019a2:	4333      	orrs	r3, r6
 80019a4:	07e4      	lsls	r4, r4, #31
 80019a6:	4323      	orrs	r3, r4
 80019a8:	0028      	movs	r0, r5
 80019aa:	0019      	movs	r1, r3
 80019ac:	bd70      	pop	{r4, r5, r6, pc}
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d114      	bne.n	80019dc <__aeabi_f2d+0x5c>
 80019b2:	2d00      	cmp	r5, #0
 80019b4:	d01b      	beq.n	80019ee <__aeabi_f2d+0x6e>
 80019b6:	0028      	movs	r0, r5
 80019b8:	f000 f868 	bl	8001a8c <__clzsi2>
 80019bc:	280a      	cmp	r0, #10
 80019be:	dc1c      	bgt.n	80019fa <__aeabi_f2d+0x7a>
 80019c0:	230b      	movs	r3, #11
 80019c2:	002e      	movs	r6, r5
 80019c4:	1a1b      	subs	r3, r3, r0
 80019c6:	40de      	lsrs	r6, r3
 80019c8:	0003      	movs	r3, r0
 80019ca:	3315      	adds	r3, #21
 80019cc:	409d      	lsls	r5, r3
 80019ce:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <__aeabi_f2d+0x88>)
 80019d0:	0336      	lsls	r6, r6, #12
 80019d2:	1a12      	subs	r2, r2, r0
 80019d4:	0552      	lsls	r2, r2, #21
 80019d6:	0b36      	lsrs	r6, r6, #12
 80019d8:	0d53      	lsrs	r3, r2, #21
 80019da:	e7e1      	b.n	80019a0 <__aeabi_f2d+0x20>
 80019dc:	2d00      	cmp	r5, #0
 80019de:	d009      	beq.n	80019f4 <__aeabi_f2d+0x74>
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	0b36      	lsrs	r6, r6, #12
 80019e4:	0312      	lsls	r2, r2, #12
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <__aeabi_f2d+0x8c>)
 80019e8:	076d      	lsls	r5, r5, #29
 80019ea:	4316      	orrs	r6, r2
 80019ec:	e7d8      	b.n	80019a0 <__aeabi_f2d+0x20>
 80019ee:	2300      	movs	r3, #0
 80019f0:	2600      	movs	r6, #0
 80019f2:	e7d5      	b.n	80019a0 <__aeabi_f2d+0x20>
 80019f4:	2600      	movs	r6, #0
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <__aeabi_f2d+0x8c>)
 80019f8:	e7d2      	b.n	80019a0 <__aeabi_f2d+0x20>
 80019fa:	0003      	movs	r3, r0
 80019fc:	3b0b      	subs	r3, #11
 80019fe:	409d      	lsls	r5, r3
 8001a00:	002e      	movs	r6, r5
 8001a02:	2500      	movs	r5, #0
 8001a04:	e7e3      	b.n	80019ce <__aeabi_f2d+0x4e>
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	00000389 	.word	0x00000389
 8001a0c:	000007ff 	.word	0x000007ff

08001a10 <__aeabi_cdrcmple>:
 8001a10:	4684      	mov	ip, r0
 8001a12:	0010      	movs	r0, r2
 8001a14:	4662      	mov	r2, ip
 8001a16:	468c      	mov	ip, r1
 8001a18:	0019      	movs	r1, r3
 8001a1a:	4663      	mov	r3, ip
 8001a1c:	e000      	b.n	8001a20 <__aeabi_cdcmpeq>
 8001a1e:	46c0      	nop			; (mov r8, r8)

08001a20 <__aeabi_cdcmpeq>:
 8001a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001a22:	f000 f905 	bl	8001c30 <__ledf2>
 8001a26:	2800      	cmp	r0, #0
 8001a28:	d401      	bmi.n	8001a2e <__aeabi_cdcmpeq+0xe>
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	42c8      	cmn	r0, r1
 8001a2e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001a30 <__aeabi_dcmpeq>:
 8001a30:	b510      	push	{r4, lr}
 8001a32:	f000 f855 	bl	8001ae0 <__eqdf2>
 8001a36:	4240      	negs	r0, r0
 8001a38:	3001      	adds	r0, #1
 8001a3a:	bd10      	pop	{r4, pc}

08001a3c <__aeabi_dcmplt>:
 8001a3c:	b510      	push	{r4, lr}
 8001a3e:	f000 f8f7 	bl	8001c30 <__ledf2>
 8001a42:	2800      	cmp	r0, #0
 8001a44:	db01      	blt.n	8001a4a <__aeabi_dcmplt+0xe>
 8001a46:	2000      	movs	r0, #0
 8001a48:	bd10      	pop	{r4, pc}
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	bd10      	pop	{r4, pc}
 8001a4e:	46c0      	nop			; (mov r8, r8)

08001a50 <__aeabi_dcmple>:
 8001a50:	b510      	push	{r4, lr}
 8001a52:	f000 f8ed 	bl	8001c30 <__ledf2>
 8001a56:	2800      	cmp	r0, #0
 8001a58:	dd01      	ble.n	8001a5e <__aeabi_dcmple+0xe>
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	bd10      	pop	{r4, pc}
 8001a5e:	2001      	movs	r0, #1
 8001a60:	bd10      	pop	{r4, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)

08001a64 <__aeabi_dcmpgt>:
 8001a64:	b510      	push	{r4, lr}
 8001a66:	f000 f87d 	bl	8001b64 <__gedf2>
 8001a6a:	2800      	cmp	r0, #0
 8001a6c:	dc01      	bgt.n	8001a72 <__aeabi_dcmpgt+0xe>
 8001a6e:	2000      	movs	r0, #0
 8001a70:	bd10      	pop	{r4, pc}
 8001a72:	2001      	movs	r0, #1
 8001a74:	bd10      	pop	{r4, pc}
 8001a76:	46c0      	nop			; (mov r8, r8)

08001a78 <__aeabi_dcmpge>:
 8001a78:	b510      	push	{r4, lr}
 8001a7a:	f000 f873 	bl	8001b64 <__gedf2>
 8001a7e:	2800      	cmp	r0, #0
 8001a80:	da01      	bge.n	8001a86 <__aeabi_dcmpge+0xe>
 8001a82:	2000      	movs	r0, #0
 8001a84:	bd10      	pop	{r4, pc}
 8001a86:	2001      	movs	r0, #1
 8001a88:	bd10      	pop	{r4, pc}
 8001a8a:	46c0      	nop			; (mov r8, r8)

08001a8c <__clzsi2>:
 8001a8c:	211c      	movs	r1, #28
 8001a8e:	2301      	movs	r3, #1
 8001a90:	041b      	lsls	r3, r3, #16
 8001a92:	4298      	cmp	r0, r3
 8001a94:	d301      	bcc.n	8001a9a <__clzsi2+0xe>
 8001a96:	0c00      	lsrs	r0, r0, #16
 8001a98:	3910      	subs	r1, #16
 8001a9a:	0a1b      	lsrs	r3, r3, #8
 8001a9c:	4298      	cmp	r0, r3
 8001a9e:	d301      	bcc.n	8001aa4 <__clzsi2+0x18>
 8001aa0:	0a00      	lsrs	r0, r0, #8
 8001aa2:	3908      	subs	r1, #8
 8001aa4:	091b      	lsrs	r3, r3, #4
 8001aa6:	4298      	cmp	r0, r3
 8001aa8:	d301      	bcc.n	8001aae <__clzsi2+0x22>
 8001aaa:	0900      	lsrs	r0, r0, #4
 8001aac:	3904      	subs	r1, #4
 8001aae:	a202      	add	r2, pc, #8	; (adr r2, 8001ab8 <__clzsi2+0x2c>)
 8001ab0:	5c10      	ldrb	r0, [r2, r0]
 8001ab2:	1840      	adds	r0, r0, r1
 8001ab4:	4770      	bx	lr
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	02020304 	.word	0x02020304
 8001abc:	01010101 	.word	0x01010101
	...

08001ac8 <__clzdi2>:
 8001ac8:	b510      	push	{r4, lr}
 8001aca:	2900      	cmp	r1, #0
 8001acc:	d103      	bne.n	8001ad6 <__clzdi2+0xe>
 8001ace:	f7ff ffdd 	bl	8001a8c <__clzsi2>
 8001ad2:	3020      	adds	r0, #32
 8001ad4:	e002      	b.n	8001adc <__clzdi2+0x14>
 8001ad6:	0008      	movs	r0, r1
 8001ad8:	f7ff ffd8 	bl	8001a8c <__clzsi2>
 8001adc:	bd10      	pop	{r4, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)

08001ae0 <__eqdf2>:
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	464e      	mov	r6, r9
 8001ae4:	4645      	mov	r5, r8
 8001ae6:	46de      	mov	lr, fp
 8001ae8:	4657      	mov	r7, sl
 8001aea:	4690      	mov	r8, r2
 8001aec:	b5e0      	push	{r5, r6, r7, lr}
 8001aee:	0017      	movs	r7, r2
 8001af0:	031a      	lsls	r2, r3, #12
 8001af2:	0b12      	lsrs	r2, r2, #12
 8001af4:	0005      	movs	r5, r0
 8001af6:	4684      	mov	ip, r0
 8001af8:	4819      	ldr	r0, [pc, #100]	; (8001b60 <__eqdf2+0x80>)
 8001afa:	030e      	lsls	r6, r1, #12
 8001afc:	004c      	lsls	r4, r1, #1
 8001afe:	4691      	mov	r9, r2
 8001b00:	005a      	lsls	r2, r3, #1
 8001b02:	0fdb      	lsrs	r3, r3, #31
 8001b04:	469b      	mov	fp, r3
 8001b06:	0b36      	lsrs	r6, r6, #12
 8001b08:	0d64      	lsrs	r4, r4, #21
 8001b0a:	0fc9      	lsrs	r1, r1, #31
 8001b0c:	0d52      	lsrs	r2, r2, #21
 8001b0e:	4284      	cmp	r4, r0
 8001b10:	d019      	beq.n	8001b46 <__eqdf2+0x66>
 8001b12:	4282      	cmp	r2, r0
 8001b14:	d010      	beq.n	8001b38 <__eqdf2+0x58>
 8001b16:	2001      	movs	r0, #1
 8001b18:	4294      	cmp	r4, r2
 8001b1a:	d10e      	bne.n	8001b3a <__eqdf2+0x5a>
 8001b1c:	454e      	cmp	r6, r9
 8001b1e:	d10c      	bne.n	8001b3a <__eqdf2+0x5a>
 8001b20:	2001      	movs	r0, #1
 8001b22:	45c4      	cmp	ip, r8
 8001b24:	d109      	bne.n	8001b3a <__eqdf2+0x5a>
 8001b26:	4559      	cmp	r1, fp
 8001b28:	d017      	beq.n	8001b5a <__eqdf2+0x7a>
 8001b2a:	2c00      	cmp	r4, #0
 8001b2c:	d105      	bne.n	8001b3a <__eqdf2+0x5a>
 8001b2e:	0030      	movs	r0, r6
 8001b30:	4328      	orrs	r0, r5
 8001b32:	1e43      	subs	r3, r0, #1
 8001b34:	4198      	sbcs	r0, r3
 8001b36:	e000      	b.n	8001b3a <__eqdf2+0x5a>
 8001b38:	2001      	movs	r0, #1
 8001b3a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b3c:	46bb      	mov	fp, r7
 8001b3e:	46b2      	mov	sl, r6
 8001b40:	46a9      	mov	r9, r5
 8001b42:	46a0      	mov	r8, r4
 8001b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b46:	0033      	movs	r3, r6
 8001b48:	2001      	movs	r0, #1
 8001b4a:	432b      	orrs	r3, r5
 8001b4c:	d1f5      	bne.n	8001b3a <__eqdf2+0x5a>
 8001b4e:	42a2      	cmp	r2, r4
 8001b50:	d1f3      	bne.n	8001b3a <__eqdf2+0x5a>
 8001b52:	464b      	mov	r3, r9
 8001b54:	433b      	orrs	r3, r7
 8001b56:	d1f0      	bne.n	8001b3a <__eqdf2+0x5a>
 8001b58:	e7e2      	b.n	8001b20 <__eqdf2+0x40>
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	e7ed      	b.n	8001b3a <__eqdf2+0x5a>
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	000007ff 	.word	0x000007ff

08001b64 <__gedf2>:
 8001b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b66:	4647      	mov	r7, r8
 8001b68:	46ce      	mov	lr, r9
 8001b6a:	0004      	movs	r4, r0
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	0016      	movs	r6, r2
 8001b70:	031b      	lsls	r3, r3, #12
 8001b72:	0b1b      	lsrs	r3, r3, #12
 8001b74:	4d2d      	ldr	r5, [pc, #180]	; (8001c2c <__gedf2+0xc8>)
 8001b76:	004a      	lsls	r2, r1, #1
 8001b78:	4699      	mov	r9, r3
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	0043      	lsls	r3, r0, #1
 8001b7e:	030f      	lsls	r7, r1, #12
 8001b80:	46a4      	mov	ip, r4
 8001b82:	46b0      	mov	r8, r6
 8001b84:	0b3f      	lsrs	r7, r7, #12
 8001b86:	0d52      	lsrs	r2, r2, #21
 8001b88:	0fc9      	lsrs	r1, r1, #31
 8001b8a:	0d5b      	lsrs	r3, r3, #21
 8001b8c:	0fc0      	lsrs	r0, r0, #31
 8001b8e:	42aa      	cmp	r2, r5
 8001b90:	d021      	beq.n	8001bd6 <__gedf2+0x72>
 8001b92:	42ab      	cmp	r3, r5
 8001b94:	d013      	beq.n	8001bbe <__gedf2+0x5a>
 8001b96:	2a00      	cmp	r2, #0
 8001b98:	d122      	bne.n	8001be0 <__gedf2+0x7c>
 8001b9a:	433c      	orrs	r4, r7
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d102      	bne.n	8001ba6 <__gedf2+0x42>
 8001ba0:	464d      	mov	r5, r9
 8001ba2:	432e      	orrs	r6, r5
 8001ba4:	d022      	beq.n	8001bec <__gedf2+0x88>
 8001ba6:	2c00      	cmp	r4, #0
 8001ba8:	d010      	beq.n	8001bcc <__gedf2+0x68>
 8001baa:	4281      	cmp	r1, r0
 8001bac:	d022      	beq.n	8001bf4 <__gedf2+0x90>
 8001bae:	2002      	movs	r0, #2
 8001bb0:	3901      	subs	r1, #1
 8001bb2:	4008      	ands	r0, r1
 8001bb4:	3801      	subs	r0, #1
 8001bb6:	bcc0      	pop	{r6, r7}
 8001bb8:	46b9      	mov	r9, r7
 8001bba:	46b0      	mov	r8, r6
 8001bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bbe:	464d      	mov	r5, r9
 8001bc0:	432e      	orrs	r6, r5
 8001bc2:	d129      	bne.n	8001c18 <__gedf2+0xb4>
 8001bc4:	2a00      	cmp	r2, #0
 8001bc6:	d1f0      	bne.n	8001baa <__gedf2+0x46>
 8001bc8:	433c      	orrs	r4, r7
 8001bca:	d1ee      	bne.n	8001baa <__gedf2+0x46>
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	d1f2      	bne.n	8001bb6 <__gedf2+0x52>
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	4240      	negs	r0, r0
 8001bd4:	e7ef      	b.n	8001bb6 <__gedf2+0x52>
 8001bd6:	003d      	movs	r5, r7
 8001bd8:	4325      	orrs	r5, r4
 8001bda:	d11d      	bne.n	8001c18 <__gedf2+0xb4>
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d0ee      	beq.n	8001bbe <__gedf2+0x5a>
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1e2      	bne.n	8001baa <__gedf2+0x46>
 8001be4:	464c      	mov	r4, r9
 8001be6:	4326      	orrs	r6, r4
 8001be8:	d1df      	bne.n	8001baa <__gedf2+0x46>
 8001bea:	e7e0      	b.n	8001bae <__gedf2+0x4a>
 8001bec:	2000      	movs	r0, #0
 8001bee:	2c00      	cmp	r4, #0
 8001bf0:	d0e1      	beq.n	8001bb6 <__gedf2+0x52>
 8001bf2:	e7dc      	b.n	8001bae <__gedf2+0x4a>
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	dc0a      	bgt.n	8001c0e <__gedf2+0xaa>
 8001bf8:	dbe8      	blt.n	8001bcc <__gedf2+0x68>
 8001bfa:	454f      	cmp	r7, r9
 8001bfc:	d8d7      	bhi.n	8001bae <__gedf2+0x4a>
 8001bfe:	d00e      	beq.n	8001c1e <__gedf2+0xba>
 8001c00:	2000      	movs	r0, #0
 8001c02:	454f      	cmp	r7, r9
 8001c04:	d2d7      	bcs.n	8001bb6 <__gedf2+0x52>
 8001c06:	2900      	cmp	r1, #0
 8001c08:	d0e2      	beq.n	8001bd0 <__gedf2+0x6c>
 8001c0a:	0008      	movs	r0, r1
 8001c0c:	e7d3      	b.n	8001bb6 <__gedf2+0x52>
 8001c0e:	4243      	negs	r3, r0
 8001c10:	4158      	adcs	r0, r3
 8001c12:	0040      	lsls	r0, r0, #1
 8001c14:	3801      	subs	r0, #1
 8001c16:	e7ce      	b.n	8001bb6 <__gedf2+0x52>
 8001c18:	2002      	movs	r0, #2
 8001c1a:	4240      	negs	r0, r0
 8001c1c:	e7cb      	b.n	8001bb6 <__gedf2+0x52>
 8001c1e:	45c4      	cmp	ip, r8
 8001c20:	d8c5      	bhi.n	8001bae <__gedf2+0x4a>
 8001c22:	2000      	movs	r0, #0
 8001c24:	45c4      	cmp	ip, r8
 8001c26:	d2c6      	bcs.n	8001bb6 <__gedf2+0x52>
 8001c28:	e7ed      	b.n	8001c06 <__gedf2+0xa2>
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	000007ff 	.word	0x000007ff

08001c30 <__ledf2>:
 8001c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c32:	4647      	mov	r7, r8
 8001c34:	46ce      	mov	lr, r9
 8001c36:	0004      	movs	r4, r0
 8001c38:	0018      	movs	r0, r3
 8001c3a:	0016      	movs	r6, r2
 8001c3c:	031b      	lsls	r3, r3, #12
 8001c3e:	0b1b      	lsrs	r3, r3, #12
 8001c40:	4d2c      	ldr	r5, [pc, #176]	; (8001cf4 <__ledf2+0xc4>)
 8001c42:	004a      	lsls	r2, r1, #1
 8001c44:	4699      	mov	r9, r3
 8001c46:	b580      	push	{r7, lr}
 8001c48:	0043      	lsls	r3, r0, #1
 8001c4a:	030f      	lsls	r7, r1, #12
 8001c4c:	46a4      	mov	ip, r4
 8001c4e:	46b0      	mov	r8, r6
 8001c50:	0b3f      	lsrs	r7, r7, #12
 8001c52:	0d52      	lsrs	r2, r2, #21
 8001c54:	0fc9      	lsrs	r1, r1, #31
 8001c56:	0d5b      	lsrs	r3, r3, #21
 8001c58:	0fc0      	lsrs	r0, r0, #31
 8001c5a:	42aa      	cmp	r2, r5
 8001c5c:	d00d      	beq.n	8001c7a <__ledf2+0x4a>
 8001c5e:	42ab      	cmp	r3, r5
 8001c60:	d010      	beq.n	8001c84 <__ledf2+0x54>
 8001c62:	2a00      	cmp	r2, #0
 8001c64:	d127      	bne.n	8001cb6 <__ledf2+0x86>
 8001c66:	433c      	orrs	r4, r7
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d111      	bne.n	8001c90 <__ledf2+0x60>
 8001c6c:	464d      	mov	r5, r9
 8001c6e:	432e      	orrs	r6, r5
 8001c70:	d10e      	bne.n	8001c90 <__ledf2+0x60>
 8001c72:	2000      	movs	r0, #0
 8001c74:	2c00      	cmp	r4, #0
 8001c76:	d015      	beq.n	8001ca4 <__ledf2+0x74>
 8001c78:	e00e      	b.n	8001c98 <__ledf2+0x68>
 8001c7a:	003d      	movs	r5, r7
 8001c7c:	4325      	orrs	r5, r4
 8001c7e:	d110      	bne.n	8001ca2 <__ledf2+0x72>
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d118      	bne.n	8001cb6 <__ledf2+0x86>
 8001c84:	464d      	mov	r5, r9
 8001c86:	432e      	orrs	r6, r5
 8001c88:	d10b      	bne.n	8001ca2 <__ledf2+0x72>
 8001c8a:	2a00      	cmp	r2, #0
 8001c8c:	d102      	bne.n	8001c94 <__ledf2+0x64>
 8001c8e:	433c      	orrs	r4, r7
 8001c90:	2c00      	cmp	r4, #0
 8001c92:	d00b      	beq.n	8001cac <__ledf2+0x7c>
 8001c94:	4281      	cmp	r1, r0
 8001c96:	d014      	beq.n	8001cc2 <__ledf2+0x92>
 8001c98:	2002      	movs	r0, #2
 8001c9a:	3901      	subs	r1, #1
 8001c9c:	4008      	ands	r0, r1
 8001c9e:	3801      	subs	r0, #1
 8001ca0:	e000      	b.n	8001ca4 <__ledf2+0x74>
 8001ca2:	2002      	movs	r0, #2
 8001ca4:	bcc0      	pop	{r6, r7}
 8001ca6:	46b9      	mov	r9, r7
 8001ca8:	46b0      	mov	r8, r6
 8001caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cac:	2800      	cmp	r0, #0
 8001cae:	d1f9      	bne.n	8001ca4 <__ledf2+0x74>
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	4240      	negs	r0, r0
 8001cb4:	e7f6      	b.n	8001ca4 <__ledf2+0x74>
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1ec      	bne.n	8001c94 <__ledf2+0x64>
 8001cba:	464c      	mov	r4, r9
 8001cbc:	4326      	orrs	r6, r4
 8001cbe:	d1e9      	bne.n	8001c94 <__ledf2+0x64>
 8001cc0:	e7ea      	b.n	8001c98 <__ledf2+0x68>
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dd04      	ble.n	8001cd0 <__ledf2+0xa0>
 8001cc6:	4243      	negs	r3, r0
 8001cc8:	4158      	adcs	r0, r3
 8001cca:	0040      	lsls	r0, r0, #1
 8001ccc:	3801      	subs	r0, #1
 8001cce:	e7e9      	b.n	8001ca4 <__ledf2+0x74>
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	dbeb      	blt.n	8001cac <__ledf2+0x7c>
 8001cd4:	454f      	cmp	r7, r9
 8001cd6:	d8df      	bhi.n	8001c98 <__ledf2+0x68>
 8001cd8:	d006      	beq.n	8001ce8 <__ledf2+0xb8>
 8001cda:	2000      	movs	r0, #0
 8001cdc:	454f      	cmp	r7, r9
 8001cde:	d2e1      	bcs.n	8001ca4 <__ledf2+0x74>
 8001ce0:	2900      	cmp	r1, #0
 8001ce2:	d0e5      	beq.n	8001cb0 <__ledf2+0x80>
 8001ce4:	0008      	movs	r0, r1
 8001ce6:	e7dd      	b.n	8001ca4 <__ledf2+0x74>
 8001ce8:	45c4      	cmp	ip, r8
 8001cea:	d8d5      	bhi.n	8001c98 <__ledf2+0x68>
 8001cec:	2000      	movs	r0, #0
 8001cee:	45c4      	cmp	ip, r8
 8001cf0:	d2d8      	bcs.n	8001ca4 <__ledf2+0x74>
 8001cf2:	e7f5      	b.n	8001ce0 <__ledf2+0xb0>
 8001cf4:	000007ff 	.word	0x000007ff

08001cf8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b08b      	sub	sp, #44	; 0x2c
 8001cfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfe:	2414      	movs	r4, #20
 8001d00:	193b      	adds	r3, r7, r4
 8001d02:	0018      	movs	r0, r3
 8001d04:	2314      	movs	r3, #20
 8001d06:	001a      	movs	r2, r3
 8001d08:	2100      	movs	r1, #0
 8001d0a:	f005 fa83 	bl	8007214 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0e:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <MX_GPIO_Init+0xa0>)
 8001d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d12:	4b21      	ldr	r3, [pc, #132]	; (8001d98 <MX_GPIO_Init+0xa0>)
 8001d14:	2104      	movs	r1, #4
 8001d16:	430a      	orrs	r2, r1
 8001d18:	635a      	str	r2, [r3, #52]	; 0x34
 8001d1a:	4b1f      	ldr	r3, [pc, #124]	; (8001d98 <MX_GPIO_Init+0xa0>)
 8001d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1e:	2204      	movs	r2, #4
 8001d20:	4013      	ands	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d26:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <MX_GPIO_Init+0xa0>)
 8001d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <MX_GPIO_Init+0xa0>)
 8001d2c:	2120      	movs	r1, #32
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	635a      	str	r2, [r3, #52]	; 0x34
 8001d32:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <MX_GPIO_Init+0xa0>)
 8001d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d36:	2220      	movs	r2, #32
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <MX_GPIO_Init+0xa0>)
 8001d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <MX_GPIO_Init+0xa0>)
 8001d44:	2101      	movs	r1, #1
 8001d46:	430a      	orrs	r2, r1
 8001d48:	635a      	str	r2, [r3, #52]	; 0x34
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <MX_GPIO_Init+0xa0>)
 8001d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4013      	ands	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <MX_GPIO_Init+0xa0>)
 8001d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <MX_GPIO_Init+0xa0>)
 8001d5c:	2102      	movs	r1, #2
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	635a      	str	r2, [r3, #52]	; 0x34
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <MX_GPIO_Init+0xa0>)
 8001d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d66:	2202      	movs	r2, #2
 8001d68:	4013      	ands	r3, r2
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8001d6e:	193b      	adds	r3, r7, r4
 8001d70:	2204      	movs	r2, #4
 8001d72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d74:	193b      	adds	r3, r7, r4
 8001d76:	2288      	movs	r2, #136	; 0x88
 8001d78:	0352      	lsls	r2, r2, #13
 8001d7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	193b      	adds	r3, r7, r4
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8001d82:	193b      	adds	r3, r7, r4
 8001d84:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <MX_GPIO_Init+0xa4>)
 8001d86:	0019      	movs	r1, r3
 8001d88:	0010      	movs	r0, r2
 8001d8a:	f001 fa4d 	bl	8003228 <HAL_GPIO_Init>

}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b00b      	add	sp, #44	; 0x2c
 8001d94:	bd90      	pop	{r4, r7, pc}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	50001400 	.word	0x50001400

08001da0 <computeProportionForwardDrive>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t computeProportionForwardDrive(int8_t in){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	0002      	movs	r2, r0
 8001da8:	1dfb      	adds	r3, r7, #7
 8001daa:	701a      	strb	r2, [r3, #0]
	return (((float)in*(0.5)) + 150.0);
 8001dac:	1dfb      	adds	r3, r7, #7
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	b25b      	sxtb	r3, r3
 8001db2:	0018      	movs	r0, r3
 8001db4:	f7fe fc26 	bl	8000604 <__aeabi_i2f>
 8001db8:	1c03      	adds	r3, r0, #0
 8001dba:	1c18      	adds	r0, r3, #0
 8001dbc:	f7ff fde0 	bl	8001980 <__aeabi_f2d>
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <computeProportionForwardDrive+0x50>)
 8001dc4:	f7fe ffa8 	bl	8000d18 <__aeabi_dmul>
 8001dc8:	0002      	movs	r2, r0
 8001dca:	000b      	movs	r3, r1
 8001dcc:	0010      	movs	r0, r2
 8001dce:	0019      	movs	r1, r3
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <computeProportionForwardDrive+0x54>)
 8001dd4:	f7fe fc64 	bl	80006a0 <__aeabi_dadd>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	000b      	movs	r3, r1
 8001ddc:	0010      	movs	r0, r2
 8001dde:	0019      	movs	r1, r3
 8001de0:	f7fe fb26 	bl	8000430 <__aeabi_d2uiz>
 8001de4:	0003      	movs	r3, r0
 8001de6:	b2db      	uxtb	r3, r3
}
 8001de8:	0018      	movs	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b002      	add	sp, #8
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	3fe00000 	.word	0x3fe00000
 8001df4:	4062c000 	.word	0x4062c000

08001df8 <computeProportionBackwardDrive>:

uint8_t computeProportionBackwardDrive(int8_t in){
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	0002      	movs	r2, r0
 8001e00:	1dfb      	adds	r3, r7, #7
 8001e02:	701a      	strb	r2, [r3, #0]
	return (((float)in*(0.5)) + 150.0);
 8001e04:	1dfb      	adds	r3, r7, #7
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	b25b      	sxtb	r3, r3
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f7fe fbfa 	bl	8000604 <__aeabi_i2f>
 8001e10:	1c03      	adds	r3, r0, #0
 8001e12:	1c18      	adds	r0, r3, #0
 8001e14:	f7ff fdb4 	bl	8001980 <__aeabi_f2d>
 8001e18:	2200      	movs	r2, #0
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <computeProportionBackwardDrive+0x50>)
 8001e1c:	f7fe ff7c 	bl	8000d18 <__aeabi_dmul>
 8001e20:	0002      	movs	r2, r0
 8001e22:	000b      	movs	r3, r1
 8001e24:	0010      	movs	r0, r2
 8001e26:	0019      	movs	r1, r3
 8001e28:	2200      	movs	r2, #0
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <computeProportionBackwardDrive+0x54>)
 8001e2c:	f7fe fc38 	bl	80006a0 <__aeabi_dadd>
 8001e30:	0002      	movs	r2, r0
 8001e32:	000b      	movs	r3, r1
 8001e34:	0010      	movs	r0, r2
 8001e36:	0019      	movs	r1, r3
 8001e38:	f7fe fafa 	bl	8000430 <__aeabi_d2uiz>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	b2db      	uxtb	r3, r3
}
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b002      	add	sp, #8
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	3fe00000 	.word	0x3fe00000
 8001e4c:	4062c000 	.word	0x4062c000

08001e50 <computeLeftServo>:

uint8_t computeLeftServo(int8_t in){
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	0002      	movs	r2, r0
 8001e58:	1dfb      	adds	r3, r7, #7
 8001e5a:	701a      	strb	r2, [r3, #0]
	if(in == 0){
 8001e5c:	1dfb      	adds	r3, r7, #7
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	b25b      	sxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <computeLeftServo+0x1a>
		return 150;
 8001e66:	2396      	movs	r3, #150	; 0x96
 8001e68:	e01d      	b.n	8001ea6 <computeLeftServo+0x56>
	}
	return (((float)in*(-0.7)) + 150);
 8001e6a:	1dfb      	adds	r3, r7, #7
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	b25b      	sxtb	r3, r3
 8001e70:	0018      	movs	r0, r3
 8001e72:	f7fe fbc7 	bl	8000604 <__aeabi_i2f>
 8001e76:	1c03      	adds	r3, r0, #0
 8001e78:	1c18      	adds	r0, r3, #0
 8001e7a:	f7ff fd81 	bl	8001980 <__aeabi_f2d>
 8001e7e:	4a0c      	ldr	r2, [pc, #48]	; (8001eb0 <computeLeftServo+0x60>)
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <computeLeftServo+0x64>)
 8001e82:	f7fe ff49 	bl	8000d18 <__aeabi_dmul>
 8001e86:	0002      	movs	r2, r0
 8001e88:	000b      	movs	r3, r1
 8001e8a:	0010      	movs	r0, r2
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	2200      	movs	r2, #0
 8001e90:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <computeLeftServo+0x68>)
 8001e92:	f7fe fc05 	bl	80006a0 <__aeabi_dadd>
 8001e96:	0002      	movs	r2, r0
 8001e98:	000b      	movs	r3, r1
 8001e9a:	0010      	movs	r0, r2
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	f7fe fac7 	bl	8000430 <__aeabi_d2uiz>
 8001ea2:	0003      	movs	r3, r0
 8001ea4:	b2db      	uxtb	r3, r3
}
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b002      	add	sp, #8
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	66666666 	.word	0x66666666
 8001eb4:	bfe66666 	.word	0xbfe66666
 8001eb8:	4062c000 	.word	0x4062c000

08001ebc <computeRightServo>:

uint8_t computeRightServo(int8_t in){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	0002      	movs	r2, r0
 8001ec4:	1dfb      	adds	r3, r7, #7
 8001ec6:	701a      	strb	r2, [r3, #0]

	if(in == 0){
 8001ec8:	1dfb      	adds	r3, r7, #7
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	b25b      	sxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <computeRightServo+0x1a>
		return 150;
 8001ed2:	2396      	movs	r3, #150	; 0x96
 8001ed4:	e01d      	b.n	8001f12 <computeRightServo+0x56>
	}

	return (((float)in*(-0.65)) + 150);
 8001ed6:	1dfb      	adds	r3, r7, #7
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	b25b      	sxtb	r3, r3
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7fe fb91 	bl	8000604 <__aeabi_i2f>
 8001ee2:	1c03      	adds	r3, r0, #0
 8001ee4:	1c18      	adds	r0, r3, #0
 8001ee6:	f7ff fd4b 	bl	8001980 <__aeabi_f2d>
 8001eea:	4a0c      	ldr	r2, [pc, #48]	; (8001f1c <computeRightServo+0x60>)
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <computeRightServo+0x64>)
 8001eee:	f7fe ff13 	bl	8000d18 <__aeabi_dmul>
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	000b      	movs	r3, r1
 8001ef6:	0010      	movs	r0, r2
 8001ef8:	0019      	movs	r1, r3
 8001efa:	2200      	movs	r2, #0
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <computeRightServo+0x68>)
 8001efe:	f7fe fbcf 	bl	80006a0 <__aeabi_dadd>
 8001f02:	0002      	movs	r2, r0
 8001f04:	000b      	movs	r3, r1
 8001f06:	0010      	movs	r0, r2
 8001f08:	0019      	movs	r1, r3
 8001f0a:	f7fe fa91 	bl	8000430 <__aeabi_d2uiz>
 8001f0e:	0003      	movs	r3, r0
 8001f10:	b2db      	uxtb	r3, r3
}
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b002      	add	sp, #8
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	cccccccd 	.word	0xcccccccd
 8001f20:	bfe4cccc 	.word	0xbfe4cccc
 8001f24:	4062c000 	.word	0x4062c000

08001f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f2c:	f000 ff4c 	bl	8002dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f30:	f000 fa40 	bl	80023b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f34:	f7ff fee0 	bl	8001cf8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001f38:	f000 fb48 	bl	80025cc <MX_TIM1_Init>
  MX_TIM3_Init();
 8001f3c:	f000 fc56 	bl	80027ec <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001f40:	f000 fdec 	bl	8002b1c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001f44:	f000 fe38 	bl	8002bb8 <MX_USART2_UART_Init>



	 */

	HAL_UART_Receive_IT(&huart1, &RxBuff, 1);
 8001f48:	49ce      	ldr	r1, [pc, #824]	; (8002284 <main+0x35c>)
 8001f4a:	4bcf      	ldr	r3, [pc, #828]	; (8002288 <main+0x360>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f003 f9fa 	bl	8005348 <HAL_UART_Receive_IT>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // SERWO P1 | PA8
 8001f54:	4bcd      	ldr	r3, [pc, #820]	; (800228c <main+0x364>)
 8001f56:	2100      	movs	r1, #0
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f002 fa0b 	bl	8004374 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // SERWO L1 | PA9
 8001f5e:	4bcb      	ldr	r3, [pc, #812]	; (800228c <main+0x364>)
 8001f60:	2104      	movs	r1, #4
 8001f62:	0018      	movs	r0, r3
 8001f64:	f002 fa06 	bl	8004374 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // SERWO P2 | PA10
 8001f68:	4bc8      	ldr	r3, [pc, #800]	; (800228c <main+0x364>)
 8001f6a:	2108      	movs	r1, #8
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f002 fa01 	bl	8004374 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // SERWO L2 | PA11
 8001f72:	4bc6      	ldr	r3, [pc, #792]	; (800228c <main+0x364>)
 8001f74:	210c      	movs	r1, #12
 8001f76:	0018      	movs	r0, r3
 8001f78:	f002 f9fc 	bl	8004374 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // SERWO P3 | PB4
 8001f7c:	4bc4      	ldr	r3, [pc, #784]	; (8002290 <main+0x368>)
 8001f7e:	2100      	movs	r1, #0
 8001f80:	0018      	movs	r0, r3
 8001f82:	f002 f9f7 	bl	8004374 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // SERWO L3 | PA7
 8001f86:	4bc2      	ldr	r3, [pc, #776]	; (8002290 <main+0x368>)
 8001f88:	2104      	movs	r1, #4
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f002 f9f2 	bl	8004374 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // POLOLU | PB1
 8001f90:	4bbf      	ldr	r3, [pc, #764]	; (8002290 <main+0x368>)
 8001f92:	210c      	movs	r1, #12
 8001f94:	0018      	movs	r0, r3
 8001f96:	f002 f9ed 	bl	8004374 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // POLOLU | PB0
 8001f9a:	4bbd      	ldr	r3, [pc, #756]	; (8002290 <main+0x368>)
 8001f9c:	2108      	movs	r1, #8
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f002 f9e8 	bl	8004374 <HAL_TIM_PWM_Start>

	// Ustawienie serw oraz kol w poczatkowa pozycje
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 150);
 8001fa4:	4bb9      	ldr	r3, [pc, #740]	; (800228c <main+0x364>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2296      	movs	r2, #150	; 0x96
 8001faa:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 150);
 8001fac:	4bb7      	ldr	r3, [pc, #732]	; (800228c <main+0x364>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2296      	movs	r2, #150	; 0x96
 8001fb2:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 150);
 8001fb4:	4bb5      	ldr	r3, [pc, #724]	; (800228c <main+0x364>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2296      	movs	r2, #150	; 0x96
 8001fba:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 150);
 8001fbc:	4bb3      	ldr	r3, [pc, #716]	; (800228c <main+0x364>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2296      	movs	r2, #150	; 0x96
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 150);
 8001fc4:	4bb2      	ldr	r3, [pc, #712]	; (8002290 <main+0x368>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2296      	movs	r2, #150	; 0x96
 8001fca:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 150);
 8001fcc:	4bb0      	ldr	r3, [pc, #704]	; (8002290 <main+0x368>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2296      	movs	r2, #150	; 0x96
 8001fd2:	639a      	str	r2, [r3, #56]	; 0x38

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 150);
 8001fd4:	4bae      	ldr	r3, [pc, #696]	; (8002290 <main+0x368>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2296      	movs	r2, #150	; 0x96
 8001fda:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 150);
 8001fdc:	4bac      	ldr	r3, [pc, #688]	; (8002290 <main+0x368>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2296      	movs	r2, #150	; 0x96
 8001fe2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		if(finalframeready == 1){
 8001fe4:	4bab      	ldr	r3, [pc, #684]	; (8002294 <main+0x36c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d1fb      	bne.n	8001fe4 <main+0xbc>

			// ###### FRONT LEFT STEER ######
			if(FinalBuffer[1] > 0 && FinalBuffer[1] <= 100){ // RIGHT
 8001fec:	4baa      	ldr	r3, [pc, #680]	; (8002298 <main+0x370>)
 8001fee:	785b      	ldrb	r3, [r3, #1]
 8001ff0:	b25b      	sxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	dd14      	ble.n	8002020 <main+0xf8>
 8001ff6:	4ba8      	ldr	r3, [pc, #672]	; (8002298 <main+0x370>)
 8001ff8:	785b      	ldrb	r3, [r3, #1]
 8001ffa:	b25b      	sxtb	r3, r3
 8001ffc:	2b64      	cmp	r3, #100	; 0x64
 8001ffe:	dc0f      	bgt.n	8002020 <main+0xf8>
				Values[0] = computeRightServo(FinalBuffer[1]);
 8002000:	4ba5      	ldr	r3, [pc, #660]	; (8002298 <main+0x370>)
 8002002:	785b      	ldrb	r3, [r3, #1]
 8002004:	b25b      	sxtb	r3, r3
 8002006:	0018      	movs	r0, r3
 8002008:	f7ff ff58 	bl	8001ebc <computeRightServo>
 800200c:	0003      	movs	r3, r0
 800200e:	001a      	movs	r2, r3
 8002010:	4ba2      	ldr	r3, [pc, #648]	; (800229c <main+0x374>)
 8002012:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, Values[0]);
 8002014:	4ba1      	ldr	r3, [pc, #644]	; (800229c <main+0x374>)
 8002016:	781a      	ldrb	r2, [r3, #0]
 8002018:	4b9c      	ldr	r3, [pc, #624]	; (800228c <main+0x364>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	639a      	str	r2, [r3, #56]	; 0x38
 800201e:	e01d      	b.n	800205c <main+0x134>
			} else if(FinalBuffer[1] >= -100 && FinalBuffer[1] < 0){ // LEFT
 8002020:	4b9d      	ldr	r3, [pc, #628]	; (8002298 <main+0x370>)
 8002022:	785b      	ldrb	r3, [r3, #1]
 8002024:	b25b      	sxtb	r3, r3
 8002026:	3364      	adds	r3, #100	; 0x64
 8002028:	db14      	blt.n	8002054 <main+0x12c>
 800202a:	4b9b      	ldr	r3, [pc, #620]	; (8002298 <main+0x370>)
 800202c:	785b      	ldrb	r3, [r3, #1]
 800202e:	b25b      	sxtb	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	da0f      	bge.n	8002054 <main+0x12c>
				Values[0] = computeLeftServo(FinalBuffer[1]);
 8002034:	4b98      	ldr	r3, [pc, #608]	; (8002298 <main+0x370>)
 8002036:	785b      	ldrb	r3, [r3, #1]
 8002038:	b25b      	sxtb	r3, r3
 800203a:	0018      	movs	r0, r3
 800203c:	f7ff ff08 	bl	8001e50 <computeLeftServo>
 8002040:	0003      	movs	r3, r0
 8002042:	001a      	movs	r2, r3
 8002044:	4b95      	ldr	r3, [pc, #596]	; (800229c <main+0x374>)
 8002046:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, Values[0]);
 8002048:	4b94      	ldr	r3, [pc, #592]	; (800229c <main+0x374>)
 800204a:	781a      	ldrb	r2, [r3, #0]
 800204c:	4b8f      	ldr	r3, [pc, #572]	; (800228c <main+0x364>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	639a      	str	r2, [r3, #56]	; 0x38
 8002052:	e003      	b.n	800205c <main+0x134>
			} else { // NEUTRAL
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 150);
 8002054:	4b8d      	ldr	r3, [pc, #564]	; (800228c <main+0x364>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2296      	movs	r2, #150	; 0x96
 800205a:	639a      	str	r2, [r3, #56]	; 0x38
			}


			// ###### FRONT RIGHT STEER ######
			if(FinalBuffer[3] > 0 && FinalBuffer[3] <= 100){ // RIGHT
 800205c:	4b8e      	ldr	r3, [pc, #568]	; (8002298 <main+0x370>)
 800205e:	78db      	ldrb	r3, [r3, #3]
 8002060:	b25b      	sxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	dd14      	ble.n	8002090 <main+0x168>
 8002066:	4b8c      	ldr	r3, [pc, #560]	; (8002298 <main+0x370>)
 8002068:	78db      	ldrb	r3, [r3, #3]
 800206a:	b25b      	sxtb	r3, r3
 800206c:	2b64      	cmp	r3, #100	; 0x64
 800206e:	dc0f      	bgt.n	8002090 <main+0x168>
				Values[1] = computeRightServo(FinalBuffer[3]);
 8002070:	4b89      	ldr	r3, [pc, #548]	; (8002298 <main+0x370>)
 8002072:	78db      	ldrb	r3, [r3, #3]
 8002074:	b25b      	sxtb	r3, r3
 8002076:	0018      	movs	r0, r3
 8002078:	f7ff ff20 	bl	8001ebc <computeRightServo>
 800207c:	0003      	movs	r3, r0
 800207e:	001a      	movs	r2, r3
 8002080:	4b86      	ldr	r3, [pc, #536]	; (800229c <main+0x374>)
 8002082:	705a      	strb	r2, [r3, #1]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, Values[1]);
 8002084:	4b85      	ldr	r3, [pc, #532]	; (800229c <main+0x374>)
 8002086:	785a      	ldrb	r2, [r3, #1]
 8002088:	4b80      	ldr	r3, [pc, #512]	; (800228c <main+0x364>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	635a      	str	r2, [r3, #52]	; 0x34
 800208e:	e01d      	b.n	80020cc <main+0x1a4>
			} else if(FinalBuffer[3] >= -100 && FinalBuffer[3] < 0){ // LEFT
 8002090:	4b81      	ldr	r3, [pc, #516]	; (8002298 <main+0x370>)
 8002092:	78db      	ldrb	r3, [r3, #3]
 8002094:	b25b      	sxtb	r3, r3
 8002096:	3364      	adds	r3, #100	; 0x64
 8002098:	db14      	blt.n	80020c4 <main+0x19c>
 800209a:	4b7f      	ldr	r3, [pc, #508]	; (8002298 <main+0x370>)
 800209c:	78db      	ldrb	r3, [r3, #3]
 800209e:	b25b      	sxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	da0f      	bge.n	80020c4 <main+0x19c>
				Values[1] = computeLeftServo(FinalBuffer[3]);
 80020a4:	4b7c      	ldr	r3, [pc, #496]	; (8002298 <main+0x370>)
 80020a6:	78db      	ldrb	r3, [r3, #3]
 80020a8:	b25b      	sxtb	r3, r3
 80020aa:	0018      	movs	r0, r3
 80020ac:	f7ff fed0 	bl	8001e50 <computeLeftServo>
 80020b0:	0003      	movs	r3, r0
 80020b2:	001a      	movs	r2, r3
 80020b4:	4b79      	ldr	r3, [pc, #484]	; (800229c <main+0x374>)
 80020b6:	705a      	strb	r2, [r3, #1]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, Values[1]);
 80020b8:	4b78      	ldr	r3, [pc, #480]	; (800229c <main+0x374>)
 80020ba:	785a      	ldrb	r2, [r3, #1]
 80020bc:	4b73      	ldr	r3, [pc, #460]	; (800228c <main+0x364>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	635a      	str	r2, [r3, #52]	; 0x34
 80020c2:	e003      	b.n	80020cc <main+0x1a4>
			} else { // NEUTRAL
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 150);
 80020c4:	4b71      	ldr	r3, [pc, #452]	; (800228c <main+0x364>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2296      	movs	r2, #150	; 0x96
 80020ca:	635a      	str	r2, [r3, #52]	; 0x34
			}

			// ###### MID LEFT STEER ######
			if(FinalBuffer[5] > 0 && FinalBuffer[5] <= 100){ // RIGHT
 80020cc:	4b72      	ldr	r3, [pc, #456]	; (8002298 <main+0x370>)
 80020ce:	795b      	ldrb	r3, [r3, #5]
 80020d0:	b25b      	sxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	dd14      	ble.n	8002100 <main+0x1d8>
 80020d6:	4b70      	ldr	r3, [pc, #448]	; (8002298 <main+0x370>)
 80020d8:	795b      	ldrb	r3, [r3, #5]
 80020da:	b25b      	sxtb	r3, r3
 80020dc:	2b64      	cmp	r3, #100	; 0x64
 80020de:	dc0f      	bgt.n	8002100 <main+0x1d8>
				Values[2] = computeRightServo(FinalBuffer[5]);
 80020e0:	4b6d      	ldr	r3, [pc, #436]	; (8002298 <main+0x370>)
 80020e2:	795b      	ldrb	r3, [r3, #5]
 80020e4:	b25b      	sxtb	r3, r3
 80020e6:	0018      	movs	r0, r3
 80020e8:	f7ff fee8 	bl	8001ebc <computeRightServo>
 80020ec:	0003      	movs	r3, r0
 80020ee:	001a      	movs	r2, r3
 80020f0:	4b6a      	ldr	r3, [pc, #424]	; (800229c <main+0x374>)
 80020f2:	709a      	strb	r2, [r3, #2]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Values[2]);
 80020f4:	4b69      	ldr	r3, [pc, #420]	; (800229c <main+0x374>)
 80020f6:	789a      	ldrb	r2, [r3, #2]
 80020f8:	4b64      	ldr	r3, [pc, #400]	; (800228c <main+0x364>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	641a      	str	r2, [r3, #64]	; 0x40
 80020fe:	e01d      	b.n	800213c <main+0x214>
			} else if(FinalBuffer[5] >= -100 && FinalBuffer[5] < 0){ // LEFT
 8002100:	4b65      	ldr	r3, [pc, #404]	; (8002298 <main+0x370>)
 8002102:	795b      	ldrb	r3, [r3, #5]
 8002104:	b25b      	sxtb	r3, r3
 8002106:	3364      	adds	r3, #100	; 0x64
 8002108:	db14      	blt.n	8002134 <main+0x20c>
 800210a:	4b63      	ldr	r3, [pc, #396]	; (8002298 <main+0x370>)
 800210c:	795b      	ldrb	r3, [r3, #5]
 800210e:	b25b      	sxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	da0f      	bge.n	8002134 <main+0x20c>
				Values[2] = computeLeftServo(FinalBuffer[5]);
 8002114:	4b60      	ldr	r3, [pc, #384]	; (8002298 <main+0x370>)
 8002116:	795b      	ldrb	r3, [r3, #5]
 8002118:	b25b      	sxtb	r3, r3
 800211a:	0018      	movs	r0, r3
 800211c:	f7ff fe98 	bl	8001e50 <computeLeftServo>
 8002120:	0003      	movs	r3, r0
 8002122:	001a      	movs	r2, r3
 8002124:	4b5d      	ldr	r3, [pc, #372]	; (800229c <main+0x374>)
 8002126:	709a      	strb	r2, [r3, #2]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Values[2]);
 8002128:	4b5c      	ldr	r3, [pc, #368]	; (800229c <main+0x374>)
 800212a:	789a      	ldrb	r2, [r3, #2]
 800212c:	4b57      	ldr	r3, [pc, #348]	; (800228c <main+0x364>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	641a      	str	r2, [r3, #64]	; 0x40
 8002132:	e003      	b.n	800213c <main+0x214>
			} else { // NEUTRAL
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 150);
 8002134:	4b55      	ldr	r3, [pc, #340]	; (800228c <main+0x364>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2296      	movs	r2, #150	; 0x96
 800213a:	641a      	str	r2, [r3, #64]	; 0x40
			}

			// ###### MID RIGHT STEER ######
			if(FinalBuffer[7] > 0 && FinalBuffer[7] <= 100){ // RIGHT
 800213c:	4b56      	ldr	r3, [pc, #344]	; (8002298 <main+0x370>)
 800213e:	79db      	ldrb	r3, [r3, #7]
 8002140:	b25b      	sxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	dd14      	ble.n	8002170 <main+0x248>
 8002146:	4b54      	ldr	r3, [pc, #336]	; (8002298 <main+0x370>)
 8002148:	79db      	ldrb	r3, [r3, #7]
 800214a:	b25b      	sxtb	r3, r3
 800214c:	2b64      	cmp	r3, #100	; 0x64
 800214e:	dc0f      	bgt.n	8002170 <main+0x248>
				Values[3] = computeRightServo(FinalBuffer[7]);
 8002150:	4b51      	ldr	r3, [pc, #324]	; (8002298 <main+0x370>)
 8002152:	79db      	ldrb	r3, [r3, #7]
 8002154:	b25b      	sxtb	r3, r3
 8002156:	0018      	movs	r0, r3
 8002158:	f7ff feb0 	bl	8001ebc <computeRightServo>
 800215c:	0003      	movs	r3, r0
 800215e:	001a      	movs	r2, r3
 8002160:	4b4e      	ldr	r3, [pc, #312]	; (800229c <main+0x374>)
 8002162:	70da      	strb	r2, [r3, #3]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Values[3]);
 8002164:	4b4d      	ldr	r3, [pc, #308]	; (800229c <main+0x374>)
 8002166:	78da      	ldrb	r2, [r3, #3]
 8002168:	4b48      	ldr	r3, [pc, #288]	; (800228c <main+0x364>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	63da      	str	r2, [r3, #60]	; 0x3c
 800216e:	e01d      	b.n	80021ac <main+0x284>
			} else if(FinalBuffer[7] >= -100 && FinalBuffer[7] < 0){ // LEFT
 8002170:	4b49      	ldr	r3, [pc, #292]	; (8002298 <main+0x370>)
 8002172:	79db      	ldrb	r3, [r3, #7]
 8002174:	b25b      	sxtb	r3, r3
 8002176:	3364      	adds	r3, #100	; 0x64
 8002178:	db14      	blt.n	80021a4 <main+0x27c>
 800217a:	4b47      	ldr	r3, [pc, #284]	; (8002298 <main+0x370>)
 800217c:	79db      	ldrb	r3, [r3, #7]
 800217e:	b25b      	sxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	da0f      	bge.n	80021a4 <main+0x27c>
				Values[3] = computeLeftServo(FinalBuffer[7]);
 8002184:	4b44      	ldr	r3, [pc, #272]	; (8002298 <main+0x370>)
 8002186:	79db      	ldrb	r3, [r3, #7]
 8002188:	b25b      	sxtb	r3, r3
 800218a:	0018      	movs	r0, r3
 800218c:	f7ff fe60 	bl	8001e50 <computeLeftServo>
 8002190:	0003      	movs	r3, r0
 8002192:	001a      	movs	r2, r3
 8002194:	4b41      	ldr	r3, [pc, #260]	; (800229c <main+0x374>)
 8002196:	70da      	strb	r2, [r3, #3]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Values[3]);
 8002198:	4b40      	ldr	r3, [pc, #256]	; (800229c <main+0x374>)
 800219a:	78da      	ldrb	r2, [r3, #3]
 800219c:	4b3b      	ldr	r3, [pc, #236]	; (800228c <main+0x364>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80021a2:	e003      	b.n	80021ac <main+0x284>
			} else { // NEUTRAL
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 150);
 80021a4:	4b39      	ldr	r3, [pc, #228]	; (800228c <main+0x364>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2296      	movs	r2, #150	; 0x96
 80021aa:	63da      	str	r2, [r3, #60]	; 0x3c
			}

			// ###### REAR LEFT STEER ######
			if(FinalBuffer[9] > 0 && FinalBuffer[9] <= 100){ // RIGHT
 80021ac:	4b3a      	ldr	r3, [pc, #232]	; (8002298 <main+0x370>)
 80021ae:	7a5b      	ldrb	r3, [r3, #9]
 80021b0:	b25b      	sxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	dd14      	ble.n	80021e0 <main+0x2b8>
 80021b6:	4b38      	ldr	r3, [pc, #224]	; (8002298 <main+0x370>)
 80021b8:	7a5b      	ldrb	r3, [r3, #9]
 80021ba:	b25b      	sxtb	r3, r3
 80021bc:	2b64      	cmp	r3, #100	; 0x64
 80021be:	dc0f      	bgt.n	80021e0 <main+0x2b8>
				Values[4] = computeRightServo(FinalBuffer[9]);
 80021c0:	4b35      	ldr	r3, [pc, #212]	; (8002298 <main+0x370>)
 80021c2:	7a5b      	ldrb	r3, [r3, #9]
 80021c4:	b25b      	sxtb	r3, r3
 80021c6:	0018      	movs	r0, r3
 80021c8:	f7ff fe78 	bl	8001ebc <computeRightServo>
 80021cc:	0003      	movs	r3, r0
 80021ce:	001a      	movs	r2, r3
 80021d0:	4b32      	ldr	r3, [pc, #200]	; (800229c <main+0x374>)
 80021d2:	711a      	strb	r2, [r3, #4]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, Values[4]);
 80021d4:	4b31      	ldr	r3, [pc, #196]	; (800229c <main+0x374>)
 80021d6:	791a      	ldrb	r2, [r3, #4]
 80021d8:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <main+0x368>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	639a      	str	r2, [r3, #56]	; 0x38
 80021de:	e01d      	b.n	800221c <main+0x2f4>
			} else if(FinalBuffer[9] >= -100 && FinalBuffer[9] < 0){ // LEFT
 80021e0:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <main+0x370>)
 80021e2:	7a5b      	ldrb	r3, [r3, #9]
 80021e4:	b25b      	sxtb	r3, r3
 80021e6:	3364      	adds	r3, #100	; 0x64
 80021e8:	db14      	blt.n	8002214 <main+0x2ec>
 80021ea:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <main+0x370>)
 80021ec:	7a5b      	ldrb	r3, [r3, #9]
 80021ee:	b25b      	sxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	da0f      	bge.n	8002214 <main+0x2ec>
				Values[4] = computeLeftServo(FinalBuffer[9]);
 80021f4:	4b28      	ldr	r3, [pc, #160]	; (8002298 <main+0x370>)
 80021f6:	7a5b      	ldrb	r3, [r3, #9]
 80021f8:	b25b      	sxtb	r3, r3
 80021fa:	0018      	movs	r0, r3
 80021fc:	f7ff fe28 	bl	8001e50 <computeLeftServo>
 8002200:	0003      	movs	r3, r0
 8002202:	001a      	movs	r2, r3
 8002204:	4b25      	ldr	r3, [pc, #148]	; (800229c <main+0x374>)
 8002206:	711a      	strb	r2, [r3, #4]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, Values[4]);
 8002208:	4b24      	ldr	r3, [pc, #144]	; (800229c <main+0x374>)
 800220a:	791a      	ldrb	r2, [r3, #4]
 800220c:	4b20      	ldr	r3, [pc, #128]	; (8002290 <main+0x368>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	639a      	str	r2, [r3, #56]	; 0x38
 8002212:	e003      	b.n	800221c <main+0x2f4>
			} else { // NEUTRAL
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 150);
 8002214:	4b1e      	ldr	r3, [pc, #120]	; (8002290 <main+0x368>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2296      	movs	r2, #150	; 0x96
 800221a:	639a      	str	r2, [r3, #56]	; 0x38
			}

			// ###### REAR RIGHT STEER ######
			if(FinalBuffer[11] > 0 && FinalBuffer[11] <= 100){ // RIGHT
 800221c:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <main+0x370>)
 800221e:	7adb      	ldrb	r3, [r3, #11]
 8002220:	b25b      	sxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	dd14      	ble.n	8002250 <main+0x328>
 8002226:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <main+0x370>)
 8002228:	7adb      	ldrb	r3, [r3, #11]
 800222a:	b25b      	sxtb	r3, r3
 800222c:	2b64      	cmp	r3, #100	; 0x64
 800222e:	dc0f      	bgt.n	8002250 <main+0x328>
				Values[5] = computeRightServo(FinalBuffer[11]);
 8002230:	4b19      	ldr	r3, [pc, #100]	; (8002298 <main+0x370>)
 8002232:	7adb      	ldrb	r3, [r3, #11]
 8002234:	b25b      	sxtb	r3, r3
 8002236:	0018      	movs	r0, r3
 8002238:	f7ff fe40 	bl	8001ebc <computeRightServo>
 800223c:	0003      	movs	r3, r0
 800223e:	001a      	movs	r2, r3
 8002240:	4b16      	ldr	r3, [pc, #88]	; (800229c <main+0x374>)
 8002242:	715a      	strb	r2, [r3, #5]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Values[5]);
 8002244:	4b15      	ldr	r3, [pc, #84]	; (800229c <main+0x374>)
 8002246:	795a      	ldrb	r2, [r3, #5]
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <main+0x368>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	635a      	str	r2, [r3, #52]	; 0x34
 800224e:	e02b      	b.n	80022a8 <main+0x380>
			} else if(FinalBuffer[11] >= -100 && FinalBuffer[11] < 0){ // LEFT
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <main+0x370>)
 8002252:	7adb      	ldrb	r3, [r3, #11]
 8002254:	b25b      	sxtb	r3, r3
 8002256:	3364      	adds	r3, #100	; 0x64
 8002258:	db22      	blt.n	80022a0 <main+0x378>
 800225a:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <main+0x370>)
 800225c:	7adb      	ldrb	r3, [r3, #11]
 800225e:	b25b      	sxtb	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	da1d      	bge.n	80022a0 <main+0x378>
				Values[5] = computeLeftServo(FinalBuffer[11]);
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <main+0x370>)
 8002266:	7adb      	ldrb	r3, [r3, #11]
 8002268:	b25b      	sxtb	r3, r3
 800226a:	0018      	movs	r0, r3
 800226c:	f7ff fdf0 	bl	8001e50 <computeLeftServo>
 8002270:	0003      	movs	r3, r0
 8002272:	001a      	movs	r2, r3
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <main+0x374>)
 8002276:	715a      	strb	r2, [r3, #5]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Values[5]);
 8002278:	4b08      	ldr	r3, [pc, #32]	; (800229c <main+0x374>)
 800227a:	795a      	ldrb	r2, [r3, #5]
 800227c:	4b04      	ldr	r3, [pc, #16]	; (8002290 <main+0x368>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	635a      	str	r2, [r3, #52]	; 0x34
 8002282:	e011      	b.n	80022a8 <main+0x380>
 8002284:	20000028 	.word	0x20000028
 8002288:	200000e4 	.word	0x200000e4
 800228c:	2000004c 	.word	0x2000004c
 8002290:	20000098 	.word	0x20000098
 8002294:	2000003e 	.word	0x2000003e
 8002298:	2000002c 	.word	0x2000002c
 800229c:	20000040 	.word	0x20000040
			} else { // NEUTRAL
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 150);
 80022a0:	4b40      	ldr	r3, [pc, #256]	; (80023a4 <main+0x47c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2296      	movs	r2, #150	; 0x96
 80022a6:	635a      	str	r2, [r3, #52]	; 0x34
			}

			if(FinalBuffer[0] > 0 && FinalBuffer[0] <= 100){
 80022a8:	4b3f      	ldr	r3, [pc, #252]	; (80023a8 <main+0x480>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	b25b      	sxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	dd14      	ble.n	80022dc <main+0x3b4>
 80022b2:	4b3d      	ldr	r3, [pc, #244]	; (80023a8 <main+0x480>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	b25b      	sxtb	r3, r3
 80022b8:	2b64      	cmp	r3, #100	; 0x64
 80022ba:	dc0f      	bgt.n	80022dc <main+0x3b4>
				Values[6] = computeProportionForwardDrive(FinalBuffer[0]);
 80022bc:	4b3a      	ldr	r3, [pc, #232]	; (80023a8 <main+0x480>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b25b      	sxtb	r3, r3
 80022c2:	0018      	movs	r0, r3
 80022c4:	f7ff fd6c 	bl	8001da0 <computeProportionForwardDrive>
 80022c8:	0003      	movs	r3, r0
 80022ca:	001a      	movs	r2, r3
 80022cc:	4b37      	ldr	r3, [pc, #220]	; (80023ac <main+0x484>)
 80022ce:	719a      	strb	r2, [r3, #6]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, Values[6]);
 80022d0:	4b36      	ldr	r3, [pc, #216]	; (80023ac <main+0x484>)
 80022d2:	799a      	ldrb	r2, [r3, #6]
 80022d4:	4b33      	ldr	r3, [pc, #204]	; (80023a4 <main+0x47c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	641a      	str	r2, [r3, #64]	; 0x40
 80022da:	e022      	b.n	8002322 <main+0x3fa>
			} else if(FinalBuffer[0] >= -100 && FinalBuffer[0] < 0){
 80022dc:	4b32      	ldr	r3, [pc, #200]	; (80023a8 <main+0x480>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	b25b      	sxtb	r3, r3
 80022e2:	3364      	adds	r3, #100	; 0x64
 80022e4:	db14      	blt.n	8002310 <main+0x3e8>
 80022e6:	4b30      	ldr	r3, [pc, #192]	; (80023a8 <main+0x480>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	b25b      	sxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	da0f      	bge.n	8002310 <main+0x3e8>
				Values[7] = computeProportionBackwardDrive(FinalBuffer[0]);
 80022f0:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <main+0x480>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	b25b      	sxtb	r3, r3
 80022f6:	0018      	movs	r0, r3
 80022f8:	f7ff fd7e 	bl	8001df8 <computeProportionBackwardDrive>
 80022fc:	0003      	movs	r3, r0
 80022fe:	001a      	movs	r2, r3
 8002300:	4b2a      	ldr	r3, [pc, #168]	; (80023ac <main+0x484>)
 8002302:	71da      	strb	r2, [r3, #7]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, Values[7]);
 8002304:	4b29      	ldr	r3, [pc, #164]	; (80023ac <main+0x484>)
 8002306:	79da      	ldrb	r2, [r3, #7]
 8002308:	4b26      	ldr	r3, [pc, #152]	; (80023a4 <main+0x47c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	641a      	str	r2, [r3, #64]	; 0x40
 800230e:	e008      	b.n	8002322 <main+0x3fa>
			} else if(FinalBuffer[0] == 0){
 8002310:	4b25      	ldr	r3, [pc, #148]	; (80023a8 <main+0x480>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	b25b      	sxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d103      	bne.n	8002322 <main+0x3fa>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 150);
 800231a:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <main+0x47c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2296      	movs	r2, #150	; 0x96
 8002320:	641a      	str	r2, [r3, #64]	; 0x40
			}

			if(FinalBuffer[2] > 0 && FinalBuffer[2] <= 100){
 8002322:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <main+0x480>)
 8002324:	789b      	ldrb	r3, [r3, #2]
 8002326:	b25b      	sxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	dd14      	ble.n	8002356 <main+0x42e>
 800232c:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <main+0x480>)
 800232e:	789b      	ldrb	r3, [r3, #2]
 8002330:	b25b      	sxtb	r3, r3
 8002332:	2b64      	cmp	r3, #100	; 0x64
 8002334:	dc0f      	bgt.n	8002356 <main+0x42e>
				Values[8] = computeProportionForwardDrive(FinalBuffer[0]);
 8002336:	4b1c      	ldr	r3, [pc, #112]	; (80023a8 <main+0x480>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	b25b      	sxtb	r3, r3
 800233c:	0018      	movs	r0, r3
 800233e:	f7ff fd2f 	bl	8001da0 <computeProportionForwardDrive>
 8002342:	0003      	movs	r3, r0
 8002344:	001a      	movs	r2, r3
 8002346:	4b19      	ldr	r3, [pc, #100]	; (80023ac <main+0x484>)
 8002348:	721a      	strb	r2, [r3, #8]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, Values[8]);
 800234a:	4b18      	ldr	r3, [pc, #96]	; (80023ac <main+0x484>)
 800234c:	7a1a      	ldrb	r2, [r3, #8]
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <main+0x47c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	63da      	str	r2, [r3, #60]	; 0x3c
 8002354:	e022      	b.n	800239c <main+0x474>
			} else if(FinalBuffer[2] >= -100 && FinalBuffer[2] < 0){
 8002356:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <main+0x480>)
 8002358:	789b      	ldrb	r3, [r3, #2]
 800235a:	b25b      	sxtb	r3, r3
 800235c:	3364      	adds	r3, #100	; 0x64
 800235e:	db14      	blt.n	800238a <main+0x462>
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <main+0x480>)
 8002362:	789b      	ldrb	r3, [r3, #2]
 8002364:	b25b      	sxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	da0f      	bge.n	800238a <main+0x462>
				Values[9] = computeProportionBackwardDrive(FinalBuffer[0]);
 800236a:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <main+0x480>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	b25b      	sxtb	r3, r3
 8002370:	0018      	movs	r0, r3
 8002372:	f7ff fd41 	bl	8001df8 <computeProportionBackwardDrive>
 8002376:	0003      	movs	r3, r0
 8002378:	001a      	movs	r2, r3
 800237a:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <main+0x484>)
 800237c:	725a      	strb	r2, [r3, #9]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, Values[9]);
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <main+0x484>)
 8002380:	7a5a      	ldrb	r2, [r3, #9]
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <main+0x47c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	63da      	str	r2, [r3, #60]	; 0x3c
 8002388:	e008      	b.n	800239c <main+0x474>
			} else if(FinalBuffer[2] == 0){
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <main+0x480>)
 800238c:	789b      	ldrb	r3, [r3, #2]
 800238e:	b25b      	sxtb	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d103      	bne.n	800239c <main+0x474>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 150);
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <main+0x47c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2296      	movs	r2, #150	; 0x96
 800239a:	63da      	str	r2, [r3, #60]	; 0x3c
			}

			finalframeready = 0;
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <main+0x488>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
		if(finalframeready == 1){
 80023a2:	e61f      	b.n	8001fe4 <main+0xbc>
 80023a4:	20000098 	.word	0x20000098
 80023a8:	2000002c 	.word	0x2000002c
 80023ac:	20000040 	.word	0x20000040
 80023b0:	2000003e 	.word	0x2000003e

080023b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023b4:	b590      	push	{r4, r7, lr}
 80023b6:	b093      	sub	sp, #76	; 0x4c
 80023b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ba:	2410      	movs	r4, #16
 80023bc:	193b      	adds	r3, r7, r4
 80023be:	0018      	movs	r0, r3
 80023c0:	2338      	movs	r3, #56	; 0x38
 80023c2:	001a      	movs	r2, r3
 80023c4:	2100      	movs	r1, #0
 80023c6:	f004 ff25 	bl	8007214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023ca:	003b      	movs	r3, r7
 80023cc:	0018      	movs	r0, r3
 80023ce:	2310      	movs	r3, #16
 80023d0:	001a      	movs	r2, r3
 80023d2:	2100      	movs	r1, #0
 80023d4:	f004 ff1e 	bl	8007214 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	0018      	movs	r0, r3
 80023de:	f001 f887 	bl	80034f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023e2:	193b      	adds	r3, r7, r4
 80023e4:	2202      	movs	r2, #2
 80023e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023e8:	193b      	adds	r3, r7, r4
 80023ea:	2280      	movs	r2, #128	; 0x80
 80023ec:	0052      	lsls	r2, r2, #1
 80023ee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80023f0:	0021      	movs	r1, r4
 80023f2:	187b      	adds	r3, r7, r1
 80023f4:	2200      	movs	r2, #0
 80023f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023f8:	187b      	adds	r3, r7, r1
 80023fa:	2240      	movs	r2, #64	; 0x40
 80023fc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023fe:	187b      	adds	r3, r7, r1
 8002400:	2202      	movs	r2, #2
 8002402:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002404:	187b      	adds	r3, r7, r1
 8002406:	2202      	movs	r2, #2
 8002408:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800240a:	187b      	adds	r3, r7, r1
 800240c:	2200      	movs	r2, #0
 800240e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 8002410:	187b      	adds	r3, r7, r1
 8002412:	2209      	movs	r2, #9
 8002414:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002416:	187b      	adds	r3, r7, r1
 8002418:	2280      	movs	r2, #128	; 0x80
 800241a:	0292      	lsls	r2, r2, #10
 800241c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800241e:	187b      	adds	r3, r7, r1
 8002420:	2280      	movs	r2, #128	; 0x80
 8002422:	0492      	lsls	r2, r2, #18
 8002424:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8002426:	187b      	adds	r3, r7, r1
 8002428:	2280      	movs	r2, #128	; 0x80
 800242a:	05d2      	lsls	r2, r2, #23
 800242c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800242e:	187b      	adds	r3, r7, r1
 8002430:	0018      	movs	r0, r3
 8002432:	f001 f8a9 	bl	8003588 <HAL_RCC_OscConfig>
 8002436:	1e03      	subs	r3, r0, #0
 8002438:	d001      	beq.n	800243e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800243a:	f000 f867 	bl	800250c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800243e:	003b      	movs	r3, r7
 8002440:	2207      	movs	r2, #7
 8002442:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002444:	003b      	movs	r3, r7
 8002446:	2202      	movs	r2, #2
 8002448:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800244a:	003b      	movs	r3, r7
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002450:	003b      	movs	r3, r7
 8002452:	2200      	movs	r2, #0
 8002454:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002456:	003b      	movs	r3, r7
 8002458:	2101      	movs	r1, #1
 800245a:	0018      	movs	r0, r3
 800245c:	f001 fbae 	bl	8003bbc <HAL_RCC_ClockConfig>
 8002460:	1e03      	subs	r3, r0, #0
 8002462:	d001      	beq.n	8002468 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002464:	f000 f852 	bl	800250c <Error_Handler>
  }
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b013      	add	sp, #76	; 0x4c
 800246e:	bd90      	pop	{r4, r7, pc}

08002470 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	//if(huart2.Instance == huart){

	HAL_UART_Receive_IT(&huart1, &RxBuff, 1);
 8002478:	491d      	ldr	r1, [pc, #116]	; (80024f0 <HAL_UART_RxCpltCallback+0x80>)
 800247a:	4b1e      	ldr	r3, [pc, #120]	; (80024f4 <HAL_UART_RxCpltCallback+0x84>)
 800247c:	2201      	movs	r2, #1
 800247e:	0018      	movs	r0, r3
 8002480:	f002 ff62 	bl	8005348 <HAL_UART_Receive_IT>

	if(RxBuff == 0x9B){
 8002484:	4b1a      	ldr	r3, [pc, #104]	; (80024f0 <HAL_UART_RxCpltCallback+0x80>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b9b      	cmp	r3, #155	; 0x9b
 800248a:	d106      	bne.n	800249a <HAL_UART_RxCpltCallback+0x2a>
		frameready = 1;
 800248c:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <HAL_UART_RxCpltCallback+0x88>)
 800248e:	2201      	movs	r2, #1
 8002490:	701a      	strb	r2, [r3, #0]
		framefirst = 1;
 8002492:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <HAL_UART_RxCpltCallback+0x8c>)
 8002494:	2201      	movs	r2, #1
 8002496:	701a      	strb	r2, [r3, #0]
 8002498:	e002      	b.n	80024a0 <HAL_UART_RxCpltCallback+0x30>
	} else {
		framefirst = 0;
 800249a:	4b18      	ldr	r3, [pc, #96]	; (80024fc <HAL_UART_RxCpltCallback+0x8c>)
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
	}

	if(RxBuff == 0x65){
 80024a0:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <HAL_UART_RxCpltCallback+0x80>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b65      	cmp	r3, #101	; 0x65
 80024a6:	d108      	bne.n	80024ba <HAL_UART_RxCpltCallback+0x4a>
		i = 0;
 80024a8:	4b15      	ldr	r3, [pc, #84]	; (8002500 <HAL_UART_RxCpltCallback+0x90>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	801a      	strh	r2, [r3, #0]
		frameready = 0;
 80024ae:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_UART_RxCpltCallback+0x88>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
		//memset(FinalBuffer, 0, 64);
		finalframeready = 1;
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <HAL_UART_RxCpltCallback+0x94>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
	}

	if(frameready == 1 && framefirst == 0){
 80024ba:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <HAL_UART_RxCpltCallback+0x88>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d111      	bne.n	80024e6 <HAL_UART_RxCpltCallback+0x76>
 80024c2:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <HAL_UART_RxCpltCallback+0x8c>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10d      	bne.n	80024e6 <HAL_UART_RxCpltCallback+0x76>
		FinalBuffer[i] = RxBuff;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <HAL_UART_RxCpltCallback+0x80>)
 80024cc:	7819      	ldrb	r1, [r3, #0]
 80024ce:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <HAL_UART_RxCpltCallback+0x90>)
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	001a      	movs	r2, r3
 80024d4:	b249      	sxtb	r1, r1
 80024d6:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <HAL_UART_RxCpltCallback+0x98>)
 80024d8:	5499      	strb	r1, [r3, r2]
		i++;
 80024da:	4b09      	ldr	r3, [pc, #36]	; (8002500 <HAL_UART_RxCpltCallback+0x90>)
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	3301      	adds	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <HAL_UART_RxCpltCallback+0x90>)
 80024e4:	801a      	strh	r2, [r3, #0]

	}

	//}
}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b002      	add	sp, #8
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	20000028 	.word	0x20000028
 80024f4:	200000e4 	.word	0x200000e4
 80024f8:	2000003c 	.word	0x2000003c
 80024fc:	2000003d 	.word	0x2000003d
 8002500:	2000002a 	.word	0x2000002a
 8002504:	2000003e 	.word	0x2000003e
 8002508:	2000002c 	.word	0x2000002c

0800250c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002510:	b672      	cpsid	i
}
 8002512:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002514:	e7fe      	b.n	8002514 <Error_Handler+0x8>
	...

08002518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251e:	4b0f      	ldr	r3, [pc, #60]	; (800255c <HAL_MspInit+0x44>)
 8002520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <HAL_MspInit+0x44>)
 8002524:	2101      	movs	r1, #1
 8002526:	430a      	orrs	r2, r1
 8002528:	641a      	str	r2, [r3, #64]	; 0x40
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <HAL_MspInit+0x44>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	2201      	movs	r2, #1
 8002530:	4013      	ands	r3, r2
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <HAL_MspInit+0x44>)
 8002538:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <HAL_MspInit+0x44>)
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	0549      	lsls	r1, r1, #21
 8002540:	430a      	orrs	r2, r1
 8002542:	63da      	str	r2, [r3, #60]	; 0x3c
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <HAL_MspInit+0x44>)
 8002546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	055b      	lsls	r3, r3, #21
 800254c:	4013      	ands	r3, r2
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	46bd      	mov	sp, r7
 8002556:	b002      	add	sp, #8
 8002558:	bd80      	pop	{r7, pc}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	40021000 	.word	0x40021000

08002560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <NMI_Handler+0x4>

08002566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800256a:	e7fe      	b.n	800256a <HardFault_Handler+0x4>

0800256c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002570:	46c0      	nop			; (mov r8, r8)
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002584:	f000 fc8a 	bl	8002e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002588:	46c0      	nop			; (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002594:	4b03      	ldr	r3, [pc, #12]	; (80025a4 <USART1_IRQHandler+0x14>)
 8002596:	0018      	movs	r0, r3
 8002598:	f002 ff34 	bl	8005404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800259c:	46c0      	nop			; (mov r8, r8)
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	200000e4 	.word	0x200000e4

080025a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025ac:	4b03      	ldr	r3, [pc, #12]	; (80025bc <USART2_IRQHandler+0x14>)
 80025ae:	0018      	movs	r0, r3
 80025b0:	f002 ff28 	bl	8005404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025b4:	46c0      	nop			; (mov r8, r8)
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	20000178 	.word	0x20000178

080025c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025c4:	46c0      	nop			; (mov r8, r8)
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b09c      	sub	sp, #112	; 0x70
 80025d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025d2:	2360      	movs	r3, #96	; 0x60
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	0018      	movs	r0, r3
 80025d8:	2310      	movs	r3, #16
 80025da:	001a      	movs	r2, r3
 80025dc:	2100      	movs	r1, #0
 80025de:	f004 fe19 	bl	8007214 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e2:	2354      	movs	r3, #84	; 0x54
 80025e4:	18fb      	adds	r3, r7, r3
 80025e6:	0018      	movs	r0, r3
 80025e8:	230c      	movs	r3, #12
 80025ea:	001a      	movs	r2, r3
 80025ec:	2100      	movs	r1, #0
 80025ee:	f004 fe11 	bl	8007214 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025f2:	2338      	movs	r3, #56	; 0x38
 80025f4:	18fb      	adds	r3, r7, r3
 80025f6:	0018      	movs	r0, r3
 80025f8:	231c      	movs	r3, #28
 80025fa:	001a      	movs	r2, r3
 80025fc:	2100      	movs	r1, #0
 80025fe:	f004 fe09 	bl	8007214 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	0018      	movs	r0, r3
 8002606:	2334      	movs	r3, #52	; 0x34
 8002608:	001a      	movs	r2, r3
 800260a:	2100      	movs	r1, #0
 800260c:	f004 fe02 	bl	8007214 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002610:	4b72      	ldr	r3, [pc, #456]	; (80027dc <MX_TIM1_Init+0x210>)
 8002612:	4a73      	ldr	r2, [pc, #460]	; (80027e0 <MX_TIM1_Init+0x214>)
 8002614:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 479;
 8002616:	4b71      	ldr	r3, [pc, #452]	; (80027dc <MX_TIM1_Init+0x210>)
 8002618:	22e0      	movs	r2, #224	; 0xe0
 800261a:	32ff      	adds	r2, #255	; 0xff
 800261c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800261e:	4b6f      	ldr	r3, [pc, #444]	; (80027dc <MX_TIM1_Init+0x210>)
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8002624:	4b6d      	ldr	r3, [pc, #436]	; (80027dc <MX_TIM1_Init+0x210>)
 8002626:	4a6f      	ldr	r2, [pc, #444]	; (80027e4 <MX_TIM1_Init+0x218>)
 8002628:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800262a:	4b6c      	ldr	r3, [pc, #432]	; (80027dc <MX_TIM1_Init+0x210>)
 800262c:	2200      	movs	r2, #0
 800262e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002630:	4b6a      	ldr	r3, [pc, #424]	; (80027dc <MX_TIM1_Init+0x210>)
 8002632:	2200      	movs	r2, #0
 8002634:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002636:	4b69      	ldr	r3, [pc, #420]	; (80027dc <MX_TIM1_Init+0x210>)
 8002638:	2280      	movs	r2, #128	; 0x80
 800263a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800263c:	4b67      	ldr	r3, [pc, #412]	; (80027dc <MX_TIM1_Init+0x210>)
 800263e:	0018      	movs	r0, r3
 8002640:	f001 fde0 	bl	8004204 <HAL_TIM_Base_Init>
 8002644:	1e03      	subs	r3, r0, #0
 8002646:	d001      	beq.n	800264c <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8002648:	f7ff ff60 	bl	800250c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800264c:	2160      	movs	r1, #96	; 0x60
 800264e:	187b      	adds	r3, r7, r1
 8002650:	2280      	movs	r2, #128	; 0x80
 8002652:	0152      	lsls	r2, r2, #5
 8002654:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002656:	187a      	adds	r2, r7, r1
 8002658:	4b60      	ldr	r3, [pc, #384]	; (80027dc <MX_TIM1_Init+0x210>)
 800265a:	0011      	movs	r1, r2
 800265c:	0018      	movs	r0, r3
 800265e:	f002 f867 	bl	8004730 <HAL_TIM_ConfigClockSource>
 8002662:	1e03      	subs	r3, r0, #0
 8002664:	d001      	beq.n	800266a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002666:	f7ff ff51 	bl	800250c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800266a:	4b5c      	ldr	r3, [pc, #368]	; (80027dc <MX_TIM1_Init+0x210>)
 800266c:	0018      	movs	r0, r3
 800266e:	f001 fe21 	bl	80042b4 <HAL_TIM_PWM_Init>
 8002672:	1e03      	subs	r3, r0, #0
 8002674:	d001      	beq.n	800267a <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8002676:	f7ff ff49 	bl	800250c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800267a:	2154      	movs	r1, #84	; 0x54
 800267c:	187b      	adds	r3, r7, r1
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002682:	187b      	adds	r3, r7, r1
 8002684:	2200      	movs	r2, #0
 8002686:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002688:	187b      	adds	r3, r7, r1
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800268e:	187a      	adds	r2, r7, r1
 8002690:	4b52      	ldr	r3, [pc, #328]	; (80027dc <MX_TIM1_Init+0x210>)
 8002692:	0011      	movs	r1, r2
 8002694:	0018      	movs	r0, r3
 8002696:	f002 fcf3 	bl	8005080 <HAL_TIMEx_MasterConfigSynchronization>
 800269a:	1e03      	subs	r3, r0, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800269e:	f7ff ff35 	bl	800250c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026a2:	2138      	movs	r1, #56	; 0x38
 80026a4:	187b      	adds	r3, r7, r1
 80026a6:	2260      	movs	r2, #96	; 0x60
 80026a8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80026aa:	187b      	adds	r3, r7, r1
 80026ac:	2200      	movs	r2, #0
 80026ae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026b0:	187b      	adds	r3, r7, r1
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026b6:	187b      	adds	r3, r7, r1
 80026b8:	2200      	movs	r2, #0
 80026ba:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80026bc:	187b      	adds	r3, r7, r1
 80026be:	2204      	movs	r2, #4
 80026c0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026c2:	187b      	adds	r3, r7, r1
 80026c4:	2200      	movs	r2, #0
 80026c6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026c8:	187b      	adds	r3, r7, r1
 80026ca:	2200      	movs	r2, #0
 80026cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026ce:	1879      	adds	r1, r7, r1
 80026d0:	4b42      	ldr	r3, [pc, #264]	; (80027dc <MX_TIM1_Init+0x210>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	0018      	movs	r0, r3
 80026d6:	f001 ff2b 	bl	8004530 <HAL_TIM_PWM_ConfigChannel>
 80026da:	1e03      	subs	r3, r0, #0
 80026dc:	d001      	beq.n	80026e2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80026de:	f7ff ff15 	bl	800250c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 80026e2:	4b3e      	ldr	r3, [pc, #248]	; (80027dc <MX_TIM1_Init+0x210>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699a      	ldr	r2, [r3, #24]
 80026e8:	4b3c      	ldr	r3, [pc, #240]	; (80027dc <MX_TIM1_Init+0x210>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2108      	movs	r1, #8
 80026ee:	438a      	bics	r2, r1
 80026f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026f2:	2338      	movs	r3, #56	; 0x38
 80026f4:	18f9      	adds	r1, r7, r3
 80026f6:	4b39      	ldr	r3, [pc, #228]	; (80027dc <MX_TIM1_Init+0x210>)
 80026f8:	2204      	movs	r2, #4
 80026fa:	0018      	movs	r0, r3
 80026fc:	f001 ff18 	bl	8004530 <HAL_TIM_PWM_ConfigChannel>
 8002700:	1e03      	subs	r3, r0, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8002704:	f7ff ff02 	bl	800250c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8002708:	4b34      	ldr	r3, [pc, #208]	; (80027dc <MX_TIM1_Init+0x210>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	4b33      	ldr	r3, [pc, #204]	; (80027dc <MX_TIM1_Init+0x210>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4935      	ldr	r1, [pc, #212]	; (80027e8 <MX_TIM1_Init+0x21c>)
 8002714:	400a      	ands	r2, r1
 8002716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002718:	2338      	movs	r3, #56	; 0x38
 800271a:	18f9      	adds	r1, r7, r3
 800271c:	4b2f      	ldr	r3, [pc, #188]	; (80027dc <MX_TIM1_Init+0x210>)
 800271e:	2208      	movs	r2, #8
 8002720:	0018      	movs	r0, r3
 8002722:	f001 ff05 	bl	8004530 <HAL_TIM_PWM_ConfigChannel>
 8002726:	1e03      	subs	r3, r0, #0
 8002728:	d001      	beq.n	800272e <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 800272a:	f7ff feef 	bl	800250c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 800272e:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <MX_TIM1_Init+0x210>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69da      	ldr	r2, [r3, #28]
 8002734:	4b29      	ldr	r3, [pc, #164]	; (80027dc <MX_TIM1_Init+0x210>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2108      	movs	r1, #8
 800273a:	438a      	bics	r2, r1
 800273c:	61da      	str	r2, [r3, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800273e:	2338      	movs	r3, #56	; 0x38
 8002740:	18f9      	adds	r1, r7, r3
 8002742:	4b26      	ldr	r3, [pc, #152]	; (80027dc <MX_TIM1_Init+0x210>)
 8002744:	220c      	movs	r2, #12
 8002746:	0018      	movs	r0, r3
 8002748:	f001 fef2 	bl	8004530 <HAL_TIM_PWM_ConfigChannel>
 800274c:	1e03      	subs	r3, r0, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8002750:	f7ff fedc 	bl	800250c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8002754:	4b21      	ldr	r3, [pc, #132]	; (80027dc <MX_TIM1_Init+0x210>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69da      	ldr	r2, [r3, #28]
 800275a:	4b20      	ldr	r3, [pc, #128]	; (80027dc <MX_TIM1_Init+0x210>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4922      	ldr	r1, [pc, #136]	; (80027e8 <MX_TIM1_Init+0x21c>)
 8002760:	400a      	ands	r2, r1
 8002762:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002764:	1d3b      	adds	r3, r7, #4
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800276a:	1d3b      	adds	r3, r7, #4
 800276c:	2200      	movs	r2, #0
 800276e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	2200      	movs	r2, #0
 800277a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	2200      	movs	r2, #0
 8002780:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	0192      	lsls	r2, r2, #6
 8002788:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002790:	1d3b      	adds	r3, r7, #4
 8002792:	2200      	movs	r2, #0
 8002794:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002796:	1d3b      	adds	r3, r7, #4
 8002798:	2200      	movs	r2, #0
 800279a:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800279c:	1d3b      	adds	r3, r7, #4
 800279e:	2280      	movs	r2, #128	; 0x80
 80027a0:	0492      	lsls	r2, r2, #18
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80027a4:	1d3b      	adds	r3, r7, #4
 80027a6:	2200      	movs	r2, #0
 80027a8:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80027aa:	1d3b      	adds	r3, r7, #4
 80027ac:	2200      	movs	r2, #0
 80027ae:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	2200      	movs	r2, #0
 80027b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80027b6:	1d3a      	adds	r2, r7, #4
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <MX_TIM1_Init+0x210>)
 80027ba:	0011      	movs	r1, r2
 80027bc:	0018      	movs	r0, r3
 80027be:	f002 fcc7 	bl	8005150 <HAL_TIMEx_ConfigBreakDeadTime>
 80027c2:	1e03      	subs	r3, r0, #0
 80027c4:	d001      	beq.n	80027ca <MX_TIM1_Init+0x1fe>
  {
    Error_Handler();
 80027c6:	f7ff fea1 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80027ca:	4b04      	ldr	r3, [pc, #16]	; (80027dc <MX_TIM1_Init+0x210>)
 80027cc:	0018      	movs	r0, r3
 80027ce:	f000 f8f7 	bl	80029c0 <HAL_TIM_MspPostInit>

}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b01c      	add	sp, #112	; 0x70
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	2000004c 	.word	0x2000004c
 80027e0:	40012c00 	.word	0x40012c00
 80027e4:	000007cf 	.word	0x000007cf
 80027e8:	fffff7ff 	.word	0xfffff7ff

080027ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08e      	sub	sp, #56	; 0x38
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027f2:	2328      	movs	r3, #40	; 0x28
 80027f4:	18fb      	adds	r3, r7, r3
 80027f6:	0018      	movs	r0, r3
 80027f8:	2310      	movs	r3, #16
 80027fa:	001a      	movs	r2, r3
 80027fc:	2100      	movs	r1, #0
 80027fe:	f004 fd09 	bl	8007214 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002802:	231c      	movs	r3, #28
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	0018      	movs	r0, r3
 8002808:	230c      	movs	r3, #12
 800280a:	001a      	movs	r2, r3
 800280c:	2100      	movs	r1, #0
 800280e:	f004 fd01 	bl	8007214 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002812:	003b      	movs	r3, r7
 8002814:	0018      	movs	r0, r3
 8002816:	231c      	movs	r3, #28
 8002818:	001a      	movs	r2, r3
 800281a:	2100      	movs	r1, #0
 800281c:	f004 fcfa 	bl	8007214 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002820:	4b3f      	ldr	r3, [pc, #252]	; (8002920 <MX_TIM3_Init+0x134>)
 8002822:	4a40      	ldr	r2, [pc, #256]	; (8002924 <MX_TIM3_Init+0x138>)
 8002824:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 479;
 8002826:	4b3e      	ldr	r3, [pc, #248]	; (8002920 <MX_TIM3_Init+0x134>)
 8002828:	22e0      	movs	r2, #224	; 0xe0
 800282a:	32ff      	adds	r2, #255	; 0xff
 800282c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800282e:	4b3c      	ldr	r3, [pc, #240]	; (8002920 <MX_TIM3_Init+0x134>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8002834:	4b3a      	ldr	r3, [pc, #232]	; (8002920 <MX_TIM3_Init+0x134>)
 8002836:	4a3c      	ldr	r2, [pc, #240]	; (8002928 <MX_TIM3_Init+0x13c>)
 8002838:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800283a:	4b39      	ldr	r3, [pc, #228]	; (8002920 <MX_TIM3_Init+0x134>)
 800283c:	2200      	movs	r2, #0
 800283e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002840:	4b37      	ldr	r3, [pc, #220]	; (8002920 <MX_TIM3_Init+0x134>)
 8002842:	2200      	movs	r2, #0
 8002844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002846:	4b36      	ldr	r3, [pc, #216]	; (8002920 <MX_TIM3_Init+0x134>)
 8002848:	0018      	movs	r0, r3
 800284a:	f001 fcdb 	bl	8004204 <HAL_TIM_Base_Init>
 800284e:	1e03      	subs	r3, r0, #0
 8002850:	d001      	beq.n	8002856 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8002852:	f7ff fe5b 	bl	800250c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002856:	2128      	movs	r1, #40	; 0x28
 8002858:	187b      	adds	r3, r7, r1
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	0152      	lsls	r2, r2, #5
 800285e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002860:	187a      	adds	r2, r7, r1
 8002862:	4b2f      	ldr	r3, [pc, #188]	; (8002920 <MX_TIM3_Init+0x134>)
 8002864:	0011      	movs	r1, r2
 8002866:	0018      	movs	r0, r3
 8002868:	f001 ff62 	bl	8004730 <HAL_TIM_ConfigClockSource>
 800286c:	1e03      	subs	r3, r0, #0
 800286e:	d001      	beq.n	8002874 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002870:	f7ff fe4c 	bl	800250c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002874:	4b2a      	ldr	r3, [pc, #168]	; (8002920 <MX_TIM3_Init+0x134>)
 8002876:	0018      	movs	r0, r3
 8002878:	f001 fd1c 	bl	80042b4 <HAL_TIM_PWM_Init>
 800287c:	1e03      	subs	r3, r0, #0
 800287e:	d001      	beq.n	8002884 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002880:	f7ff fe44 	bl	800250c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002884:	211c      	movs	r1, #28
 8002886:	187b      	adds	r3, r7, r1
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800288c:	187b      	adds	r3, r7, r1
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002892:	187a      	adds	r2, r7, r1
 8002894:	4b22      	ldr	r3, [pc, #136]	; (8002920 <MX_TIM3_Init+0x134>)
 8002896:	0011      	movs	r1, r2
 8002898:	0018      	movs	r0, r3
 800289a:	f002 fbf1 	bl	8005080 <HAL_TIMEx_MasterConfigSynchronization>
 800289e:	1e03      	subs	r3, r0, #0
 80028a0:	d001      	beq.n	80028a6 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80028a2:	f7ff fe33 	bl	800250c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028a6:	003b      	movs	r3, r7
 80028a8:	2260      	movs	r2, #96	; 0x60
 80028aa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80028ac:	003b      	movs	r3, r7
 80028ae:	2200      	movs	r2, #0
 80028b0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028b2:	003b      	movs	r3, r7
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028b8:	003b      	movs	r3, r7
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028be:	0039      	movs	r1, r7
 80028c0:	4b17      	ldr	r3, [pc, #92]	; (8002920 <MX_TIM3_Init+0x134>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	0018      	movs	r0, r3
 80028c6:	f001 fe33 	bl	8004530 <HAL_TIM_PWM_ConfigChannel>
 80028ca:	1e03      	subs	r3, r0, #0
 80028cc:	d001      	beq.n	80028d2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80028ce:	f7ff fe1d 	bl	800250c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028d2:	0039      	movs	r1, r7
 80028d4:	4b12      	ldr	r3, [pc, #72]	; (8002920 <MX_TIM3_Init+0x134>)
 80028d6:	2204      	movs	r2, #4
 80028d8:	0018      	movs	r0, r3
 80028da:	f001 fe29 	bl	8004530 <HAL_TIM_PWM_ConfigChannel>
 80028de:	1e03      	subs	r3, r0, #0
 80028e0:	d001      	beq.n	80028e6 <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 80028e2:	f7ff fe13 	bl	800250c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028e6:	0039      	movs	r1, r7
 80028e8:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <MX_TIM3_Init+0x134>)
 80028ea:	2208      	movs	r2, #8
 80028ec:	0018      	movs	r0, r3
 80028ee:	f001 fe1f 	bl	8004530 <HAL_TIM_PWM_ConfigChannel>
 80028f2:	1e03      	subs	r3, r0, #0
 80028f4:	d001      	beq.n	80028fa <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 80028f6:	f7ff fe09 	bl	800250c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028fa:	0039      	movs	r1, r7
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <MX_TIM3_Init+0x134>)
 80028fe:	220c      	movs	r2, #12
 8002900:	0018      	movs	r0, r3
 8002902:	f001 fe15 	bl	8004530 <HAL_TIM_PWM_ConfigChannel>
 8002906:	1e03      	subs	r3, r0, #0
 8002908:	d001      	beq.n	800290e <MX_TIM3_Init+0x122>
  {
    Error_Handler();
 800290a:	f7ff fdff 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800290e:	4b04      	ldr	r3, [pc, #16]	; (8002920 <MX_TIM3_Init+0x134>)
 8002910:	0018      	movs	r0, r3
 8002912:	f000 f855 	bl	80029c0 <HAL_TIM_MspPostInit>

}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	46bd      	mov	sp, r7
 800291a:	b00e      	add	sp, #56	; 0x38
 800291c:	bd80      	pop	{r7, pc}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	20000098 	.word	0x20000098
 8002924:	40000400 	.word	0x40000400
 8002928:	000007cf 	.word	0x000007cf

0800292c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b08f      	sub	sp, #60	; 0x3c
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002934:	2410      	movs	r4, #16
 8002936:	193b      	adds	r3, r7, r4
 8002938:	0018      	movs	r0, r3
 800293a:	2328      	movs	r3, #40	; 0x28
 800293c:	001a      	movs	r2, r3
 800293e:	2100      	movs	r1, #0
 8002940:	f004 fc68 	bl	8007214 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a1a      	ldr	r2, [pc, #104]	; (80029b4 <HAL_TIM_Base_MspInit+0x88>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d11d      	bne.n	800298a <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800294e:	193b      	adds	r3, r7, r4
 8002950:	2280      	movs	r2, #128	; 0x80
 8002952:	0392      	lsls	r2, r2, #14
 8002954:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8002956:	193b      	adds	r3, r7, r4
 8002958:	2200      	movs	r2, #0
 800295a:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800295c:	193b      	adds	r3, r7, r4
 800295e:	0018      	movs	r0, r3
 8002960:	f001 fad6 	bl	8003f10 <HAL_RCCEx_PeriphCLKConfig>
 8002964:	1e03      	subs	r3, r0, #0
 8002966:	d001      	beq.n	800296c <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8002968:	f7ff fdd0 	bl	800250c <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800296c:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_TIM_Base_MspInit+0x8c>)
 800296e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <HAL_TIM_Base_MspInit+0x8c>)
 8002972:	2180      	movs	r1, #128	; 0x80
 8002974:	0109      	lsls	r1, r1, #4
 8002976:	430a      	orrs	r2, r1
 8002978:	641a      	str	r2, [r3, #64]	; 0x40
 800297a:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <HAL_TIM_Base_MspInit+0x8c>)
 800297c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	4013      	ands	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002988:	e010      	b.n	80029ac <HAL_TIM_Base_MspInit+0x80>
  else if(tim_baseHandle->Instance==TIM3)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a0b      	ldr	r2, [pc, #44]	; (80029bc <HAL_TIM_Base_MspInit+0x90>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d10b      	bne.n	80029ac <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002994:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <HAL_TIM_Base_MspInit+0x8c>)
 8002996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002998:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <HAL_TIM_Base_MspInit+0x8c>)
 800299a:	2102      	movs	r1, #2
 800299c:	430a      	orrs	r2, r1
 800299e:	63da      	str	r2, [r3, #60]	; 0x3c
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_TIM_Base_MspInit+0x8c>)
 80029a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a4:	2202      	movs	r2, #2
 80029a6:	4013      	ands	r3, r2
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	68bb      	ldr	r3, [r7, #8]
}
 80029ac:	46c0      	nop			; (mov r8, r8)
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b00f      	add	sp, #60	; 0x3c
 80029b2:	bd90      	pop	{r4, r7, pc}
 80029b4:	40012c00 	.word	0x40012c00
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40000400 	.word	0x40000400

080029c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b08d      	sub	sp, #52	; 0x34
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	241c      	movs	r4, #28
 80029ca:	193b      	adds	r3, r7, r4
 80029cc:	0018      	movs	r0, r3
 80029ce:	2314      	movs	r3, #20
 80029d0:	001a      	movs	r2, r3
 80029d2:	2100      	movs	r1, #0
 80029d4:	f004 fc1e 	bl	8007214 <memset>
  if(timHandle->Instance==TIM1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a4b      	ldr	r2, [pc, #300]	; (8002b0c <HAL_TIM_MspPostInit+0x14c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d145      	bne.n	8002a6e <HAL_TIM_MspPostInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	4b4b      	ldr	r3, [pc, #300]	; (8002b10 <HAL_TIM_MspPostInit+0x150>)
 80029e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029e6:	4b4a      	ldr	r3, [pc, #296]	; (8002b10 <HAL_TIM_MspPostInit+0x150>)
 80029e8:	2101      	movs	r1, #1
 80029ea:	430a      	orrs	r2, r1
 80029ec:	635a      	str	r2, [r3, #52]	; 0x34
 80029ee:	4b48      	ldr	r3, [pc, #288]	; (8002b10 <HAL_TIM_MspPostInit+0x150>)
 80029f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f2:	2201      	movs	r2, #1
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
 80029f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fa:	4b45      	ldr	r3, [pc, #276]	; (8002b10 <HAL_TIM_MspPostInit+0x150>)
 80029fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029fe:	4b44      	ldr	r3, [pc, #272]	; (8002b10 <HAL_TIM_MspPostInit+0x150>)
 8002a00:	2102      	movs	r1, #2
 8002a02:	430a      	orrs	r2, r1
 8002a04:	635a      	str	r2, [r3, #52]	; 0x34
 8002a06:	4b42      	ldr	r3, [pc, #264]	; (8002b10 <HAL_TIM_MspPostInit+0x150>)
 8002a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	697b      	ldr	r3, [r7, #20]
    PA8     ------> TIM1_CH1
    PA11 [PA9]     ------> TIM1_CH4
    PB3     ------> TIM1_CH2
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO_P1_Pin|TIM1_CH4_SERVO_L2_Pin;
 8002a12:	193b      	adds	r3, r7, r4
 8002a14:	2290      	movs	r2, #144	; 0x90
 8002a16:	0112      	lsls	r2, r2, #4
 8002a18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	193b      	adds	r3, r7, r4
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	193b      	adds	r3, r7, r4
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a26:	193b      	adds	r3, r7, r4
 8002a28:	2200      	movs	r2, #0
 8002a2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002a2c:	193b      	adds	r3, r7, r4
 8002a2e:	2202      	movs	r2, #2
 8002a30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a32:	193a      	adds	r2, r7, r4
 8002a34:	23a0      	movs	r3, #160	; 0xa0
 8002a36:	05db      	lsls	r3, r3, #23
 8002a38:	0011      	movs	r1, r2
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f000 fbf4 	bl	8003228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM1_CH2_SERVO_L1_Pin|TIM1_CH3_SERVO_P2_Pin;
 8002a40:	0021      	movs	r1, r4
 8002a42:	187b      	adds	r3, r7, r1
 8002a44:	2248      	movs	r2, #72	; 0x48
 8002a46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	187b      	adds	r3, r7, r1
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	187b      	adds	r3, r7, r1
 8002a50:	2200      	movs	r2, #0
 8002a52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a54:	187b      	adds	r3, r7, r1
 8002a56:	2200      	movs	r2, #0
 8002a58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a5a:	187b      	adds	r3, r7, r1
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a60:	187b      	adds	r3, r7, r1
 8002a62:	4a2c      	ldr	r2, [pc, #176]	; (8002b14 <HAL_TIM_MspPostInit+0x154>)
 8002a64:	0019      	movs	r1, r3
 8002a66:	0010      	movs	r0, r2
 8002a68:	f000 fbde 	bl	8003228 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a6c:	e049      	b.n	8002b02 <HAL_TIM_MspPostInit+0x142>
  else if(timHandle->Instance==TIM3)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a29      	ldr	r2, [pc, #164]	; (8002b18 <HAL_TIM_MspPostInit+0x158>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d144      	bne.n	8002b02 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a78:	4b25      	ldr	r3, [pc, #148]	; (8002b10 <HAL_TIM_MspPostInit+0x150>)
 8002a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a7c:	4b24      	ldr	r3, [pc, #144]	; (8002b10 <HAL_TIM_MspPostInit+0x150>)
 8002a7e:	2101      	movs	r1, #1
 8002a80:	430a      	orrs	r2, r1
 8002a82:	635a      	str	r2, [r3, #52]	; 0x34
 8002a84:	4b22      	ldr	r3, [pc, #136]	; (8002b10 <HAL_TIM_MspPostInit+0x150>)
 8002a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a88:	2201      	movs	r2, #1
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a90:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <HAL_TIM_MspPostInit+0x150>)
 8002a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a94:	4b1e      	ldr	r3, [pc, #120]	; (8002b10 <HAL_TIM_MspPostInit+0x150>)
 8002a96:	2102      	movs	r1, #2
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	635a      	str	r2, [r3, #52]	; 0x34
 8002a9c:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <HAL_TIM_MspPostInit+0x150>)
 8002a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH2_SERVO_L3_Pin;
 8002aa8:	241c      	movs	r4, #28
 8002aaa:	193b      	adds	r3, r7, r4
 8002aac:	2280      	movs	r2, #128	; 0x80
 8002aae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	193b      	adds	r3, r7, r4
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	193b      	adds	r3, r7, r4
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abc:	193b      	adds	r3, r7, r4
 8002abe:	2200      	movs	r2, #0
 8002ac0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002ac2:	193b      	adds	r3, r7, r4
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM3_CH2_SERVO_L3_GPIO_Port, &GPIO_InitStruct);
 8002ac8:	193a      	adds	r2, r7, r4
 8002aca:	23a0      	movs	r3, #160	; 0xa0
 8002acc:	05db      	lsls	r3, r3, #23
 8002ace:	0011      	movs	r1, r2
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f000 fba9 	bl	8003228 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM3_CH3_POLOLU_P_Pin|TIM3_CH4_POLOLI_L_Pin|TIM3_CH1_SERVO_P3_Pin;
 8002ad6:	0021      	movs	r1, r4
 8002ad8:	187b      	adds	r3, r7, r1
 8002ada:	2213      	movs	r2, #19
 8002adc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	187b      	adds	r3, r7, r1
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	187b      	adds	r3, r7, r1
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aea:	187b      	adds	r3, r7, r1
 8002aec:	2200      	movs	r2, #0
 8002aee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	2201      	movs	r2, #1
 8002af4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af6:	187b      	adds	r3, r7, r1
 8002af8:	4a06      	ldr	r2, [pc, #24]	; (8002b14 <HAL_TIM_MspPostInit+0x154>)
 8002afa:	0019      	movs	r1, r3
 8002afc:	0010      	movs	r0, r2
 8002afe:	f000 fb93 	bl	8003228 <HAL_GPIO_Init>
}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b00d      	add	sp, #52	; 0x34
 8002b08:	bd90      	pop	{r4, r7, pc}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	40012c00 	.word	0x40012c00
 8002b10:	40021000 	.word	0x40021000
 8002b14:	50000400 	.word	0x50000400
 8002b18:	40000400 	.word	0x40000400

08002b1c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b20:	4b23      	ldr	r3, [pc, #140]	; (8002bb0 <MX_USART1_UART_Init+0x94>)
 8002b22:	4a24      	ldr	r2, [pc, #144]	; (8002bb4 <MX_USART1_UART_Init+0x98>)
 8002b24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b26:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <MX_USART1_UART_Init+0x94>)
 8002b28:	22e1      	movs	r2, #225	; 0xe1
 8002b2a:	0252      	lsls	r2, r2, #9
 8002b2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b2e:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <MX_USART1_UART_Init+0x94>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b34:	4b1e      	ldr	r3, [pc, #120]	; (8002bb0 <MX_USART1_UART_Init+0x94>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b3a:	4b1d      	ldr	r3, [pc, #116]	; (8002bb0 <MX_USART1_UART_Init+0x94>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b40:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <MX_USART1_UART_Init+0x94>)
 8002b42:	220c      	movs	r2, #12
 8002b44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b46:	4b1a      	ldr	r3, [pc, #104]	; (8002bb0 <MX_USART1_UART_Init+0x94>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b4c:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <MX_USART1_UART_Init+0x94>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b52:	4b17      	ldr	r3, [pc, #92]	; (8002bb0 <MX_USART1_UART_Init+0x94>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b58:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <MX_USART1_UART_Init+0x94>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b5e:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <MX_USART1_UART_Init+0x94>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <MX_USART1_UART_Init+0x94>)
 8002b66:	0018      	movs	r0, r3
 8002b68:	f002 fb98 	bl	800529c <HAL_UART_Init>
 8002b6c:	1e03      	subs	r3, r0, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002b70:	f7ff fccc 	bl	800250c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b74:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <MX_USART1_UART_Init+0x94>)
 8002b76:	2100      	movs	r1, #0
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f004 fa47 	bl	800700c <HAL_UARTEx_SetTxFifoThreshold>
 8002b7e:	1e03      	subs	r3, r0, #0
 8002b80:	d001      	beq.n	8002b86 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002b82:	f7ff fcc3 	bl	800250c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b86:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <MX_USART1_UART_Init+0x94>)
 8002b88:	2100      	movs	r1, #0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f004 fa7e 	bl	800708c <HAL_UARTEx_SetRxFifoThreshold>
 8002b90:	1e03      	subs	r3, r0, #0
 8002b92:	d001      	beq.n	8002b98 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b94:	f7ff fcba 	bl	800250c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <MX_USART1_UART_Init+0x94>)
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f004 f9fc 	bl	8006f98 <HAL_UARTEx_DisableFifoMode>
 8002ba0:	1e03      	subs	r3, r0, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002ba4:	f7ff fcb2 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ba8:	46c0      	nop			; (mov r8, r8)
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	200000e4 	.word	0x200000e4
 8002bb4:	40013800 	.word	0x40013800

08002bb8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bbc:	4b16      	ldr	r3, [pc, #88]	; (8002c18 <MX_USART2_UART_Init+0x60>)
 8002bbe:	4a17      	ldr	r2, [pc, #92]	; (8002c1c <MX_USART2_UART_Init+0x64>)
 8002bc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <MX_USART2_UART_Init+0x60>)
 8002bc4:	22e1      	movs	r2, #225	; 0xe1
 8002bc6:	0252      	lsls	r2, r2, #9
 8002bc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bca:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <MX_USART2_UART_Init+0x60>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bd0:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <MX_USART2_UART_Init+0x60>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bd6:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <MX_USART2_UART_Init+0x60>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <MX_USART2_UART_Init+0x60>)
 8002bde:	220c      	movs	r2, #12
 8002be0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002be2:	4b0d      	ldr	r3, [pc, #52]	; (8002c18 <MX_USART2_UART_Init+0x60>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <MX_USART2_UART_Init+0x60>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <MX_USART2_UART_Init+0x60>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bf4:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <MX_USART2_UART_Init+0x60>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bfa:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <MX_USART2_UART_Init+0x60>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <MX_USART2_UART_Init+0x60>)
 8002c02:	0018      	movs	r0, r3
 8002c04:	f002 fb4a 	bl	800529c <HAL_UART_Init>
 8002c08:	1e03      	subs	r3, r0, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002c0c:	f7ff fc7e 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c10:	46c0      	nop			; (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	20000178 	.word	0x20000178
 8002c1c:	40004400 	.word	0x40004400

08002c20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b097      	sub	sp, #92	; 0x5c
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c28:	2344      	movs	r3, #68	; 0x44
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	2314      	movs	r3, #20
 8002c30:	001a      	movs	r2, r3
 8002c32:	2100      	movs	r1, #0
 8002c34:	f004 faee 	bl	8007214 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c38:	241c      	movs	r4, #28
 8002c3a:	193b      	adds	r3, r7, r4
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	2328      	movs	r3, #40	; 0x28
 8002c40:	001a      	movs	r2, r3
 8002c42:	2100      	movs	r1, #0
 8002c44:	f004 fae6 	bl	8007214 <memset>
  if(uartHandle->Instance==USART1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a46      	ldr	r2, [pc, #280]	; (8002d68 <HAL_UART_MspInit+0x148>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d148      	bne.n	8002ce4 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c52:	193b      	adds	r3, r7, r4
 8002c54:	2201      	movs	r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002c58:	193b      	adds	r3, r7, r4
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c5e:	193b      	adds	r3, r7, r4
 8002c60:	0018      	movs	r0, r3
 8002c62:	f001 f955 	bl	8003f10 <HAL_RCCEx_PeriphCLKConfig>
 8002c66:	1e03      	subs	r3, r0, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002c6a:	f7ff fc4f 	bl	800250c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c6e:	4b3f      	ldr	r3, [pc, #252]	; (8002d6c <HAL_UART_MspInit+0x14c>)
 8002c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c72:	4b3e      	ldr	r3, [pc, #248]	; (8002d6c <HAL_UART_MspInit+0x14c>)
 8002c74:	2180      	movs	r1, #128	; 0x80
 8002c76:	01c9      	lsls	r1, r1, #7
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40
 8002c7c:	4b3b      	ldr	r3, [pc, #236]	; (8002d6c <HAL_UART_MspInit+0x14c>)
 8002c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c80:	2380      	movs	r3, #128	; 0x80
 8002c82:	01db      	lsls	r3, r3, #7
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
 8002c88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8a:	4b38      	ldr	r3, [pc, #224]	; (8002d6c <HAL_UART_MspInit+0x14c>)
 8002c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c8e:	4b37      	ldr	r3, [pc, #220]	; (8002d6c <HAL_UART_MspInit+0x14c>)
 8002c90:	2101      	movs	r1, #1
 8002c92:	430a      	orrs	r2, r1
 8002c94:	635a      	str	r2, [r3, #52]	; 0x34
 8002c96:	4b35      	ldr	r3, [pc, #212]	; (8002d6c <HAL_UART_MspInit+0x14c>)
 8002c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ca2:	2144      	movs	r1, #68	; 0x44
 8002ca4:	187b      	adds	r3, r7, r1
 8002ca6:	22c0      	movs	r2, #192	; 0xc0
 8002ca8:	00d2      	lsls	r2, r2, #3
 8002caa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cac:	187b      	adds	r3, r7, r1
 8002cae:	2202      	movs	r2, #2
 8002cb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	187b      	adds	r3, r7, r1
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cb8:	187b      	adds	r3, r7, r1
 8002cba:	2202      	movs	r2, #2
 8002cbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002cbe:	187b      	adds	r3, r7, r1
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc4:	187a      	adds	r2, r7, r1
 8002cc6:	23a0      	movs	r3, #160	; 0xa0
 8002cc8:	05db      	lsls	r3, r3, #23
 8002cca:	0011      	movs	r1, r2
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f000 faab 	bl	8003228 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	201b      	movs	r0, #27
 8002cd8:	f000 f9a8 	bl	800302c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cdc:	201b      	movs	r0, #27
 8002cde:	f000 f9ba 	bl	8003056 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ce2:	e03d      	b.n	8002d60 <HAL_UART_MspInit+0x140>
  else if(uartHandle->Instance==USART2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a21      	ldr	r2, [pc, #132]	; (8002d70 <HAL_UART_MspInit+0x150>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d138      	bne.n	8002d60 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cee:	4b1f      	ldr	r3, [pc, #124]	; (8002d6c <HAL_UART_MspInit+0x14c>)
 8002cf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cf2:	4b1e      	ldr	r3, [pc, #120]	; (8002d6c <HAL_UART_MspInit+0x14c>)
 8002cf4:	2180      	movs	r1, #128	; 0x80
 8002cf6:	0289      	lsls	r1, r1, #10
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <HAL_UART_MspInit+0x14c>)
 8002cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d00:	2380      	movs	r3, #128	; 0x80
 8002d02:	029b      	lsls	r3, r3, #10
 8002d04:	4013      	ands	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0a:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <HAL_UART_MspInit+0x14c>)
 8002d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d0e:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <HAL_UART_MspInit+0x14c>)
 8002d10:	2101      	movs	r1, #1
 8002d12:	430a      	orrs	r2, r1
 8002d14:	635a      	str	r2, [r3, #52]	; 0x34
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <HAL_UART_MspInit+0x14c>)
 8002d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8002d22:	2144      	movs	r1, #68	; 0x44
 8002d24:	187b      	adds	r3, r7, r1
 8002d26:	220c      	movs	r2, #12
 8002d28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2a:	187b      	adds	r3, r7, r1
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d30:	187b      	adds	r3, r7, r1
 8002d32:	2201      	movs	r2, #1
 8002d34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d36:	187b      	adds	r3, r7, r1
 8002d38:	2202      	movs	r2, #2
 8002d3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002d3c:	187b      	adds	r3, r7, r1
 8002d3e:	2201      	movs	r2, #1
 8002d40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d42:	187a      	adds	r2, r7, r1
 8002d44:	23a0      	movs	r3, #160	; 0xa0
 8002d46:	05db      	lsls	r3, r3, #23
 8002d48:	0011      	movs	r1, r2
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f000 fa6c 	bl	8003228 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002d50:	2200      	movs	r2, #0
 8002d52:	2100      	movs	r1, #0
 8002d54:	201c      	movs	r0, #28
 8002d56:	f000 f969 	bl	800302c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d5a:	201c      	movs	r0, #28
 8002d5c:	f000 f97b 	bl	8003056 <HAL_NVIC_EnableIRQ>
}
 8002d60:	46c0      	nop			; (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b017      	add	sp, #92	; 0x5c
 8002d66:	bd90      	pop	{r4, r7, pc}
 8002d68:	40013800 	.word	0x40013800
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40004400 	.word	0x40004400

08002d74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d74:	480d      	ldr	r0, [pc, #52]	; (8002dac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d78:	f7ff fc22 	bl	80025c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d7c:	480c      	ldr	r0, [pc, #48]	; (8002db0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d7e:	490d      	ldr	r1, [pc, #52]	; (8002db4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d80:	4a0d      	ldr	r2, [pc, #52]	; (8002db8 <LoopForever+0xe>)
  movs r3, #0
 8002d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d84:	e002      	b.n	8002d8c <LoopCopyDataInit>

08002d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d8a:	3304      	adds	r3, #4

08002d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d90:	d3f9      	bcc.n	8002d86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d92:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d94:	4c0a      	ldr	r4, [pc, #40]	; (8002dc0 <LoopForever+0x16>)
  movs r3, #0
 8002d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d98:	e001      	b.n	8002d9e <LoopFillZerobss>

08002d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d9c:	3204      	adds	r2, #4

08002d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da0:	d3fb      	bcc.n	8002d9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002da2:	f004 fa13 	bl	80071cc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002da6:	f7ff f8bf 	bl	8001f28 <main>

08002daa <LoopForever>:

LoopForever:
  b LoopForever
 8002daa:	e7fe      	b.n	8002daa <LoopForever>
  ldr   r0, =_estack
 8002dac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002db4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002db8:	08007368 	.word	0x08007368
  ldr r2, =_sbss
 8002dbc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002dc0:	20000210 	.word	0x20000210

08002dc4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dc4:	e7fe      	b.n	8002dc4 <ADC1_IRQHandler>
	...

08002dc8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dce:	1dfb      	adds	r3, r7, #7
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_Init+0x3c>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <HAL_Init+0x3c>)
 8002dda:	2180      	movs	r1, #128	; 0x80
 8002ddc:	0049      	lsls	r1, r1, #1
 8002dde:	430a      	orrs	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002de2:	2000      	movs	r0, #0
 8002de4:	f000 f810 	bl	8002e08 <HAL_InitTick>
 8002de8:	1e03      	subs	r3, r0, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002dec:	1dfb      	adds	r3, r7, #7
 8002dee:	2201      	movs	r2, #1
 8002df0:	701a      	strb	r2, [r3, #0]
 8002df2:	e001      	b.n	8002df8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002df4:	f7ff fb90 	bl	8002518 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002df8:	1dfb      	adds	r3, r7, #7
 8002dfa:	781b      	ldrb	r3, [r3, #0]
}
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b002      	add	sp, #8
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40022000 	.word	0x40022000

08002e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e10:	230f      	movs	r3, #15
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002e18:	4b1d      	ldr	r3, [pc, #116]	; (8002e90 <HAL_InitTick+0x88>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d02b      	beq.n	8002e78 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002e20:	4b1c      	ldr	r3, [pc, #112]	; (8002e94 <HAL_InitTick+0x8c>)
 8002e22:	681c      	ldr	r4, [r3, #0]
 8002e24:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <HAL_InitTick+0x88>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	0019      	movs	r1, r3
 8002e2a:	23fa      	movs	r3, #250	; 0xfa
 8002e2c:	0098      	lsls	r0, r3, #2
 8002e2e:	f7fd f969 	bl	8000104 <__udivsi3>
 8002e32:	0003      	movs	r3, r0
 8002e34:	0019      	movs	r1, r3
 8002e36:	0020      	movs	r0, r4
 8002e38:	f7fd f964 	bl	8000104 <__udivsi3>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f000 f919 	bl	8003076 <HAL_SYSTICK_Config>
 8002e44:	1e03      	subs	r3, r0, #0
 8002e46:	d112      	bne.n	8002e6e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d80a      	bhi.n	8002e64 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	2301      	movs	r3, #1
 8002e52:	425b      	negs	r3, r3
 8002e54:	2200      	movs	r2, #0
 8002e56:	0018      	movs	r0, r3
 8002e58:	f000 f8e8 	bl	800302c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e5c:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <HAL_InitTick+0x90>)
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	e00d      	b.n	8002e80 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002e64:	230f      	movs	r3, #15
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	2201      	movs	r2, #1
 8002e6a:	701a      	strb	r2, [r3, #0]
 8002e6c:	e008      	b.n	8002e80 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e6e:	230f      	movs	r3, #15
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]
 8002e76:	e003      	b.n	8002e80 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e78:	230f      	movs	r3, #15
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002e80:	230f      	movs	r3, #15
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	781b      	ldrb	r3, [r3, #0]
}
 8002e86:	0018      	movs	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b005      	add	sp, #20
 8002e8c:	bd90      	pop	{r4, r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	20000008 	.word	0x20000008
 8002e94:	20000000 	.word	0x20000000
 8002e98:	20000004 	.word	0x20000004

08002e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_IncTick+0x1c>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	001a      	movs	r2, r3
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_IncTick+0x20>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	18d2      	adds	r2, r2, r3
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <HAL_IncTick+0x20>)
 8002eae:	601a      	str	r2, [r3, #0]
}
 8002eb0:	46c0      	nop			; (mov r8, r8)
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	20000008 	.word	0x20000008
 8002ebc:	2000020c 	.word	0x2000020c

08002ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ec4:	4b02      	ldr	r3, [pc, #8]	; (8002ed0 <HAL_GetTick+0x10>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	0018      	movs	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	2000020c 	.word	0x2000020c

08002ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	0002      	movs	r2, r0
 8002edc:	1dfb      	adds	r3, r7, #7
 8002ede:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ee0:	1dfb      	adds	r3, r7, #7
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b7f      	cmp	r3, #127	; 0x7f
 8002ee6:	d809      	bhi.n	8002efc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee8:	1dfb      	adds	r3, r7, #7
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	001a      	movs	r2, r3
 8002eee:	231f      	movs	r3, #31
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <__NVIC_EnableIRQ+0x30>)
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	4091      	lsls	r1, r2
 8002ef8:	000a      	movs	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002efc:	46c0      	nop			; (mov r8, r8)
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b002      	add	sp, #8
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	e000e100 	.word	0xe000e100

08002f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	0002      	movs	r2, r0
 8002f10:	6039      	str	r1, [r7, #0]
 8002f12:	1dfb      	adds	r3, r7, #7
 8002f14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f16:	1dfb      	adds	r3, r7, #7
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f1c:	d828      	bhi.n	8002f70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f1e:	4a2f      	ldr	r2, [pc, #188]	; (8002fdc <__NVIC_SetPriority+0xd4>)
 8002f20:	1dfb      	adds	r3, r7, #7
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	b25b      	sxtb	r3, r3
 8002f26:	089b      	lsrs	r3, r3, #2
 8002f28:	33c0      	adds	r3, #192	; 0xc0
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	589b      	ldr	r3, [r3, r2]
 8002f2e:	1dfa      	adds	r2, r7, #7
 8002f30:	7812      	ldrb	r2, [r2, #0]
 8002f32:	0011      	movs	r1, r2
 8002f34:	2203      	movs	r2, #3
 8002f36:	400a      	ands	r2, r1
 8002f38:	00d2      	lsls	r2, r2, #3
 8002f3a:	21ff      	movs	r1, #255	; 0xff
 8002f3c:	4091      	lsls	r1, r2
 8002f3e:	000a      	movs	r2, r1
 8002f40:	43d2      	mvns	r2, r2
 8002f42:	401a      	ands	r2, r3
 8002f44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	019b      	lsls	r3, r3, #6
 8002f4a:	22ff      	movs	r2, #255	; 0xff
 8002f4c:	401a      	ands	r2, r3
 8002f4e:	1dfb      	adds	r3, r7, #7
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	0018      	movs	r0, r3
 8002f54:	2303      	movs	r3, #3
 8002f56:	4003      	ands	r3, r0
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f5c:	481f      	ldr	r0, [pc, #124]	; (8002fdc <__NVIC_SetPriority+0xd4>)
 8002f5e:	1dfb      	adds	r3, r7, #7
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	b25b      	sxtb	r3, r3
 8002f64:	089b      	lsrs	r3, r3, #2
 8002f66:	430a      	orrs	r2, r1
 8002f68:	33c0      	adds	r3, #192	; 0xc0
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f6e:	e031      	b.n	8002fd4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f70:	4a1b      	ldr	r2, [pc, #108]	; (8002fe0 <__NVIC_SetPriority+0xd8>)
 8002f72:	1dfb      	adds	r3, r7, #7
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	0019      	movs	r1, r3
 8002f78:	230f      	movs	r3, #15
 8002f7a:	400b      	ands	r3, r1
 8002f7c:	3b08      	subs	r3, #8
 8002f7e:	089b      	lsrs	r3, r3, #2
 8002f80:	3306      	adds	r3, #6
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	18d3      	adds	r3, r2, r3
 8002f86:	3304      	adds	r3, #4
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	1dfa      	adds	r2, r7, #7
 8002f8c:	7812      	ldrb	r2, [r2, #0]
 8002f8e:	0011      	movs	r1, r2
 8002f90:	2203      	movs	r2, #3
 8002f92:	400a      	ands	r2, r1
 8002f94:	00d2      	lsls	r2, r2, #3
 8002f96:	21ff      	movs	r1, #255	; 0xff
 8002f98:	4091      	lsls	r1, r2
 8002f9a:	000a      	movs	r2, r1
 8002f9c:	43d2      	mvns	r2, r2
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	019b      	lsls	r3, r3, #6
 8002fa6:	22ff      	movs	r2, #255	; 0xff
 8002fa8:	401a      	ands	r2, r3
 8002faa:	1dfb      	adds	r3, r7, #7
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	4003      	ands	r3, r0
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fb8:	4809      	ldr	r0, [pc, #36]	; (8002fe0 <__NVIC_SetPriority+0xd8>)
 8002fba:	1dfb      	adds	r3, r7, #7
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	001c      	movs	r4, r3
 8002fc0:	230f      	movs	r3, #15
 8002fc2:	4023      	ands	r3, r4
 8002fc4:	3b08      	subs	r3, #8
 8002fc6:	089b      	lsrs	r3, r3, #2
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	3306      	adds	r3, #6
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	18c3      	adds	r3, r0, r3
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	601a      	str	r2, [r3, #0]
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b003      	add	sp, #12
 8002fda:	bd90      	pop	{r4, r7, pc}
 8002fdc:	e000e100 	.word	0xe000e100
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	1e5a      	subs	r2, r3, #1
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	045b      	lsls	r3, r3, #17
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d301      	bcc.n	8002ffc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e010      	b.n	800301e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <SysTick_Config+0x44>)
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	3a01      	subs	r2, #1
 8003002:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003004:	2301      	movs	r3, #1
 8003006:	425b      	negs	r3, r3
 8003008:	2103      	movs	r1, #3
 800300a:	0018      	movs	r0, r3
 800300c:	f7ff ff7c 	bl	8002f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <SysTick_Config+0x44>)
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003016:	4b04      	ldr	r3, [pc, #16]	; (8003028 <SysTick_Config+0x44>)
 8003018:	2207      	movs	r2, #7
 800301a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800301c:	2300      	movs	r3, #0
}
 800301e:	0018      	movs	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	b002      	add	sp, #8
 8003024:	bd80      	pop	{r7, pc}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	e000e010 	.word	0xe000e010

0800302c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	210f      	movs	r1, #15
 8003038:	187b      	adds	r3, r7, r1
 800303a:	1c02      	adds	r2, r0, #0
 800303c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	187b      	adds	r3, r7, r1
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	b25b      	sxtb	r3, r3
 8003046:	0011      	movs	r1, r2
 8003048:	0018      	movs	r0, r3
 800304a:	f7ff ff5d 	bl	8002f08 <__NVIC_SetPriority>
}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	46bd      	mov	sp, r7
 8003052:	b004      	add	sp, #16
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	0002      	movs	r2, r0
 800305e:	1dfb      	adds	r3, r7, #7
 8003060:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003062:	1dfb      	adds	r3, r7, #7
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	b25b      	sxtb	r3, r3
 8003068:	0018      	movs	r0, r3
 800306a:	f7ff ff33 	bl	8002ed4 <__NVIC_EnableIRQ>
}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	46bd      	mov	sp, r7
 8003072:	b002      	add	sp, #8
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	0018      	movs	r0, r3
 8003082:	f7ff ffaf 	bl	8002fe4 <SysTick_Config>
 8003086:	0003      	movs	r3, r0
}
 8003088:	0018      	movs	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	b002      	add	sp, #8
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e050      	b.n	8003144 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2225      	movs	r2, #37	; 0x25
 80030a6:	5c9b      	ldrb	r3, [r3, r2]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d008      	beq.n	80030c0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2204      	movs	r2, #4
 80030b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2224      	movs	r2, #36	; 0x24
 80030b8:	2100      	movs	r1, #0
 80030ba:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e041      	b.n	8003144 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	210e      	movs	r1, #14
 80030cc:	438a      	bics	r2, r1
 80030ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	491c      	ldr	r1, [pc, #112]	; (800314c <HAL_DMA_Abort+0xbc>)
 80030dc:	400a      	ands	r2, r1
 80030de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2101      	movs	r1, #1
 80030ec:	438a      	bics	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80030f0:	4b17      	ldr	r3, [pc, #92]	; (8003150 <HAL_DMA_Abort+0xc0>)
 80030f2:	6859      	ldr	r1, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	221c      	movs	r2, #28
 80030fa:	4013      	ands	r3, r2
 80030fc:	2201      	movs	r2, #1
 80030fe:	409a      	lsls	r2, r3
 8003100:	4b13      	ldr	r3, [pc, #76]	; (8003150 <HAL_DMA_Abort+0xc0>)
 8003102:	430a      	orrs	r2, r1
 8003104:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800310e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00c      	beq.n	8003132 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003122:	490a      	ldr	r1, [pc, #40]	; (800314c <HAL_DMA_Abort+0xbc>)
 8003124:	400a      	ands	r2, r1
 8003126:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003130:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2225      	movs	r2, #37	; 0x25
 8003136:	2101      	movs	r1, #1
 8003138:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2224      	movs	r2, #36	; 0x24
 800313e:	2100      	movs	r1, #0
 8003140:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	0018      	movs	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	b002      	add	sp, #8
 800314a:	bd80      	pop	{r7, pc}
 800314c:	fffffeff 	.word	0xfffffeff
 8003150:	40020000 	.word	0x40020000

08003154 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800315c:	210f      	movs	r1, #15
 800315e:	187b      	adds	r3, r7, r1
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2225      	movs	r2, #37	; 0x25
 8003168:	5c9b      	ldrb	r3, [r3, r2]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d006      	beq.n	800317e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2204      	movs	r2, #4
 8003174:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003176:	187b      	adds	r3, r7, r1
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	e049      	b.n	8003212 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	210e      	movs	r1, #14
 800318a:	438a      	bics	r2, r1
 800318c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2101      	movs	r1, #1
 800319a:	438a      	bics	r2, r1
 800319c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a8:	491d      	ldr	r1, [pc, #116]	; (8003220 <HAL_DMA_Abort_IT+0xcc>)
 80031aa:	400a      	ands	r2, r1
 80031ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80031ae:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <HAL_DMA_Abort_IT+0xd0>)
 80031b0:	6859      	ldr	r1, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	221c      	movs	r2, #28
 80031b8:	4013      	ands	r3, r2
 80031ba:	2201      	movs	r2, #1
 80031bc:	409a      	lsls	r2, r3
 80031be:	4b19      	ldr	r3, [pc, #100]	; (8003224 <HAL_DMA_Abort_IT+0xd0>)
 80031c0:	430a      	orrs	r2, r1
 80031c2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80031cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00c      	beq.n	80031f0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e0:	490f      	ldr	r1, [pc, #60]	; (8003220 <HAL_DMA_Abort_IT+0xcc>)
 80031e2:	400a      	ands	r2, r1
 80031e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80031ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2225      	movs	r2, #37	; 0x25
 80031f4:	2101      	movs	r1, #1
 80031f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2224      	movs	r2, #36	; 0x24
 80031fc:	2100      	movs	r1, #0
 80031fe:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003204:	2b00      	cmp	r3, #0
 8003206:	d004      	beq.n	8003212 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	0010      	movs	r0, r2
 8003210:	4798      	blx	r3
    }
  }
  return status;
 8003212:	230f      	movs	r3, #15
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	781b      	ldrb	r3, [r3, #0]
}
 8003218:	0018      	movs	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	b004      	add	sp, #16
 800321e:	bd80      	pop	{r7, pc}
 8003220:	fffffeff 	.word	0xfffffeff
 8003224:	40020000 	.word	0x40020000

08003228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003236:	e147      	b.n	80034c8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2101      	movs	r1, #1
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	4091      	lsls	r1, r2
 8003242:	000a      	movs	r2, r1
 8003244:	4013      	ands	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d100      	bne.n	8003250 <HAL_GPIO_Init+0x28>
 800324e:	e138      	b.n	80034c2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2203      	movs	r2, #3
 8003256:	4013      	ands	r3, r2
 8003258:	2b01      	cmp	r3, #1
 800325a:	d005      	beq.n	8003268 <HAL_GPIO_Init+0x40>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2203      	movs	r2, #3
 8003262:	4013      	ands	r3, r2
 8003264:	2b02      	cmp	r3, #2
 8003266:	d130      	bne.n	80032ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	2203      	movs	r2, #3
 8003274:	409a      	lsls	r2, r3
 8003276:	0013      	movs	r3, r2
 8003278:	43da      	mvns	r2, r3
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4013      	ands	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	409a      	lsls	r2, r3
 800328a:	0013      	movs	r3, r2
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800329e:	2201      	movs	r2, #1
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	409a      	lsls	r2, r3
 80032a4:	0013      	movs	r3, r2
 80032a6:	43da      	mvns	r2, r3
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4013      	ands	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	091b      	lsrs	r3, r3, #4
 80032b4:	2201      	movs	r2, #1
 80032b6:	401a      	ands	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	409a      	lsls	r2, r3
 80032bc:	0013      	movs	r3, r2
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2203      	movs	r2, #3
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b03      	cmp	r3, #3
 80032d4:	d017      	beq.n	8003306 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	2203      	movs	r2, #3
 80032e2:	409a      	lsls	r2, r3
 80032e4:	0013      	movs	r3, r2
 80032e6:	43da      	mvns	r2, r3
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4013      	ands	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	409a      	lsls	r2, r3
 80032f8:	0013      	movs	r3, r2
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2203      	movs	r2, #3
 800330c:	4013      	ands	r3, r2
 800330e:	2b02      	cmp	r3, #2
 8003310:	d123      	bne.n	800335a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	08da      	lsrs	r2, r3, #3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3208      	adds	r2, #8
 800331a:	0092      	lsls	r2, r2, #2
 800331c:	58d3      	ldr	r3, [r2, r3]
 800331e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2207      	movs	r2, #7
 8003324:	4013      	ands	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	220f      	movs	r2, #15
 800332a:	409a      	lsls	r2, r3
 800332c:	0013      	movs	r3, r2
 800332e:	43da      	mvns	r2, r3
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4013      	ands	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	691a      	ldr	r2, [r3, #16]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2107      	movs	r1, #7
 800333e:	400b      	ands	r3, r1
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	409a      	lsls	r2, r3
 8003344:	0013      	movs	r3, r2
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	08da      	lsrs	r2, r3, #3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3208      	adds	r2, #8
 8003354:	0092      	lsls	r2, r2, #2
 8003356:	6939      	ldr	r1, [r7, #16]
 8003358:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	2203      	movs	r2, #3
 8003366:	409a      	lsls	r2, r3
 8003368:	0013      	movs	r3, r2
 800336a:	43da      	mvns	r2, r3
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2203      	movs	r2, #3
 8003378:	401a      	ands	r2, r3
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	409a      	lsls	r2, r3
 8003380:	0013      	movs	r3, r2
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	23c0      	movs	r3, #192	; 0xc0
 8003394:	029b      	lsls	r3, r3, #10
 8003396:	4013      	ands	r3, r2
 8003398:	d100      	bne.n	800339c <HAL_GPIO_Init+0x174>
 800339a:	e092      	b.n	80034c2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800339c:	4a50      	ldr	r2, [pc, #320]	; (80034e0 <HAL_GPIO_Init+0x2b8>)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	089b      	lsrs	r3, r3, #2
 80033a2:	3318      	adds	r3, #24
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	589b      	ldr	r3, [r3, r2]
 80033a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2203      	movs	r2, #3
 80033ae:	4013      	ands	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	220f      	movs	r2, #15
 80033b4:	409a      	lsls	r2, r3
 80033b6:	0013      	movs	r3, r2
 80033b8:	43da      	mvns	r2, r3
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	4013      	ands	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	23a0      	movs	r3, #160	; 0xa0
 80033c4:	05db      	lsls	r3, r3, #23
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d013      	beq.n	80033f2 <HAL_GPIO_Init+0x1ca>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a45      	ldr	r2, [pc, #276]	; (80034e4 <HAL_GPIO_Init+0x2bc>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00d      	beq.n	80033ee <HAL_GPIO_Init+0x1c6>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a44      	ldr	r2, [pc, #272]	; (80034e8 <HAL_GPIO_Init+0x2c0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d007      	beq.n	80033ea <HAL_GPIO_Init+0x1c2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a43      	ldr	r2, [pc, #268]	; (80034ec <HAL_GPIO_Init+0x2c4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d101      	bne.n	80033e6 <HAL_GPIO_Init+0x1be>
 80033e2:	2303      	movs	r3, #3
 80033e4:	e006      	b.n	80033f4 <HAL_GPIO_Init+0x1cc>
 80033e6:	2305      	movs	r3, #5
 80033e8:	e004      	b.n	80033f4 <HAL_GPIO_Init+0x1cc>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e002      	b.n	80033f4 <HAL_GPIO_Init+0x1cc>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <HAL_GPIO_Init+0x1cc>
 80033f2:	2300      	movs	r3, #0
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	2103      	movs	r1, #3
 80033f8:	400a      	ands	r2, r1
 80033fa:	00d2      	lsls	r2, r2, #3
 80033fc:	4093      	lsls	r3, r2
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003404:	4936      	ldr	r1, [pc, #216]	; (80034e0 <HAL_GPIO_Init+0x2b8>)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	089b      	lsrs	r3, r3, #2
 800340a:	3318      	adds	r3, #24
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003412:	4b33      	ldr	r3, [pc, #204]	; (80034e0 <HAL_GPIO_Init+0x2b8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	43da      	mvns	r2, r3
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	4013      	ands	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	2380      	movs	r3, #128	; 0x80
 8003428:	035b      	lsls	r3, r3, #13
 800342a:	4013      	ands	r3, r2
 800342c:	d003      	beq.n	8003436 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4313      	orrs	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003436:	4b2a      	ldr	r3, [pc, #168]	; (80034e0 <HAL_GPIO_Init+0x2b8>)
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800343c:	4b28      	ldr	r3, [pc, #160]	; (80034e0 <HAL_GPIO_Init+0x2b8>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	43da      	mvns	r2, r3
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4013      	ands	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	2380      	movs	r3, #128	; 0x80
 8003452:	039b      	lsls	r3, r3, #14
 8003454:	4013      	ands	r3, r2
 8003456:	d003      	beq.n	8003460 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003460:	4b1f      	ldr	r3, [pc, #124]	; (80034e0 <HAL_GPIO_Init+0x2b8>)
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003466:	4a1e      	ldr	r2, [pc, #120]	; (80034e0 <HAL_GPIO_Init+0x2b8>)
 8003468:	2384      	movs	r3, #132	; 0x84
 800346a:	58d3      	ldr	r3, [r2, r3]
 800346c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	43da      	mvns	r2, r3
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4013      	ands	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	2380      	movs	r3, #128	; 0x80
 800347e:	029b      	lsls	r3, r3, #10
 8003480:	4013      	ands	r3, r2
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800348c:	4914      	ldr	r1, [pc, #80]	; (80034e0 <HAL_GPIO_Init+0x2b8>)
 800348e:	2284      	movs	r2, #132	; 0x84
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003494:	4a12      	ldr	r2, [pc, #72]	; (80034e0 <HAL_GPIO_Init+0x2b8>)
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	58d3      	ldr	r3, [r2, r3]
 800349a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	43da      	mvns	r2, r3
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	4013      	ands	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	2380      	movs	r3, #128	; 0x80
 80034ac:	025b      	lsls	r3, r3, #9
 80034ae:	4013      	ands	r3, r2
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034ba:	4909      	ldr	r1, [pc, #36]	; (80034e0 <HAL_GPIO_Init+0x2b8>)
 80034bc:	2280      	movs	r2, #128	; 0x80
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	3301      	adds	r3, #1
 80034c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	40da      	lsrs	r2, r3
 80034d0:	1e13      	subs	r3, r2, #0
 80034d2:	d000      	beq.n	80034d6 <HAL_GPIO_Init+0x2ae>
 80034d4:	e6b0      	b.n	8003238 <HAL_GPIO_Init+0x10>
  }
}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	46c0      	nop			; (mov r8, r8)
 80034da:	46bd      	mov	sp, r7
 80034dc:	b006      	add	sp, #24
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40021800 	.word	0x40021800
 80034e4:	50000400 	.word	0x50000400
 80034e8:	50000800 	.word	0x50000800
 80034ec:	50000c00 	.word	0x50000c00

080034f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80034f8:	4b19      	ldr	r3, [pc, #100]	; (8003560 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a19      	ldr	r2, [pc, #100]	; (8003564 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80034fe:	4013      	ands	r3, r2
 8003500:	0019      	movs	r1, r3
 8003502:	4b17      	ldr	r3, [pc, #92]	; (8003560 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	430a      	orrs	r2, r1
 8003508:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	2380      	movs	r3, #128	; 0x80
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	429a      	cmp	r2, r3
 8003512:	d11f      	bne.n	8003554 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003514:	4b14      	ldr	r3, [pc, #80]	; (8003568 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	0013      	movs	r3, r2
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	189b      	adds	r3, r3, r2
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	4912      	ldr	r1, [pc, #72]	; (800356c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003522:	0018      	movs	r0, r3
 8003524:	f7fc fdee 	bl	8000104 <__udivsi3>
 8003528:	0003      	movs	r3, r0
 800352a:	3301      	adds	r3, #1
 800352c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800352e:	e008      	b.n	8003542 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	3b01      	subs	r3, #1
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	e001      	b.n	8003542 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e009      	b.n	8003556 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003542:	4b07      	ldr	r3, [pc, #28]	; (8003560 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	2380      	movs	r3, #128	; 0x80
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	401a      	ands	r2, r3
 800354c:	2380      	movs	r3, #128	; 0x80
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	429a      	cmp	r2, r3
 8003552:	d0ed      	beq.n	8003530 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	0018      	movs	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	b004      	add	sp, #16
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	40007000 	.word	0x40007000
 8003564:	fffff9ff 	.word	0xfffff9ff
 8003568:	20000000 	.word	0x20000000
 800356c:	000f4240 	.word	0x000f4240

08003570 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003574:	4b03      	ldr	r3, [pc, #12]	; (8003584 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	23e0      	movs	r3, #224	; 0xe0
 800357a:	01db      	lsls	r3, r3, #7
 800357c:	4013      	ands	r3, r2
}
 800357e:	0018      	movs	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40021000 	.word	0x40021000

08003588 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e2fe      	b.n	8003b98 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2201      	movs	r2, #1
 80035a0:	4013      	ands	r3, r2
 80035a2:	d100      	bne.n	80035a6 <HAL_RCC_OscConfig+0x1e>
 80035a4:	e07c      	b.n	80036a0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035a6:	4bc3      	ldr	r3, [pc, #780]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2238      	movs	r2, #56	; 0x38
 80035ac:	4013      	ands	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035b0:	4bc0      	ldr	r3, [pc, #768]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	2203      	movs	r2, #3
 80035b6:	4013      	ands	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d102      	bne.n	80035c6 <HAL_RCC_OscConfig+0x3e>
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d002      	beq.n	80035cc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d10b      	bne.n	80035e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035cc:	4bb9      	ldr	r3, [pc, #740]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	029b      	lsls	r3, r3, #10
 80035d4:	4013      	ands	r3, r2
 80035d6:	d062      	beq.n	800369e <HAL_RCC_OscConfig+0x116>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d15e      	bne.n	800369e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e2d9      	b.n	8003b98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	2380      	movs	r3, #128	; 0x80
 80035ea:	025b      	lsls	r3, r3, #9
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d107      	bne.n	8003600 <HAL_RCC_OscConfig+0x78>
 80035f0:	4bb0      	ldr	r3, [pc, #704]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4baf      	ldr	r3, [pc, #700]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 80035f6:	2180      	movs	r1, #128	; 0x80
 80035f8:	0249      	lsls	r1, r1, #9
 80035fa:	430a      	orrs	r2, r1
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	e020      	b.n	8003642 <HAL_RCC_OscConfig+0xba>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	23a0      	movs	r3, #160	; 0xa0
 8003606:	02db      	lsls	r3, r3, #11
 8003608:	429a      	cmp	r2, r3
 800360a:	d10e      	bne.n	800362a <HAL_RCC_OscConfig+0xa2>
 800360c:	4ba9      	ldr	r3, [pc, #676]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4ba8      	ldr	r3, [pc, #672]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 8003612:	2180      	movs	r1, #128	; 0x80
 8003614:	02c9      	lsls	r1, r1, #11
 8003616:	430a      	orrs	r2, r1
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	4ba6      	ldr	r3, [pc, #664]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	4ba5      	ldr	r3, [pc, #660]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 8003620:	2180      	movs	r1, #128	; 0x80
 8003622:	0249      	lsls	r1, r1, #9
 8003624:	430a      	orrs	r2, r1
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	e00b      	b.n	8003642 <HAL_RCC_OscConfig+0xba>
 800362a:	4ba2      	ldr	r3, [pc, #648]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4ba1      	ldr	r3, [pc, #644]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 8003630:	49a1      	ldr	r1, [pc, #644]	; (80038b8 <HAL_RCC_OscConfig+0x330>)
 8003632:	400a      	ands	r2, r1
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	4b9f      	ldr	r3, [pc, #636]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	4b9e      	ldr	r3, [pc, #632]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 800363c:	499f      	ldr	r1, [pc, #636]	; (80038bc <HAL_RCC_OscConfig+0x334>)
 800363e:	400a      	ands	r2, r1
 8003640:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d014      	beq.n	8003674 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364a:	f7ff fc39 	bl	8002ec0 <HAL_GetTick>
 800364e:	0003      	movs	r3, r0
 8003650:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003654:	f7ff fc34 	bl	8002ec0 <HAL_GetTick>
 8003658:	0002      	movs	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b64      	cmp	r3, #100	; 0x64
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e298      	b.n	8003b98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003666:	4b93      	ldr	r3, [pc, #588]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	2380      	movs	r3, #128	; 0x80
 800366c:	029b      	lsls	r3, r3, #10
 800366e:	4013      	ands	r3, r2
 8003670:	d0f0      	beq.n	8003654 <HAL_RCC_OscConfig+0xcc>
 8003672:	e015      	b.n	80036a0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003674:	f7ff fc24 	bl	8002ec0 <HAL_GetTick>
 8003678:	0003      	movs	r3, r0
 800367a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800367e:	f7ff fc1f 	bl	8002ec0 <HAL_GetTick>
 8003682:	0002      	movs	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b64      	cmp	r3, #100	; 0x64
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e283      	b.n	8003b98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003690:	4b88      	ldr	r3, [pc, #544]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	029b      	lsls	r3, r3, #10
 8003698:	4013      	ands	r3, r2
 800369a:	d1f0      	bne.n	800367e <HAL_RCC_OscConfig+0xf6>
 800369c:	e000      	b.n	80036a0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800369e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2202      	movs	r2, #2
 80036a6:	4013      	ands	r3, r2
 80036a8:	d100      	bne.n	80036ac <HAL_RCC_OscConfig+0x124>
 80036aa:	e099      	b.n	80037e0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ac:	4b81      	ldr	r3, [pc, #516]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	2238      	movs	r2, #56	; 0x38
 80036b2:	4013      	ands	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036b6:	4b7f      	ldr	r3, [pc, #508]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	2203      	movs	r2, #3
 80036bc:	4013      	ands	r3, r2
 80036be:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2b10      	cmp	r3, #16
 80036c4:	d102      	bne.n	80036cc <HAL_RCC_OscConfig+0x144>
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d002      	beq.n	80036d2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d135      	bne.n	800373e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036d2:	4b78      	ldr	r3, [pc, #480]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	2380      	movs	r3, #128	; 0x80
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4013      	ands	r3, r2
 80036dc:	d005      	beq.n	80036ea <HAL_RCC_OscConfig+0x162>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e256      	b.n	8003b98 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ea:	4b72      	ldr	r3, [pc, #456]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	4a74      	ldr	r2, [pc, #464]	; (80038c0 <HAL_RCC_OscConfig+0x338>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	0019      	movs	r1, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	021a      	lsls	r2, r3, #8
 80036fa:	4b6e      	ldr	r3, [pc, #440]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 80036fc:	430a      	orrs	r2, r1
 80036fe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d112      	bne.n	800372c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003706:	4b6b      	ldr	r3, [pc, #428]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a6e      	ldr	r2, [pc, #440]	; (80038c4 <HAL_RCC_OscConfig+0x33c>)
 800370c:	4013      	ands	r3, r2
 800370e:	0019      	movs	r1, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	4b67      	ldr	r3, [pc, #412]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 8003716:	430a      	orrs	r2, r1
 8003718:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800371a:	4b66      	ldr	r3, [pc, #408]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	0adb      	lsrs	r3, r3, #11
 8003720:	2207      	movs	r2, #7
 8003722:	4013      	ands	r3, r2
 8003724:	4a68      	ldr	r2, [pc, #416]	; (80038c8 <HAL_RCC_OscConfig+0x340>)
 8003726:	40da      	lsrs	r2, r3
 8003728:	4b68      	ldr	r3, [pc, #416]	; (80038cc <HAL_RCC_OscConfig+0x344>)
 800372a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800372c:	4b68      	ldr	r3, [pc, #416]	; (80038d0 <HAL_RCC_OscConfig+0x348>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	0018      	movs	r0, r3
 8003732:	f7ff fb69 	bl	8002e08 <HAL_InitTick>
 8003736:	1e03      	subs	r3, r0, #0
 8003738:	d051      	beq.n	80037de <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e22c      	b.n	8003b98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d030      	beq.n	80037a8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003746:	4b5b      	ldr	r3, [pc, #364]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a5e      	ldr	r2, [pc, #376]	; (80038c4 <HAL_RCC_OscConfig+0x33c>)
 800374c:	4013      	ands	r3, r2
 800374e:	0019      	movs	r1, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	4b57      	ldr	r3, [pc, #348]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 8003756:	430a      	orrs	r2, r1
 8003758:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800375a:	4b56      	ldr	r3, [pc, #344]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	4b55      	ldr	r3, [pc, #340]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 8003760:	2180      	movs	r1, #128	; 0x80
 8003762:	0049      	lsls	r1, r1, #1
 8003764:	430a      	orrs	r2, r1
 8003766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003768:	f7ff fbaa 	bl	8002ec0 <HAL_GetTick>
 800376c:	0003      	movs	r3, r0
 800376e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003772:	f7ff fba5 	bl	8002ec0 <HAL_GetTick>
 8003776:	0002      	movs	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e209      	b.n	8003b98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003784:	4b4b      	ldr	r3, [pc, #300]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	2380      	movs	r3, #128	; 0x80
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	4013      	ands	r3, r2
 800378e:	d0f0      	beq.n	8003772 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003790:	4b48      	ldr	r3, [pc, #288]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	4a4a      	ldr	r2, [pc, #296]	; (80038c0 <HAL_RCC_OscConfig+0x338>)
 8003796:	4013      	ands	r3, r2
 8003798:	0019      	movs	r1, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	021a      	lsls	r2, r3, #8
 80037a0:	4b44      	ldr	r3, [pc, #272]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
 80037a6:	e01b      	b.n	80037e0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80037a8:	4b42      	ldr	r3, [pc, #264]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4b41      	ldr	r3, [pc, #260]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 80037ae:	4949      	ldr	r1, [pc, #292]	; (80038d4 <HAL_RCC_OscConfig+0x34c>)
 80037b0:	400a      	ands	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7ff fb84 	bl	8002ec0 <HAL_GetTick>
 80037b8:	0003      	movs	r3, r0
 80037ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037be:	f7ff fb7f 	bl	8002ec0 <HAL_GetTick>
 80037c2:	0002      	movs	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e1e3      	b.n	8003b98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037d0:	4b38      	ldr	r3, [pc, #224]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	2380      	movs	r3, #128	; 0x80
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4013      	ands	r3, r2
 80037da:	d1f0      	bne.n	80037be <HAL_RCC_OscConfig+0x236>
 80037dc:	e000      	b.n	80037e0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2208      	movs	r2, #8
 80037e6:	4013      	ands	r3, r2
 80037e8:	d047      	beq.n	800387a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80037ea:	4b32      	ldr	r3, [pc, #200]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2238      	movs	r2, #56	; 0x38
 80037f0:	4013      	ands	r3, r2
 80037f2:	2b18      	cmp	r3, #24
 80037f4:	d10a      	bne.n	800380c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80037f6:	4b2f      	ldr	r3, [pc, #188]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 80037f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fa:	2202      	movs	r2, #2
 80037fc:	4013      	ands	r3, r2
 80037fe:	d03c      	beq.n	800387a <HAL_RCC_OscConfig+0x2f2>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d138      	bne.n	800387a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e1c5      	b.n	8003b98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d019      	beq.n	8003848 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003814:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 8003816:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003818:	4b26      	ldr	r3, [pc, #152]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 800381a:	2101      	movs	r1, #1
 800381c:	430a      	orrs	r2, r1
 800381e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003820:	f7ff fb4e 	bl	8002ec0 <HAL_GetTick>
 8003824:	0003      	movs	r3, r0
 8003826:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800382a:	f7ff fb49 	bl	8002ec0 <HAL_GetTick>
 800382e:	0002      	movs	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e1ad      	b.n	8003b98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800383c:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 800383e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003840:	2202      	movs	r2, #2
 8003842:	4013      	ands	r3, r2
 8003844:	d0f1      	beq.n	800382a <HAL_RCC_OscConfig+0x2a2>
 8003846:	e018      	b.n	800387a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003848:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 800384a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800384c:	4b19      	ldr	r3, [pc, #100]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 800384e:	2101      	movs	r1, #1
 8003850:	438a      	bics	r2, r1
 8003852:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003854:	f7ff fb34 	bl	8002ec0 <HAL_GetTick>
 8003858:	0003      	movs	r3, r0
 800385a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800385e:	f7ff fb2f 	bl	8002ec0 <HAL_GetTick>
 8003862:	0002      	movs	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e193      	b.n	8003b98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003870:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 8003872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003874:	2202      	movs	r2, #2
 8003876:	4013      	ands	r3, r2
 8003878:	d1f1      	bne.n	800385e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2204      	movs	r2, #4
 8003880:	4013      	ands	r3, r2
 8003882:	d100      	bne.n	8003886 <HAL_RCC_OscConfig+0x2fe>
 8003884:	e0c6      	b.n	8003a14 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003886:	231f      	movs	r3, #31
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800388e:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2238      	movs	r2, #56	; 0x38
 8003894:	4013      	ands	r3, r2
 8003896:	2b20      	cmp	r3, #32
 8003898:	d11e      	bne.n	80038d8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800389a:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <HAL_RCC_OscConfig+0x32c>)
 800389c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389e:	2202      	movs	r2, #2
 80038a0:	4013      	ands	r3, r2
 80038a2:	d100      	bne.n	80038a6 <HAL_RCC_OscConfig+0x31e>
 80038a4:	e0b6      	b.n	8003a14 <HAL_RCC_OscConfig+0x48c>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d000      	beq.n	80038b0 <HAL_RCC_OscConfig+0x328>
 80038ae:	e0b1      	b.n	8003a14 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e171      	b.n	8003b98 <HAL_RCC_OscConfig+0x610>
 80038b4:	40021000 	.word	0x40021000
 80038b8:	fffeffff 	.word	0xfffeffff
 80038bc:	fffbffff 	.word	0xfffbffff
 80038c0:	ffff80ff 	.word	0xffff80ff
 80038c4:	ffffc7ff 	.word	0xffffc7ff
 80038c8:	00f42400 	.word	0x00f42400
 80038cc:	20000000 	.word	0x20000000
 80038d0:	20000004 	.word	0x20000004
 80038d4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038d8:	4bb1      	ldr	r3, [pc, #708]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 80038da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	055b      	lsls	r3, r3, #21
 80038e0:	4013      	ands	r3, r2
 80038e2:	d101      	bne.n	80038e8 <HAL_RCC_OscConfig+0x360>
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <HAL_RCC_OscConfig+0x362>
 80038e8:	2300      	movs	r3, #0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d011      	beq.n	8003912 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80038ee:	4bac      	ldr	r3, [pc, #688]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 80038f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038f2:	4bab      	ldr	r3, [pc, #684]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 80038f4:	2180      	movs	r1, #128	; 0x80
 80038f6:	0549      	lsls	r1, r1, #21
 80038f8:	430a      	orrs	r2, r1
 80038fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80038fc:	4ba8      	ldr	r3, [pc, #672]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 80038fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	055b      	lsls	r3, r3, #21
 8003904:	4013      	ands	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800390a:	231f      	movs	r3, #31
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	2201      	movs	r2, #1
 8003910:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003912:	4ba4      	ldr	r3, [pc, #656]	; (8003ba4 <HAL_RCC_OscConfig+0x61c>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	2380      	movs	r3, #128	; 0x80
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	4013      	ands	r3, r2
 800391c:	d11a      	bne.n	8003954 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800391e:	4ba1      	ldr	r3, [pc, #644]	; (8003ba4 <HAL_RCC_OscConfig+0x61c>)
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	4ba0      	ldr	r3, [pc, #640]	; (8003ba4 <HAL_RCC_OscConfig+0x61c>)
 8003924:	2180      	movs	r1, #128	; 0x80
 8003926:	0049      	lsls	r1, r1, #1
 8003928:	430a      	orrs	r2, r1
 800392a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800392c:	f7ff fac8 	bl	8002ec0 <HAL_GetTick>
 8003930:	0003      	movs	r3, r0
 8003932:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003936:	f7ff fac3 	bl	8002ec0 <HAL_GetTick>
 800393a:	0002      	movs	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e127      	b.n	8003b98 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003948:	4b96      	ldr	r3, [pc, #600]	; (8003ba4 <HAL_RCC_OscConfig+0x61c>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	2380      	movs	r3, #128	; 0x80
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	4013      	ands	r3, r2
 8003952:	d0f0      	beq.n	8003936 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d106      	bne.n	800396a <HAL_RCC_OscConfig+0x3e2>
 800395c:	4b90      	ldr	r3, [pc, #576]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 800395e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003960:	4b8f      	ldr	r3, [pc, #572]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003962:	2101      	movs	r1, #1
 8003964:	430a      	orrs	r2, r1
 8003966:	65da      	str	r2, [r3, #92]	; 0x5c
 8003968:	e01c      	b.n	80039a4 <HAL_RCC_OscConfig+0x41c>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2b05      	cmp	r3, #5
 8003970:	d10c      	bne.n	800398c <HAL_RCC_OscConfig+0x404>
 8003972:	4b8b      	ldr	r3, [pc, #556]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003974:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003976:	4b8a      	ldr	r3, [pc, #552]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003978:	2104      	movs	r1, #4
 800397a:	430a      	orrs	r2, r1
 800397c:	65da      	str	r2, [r3, #92]	; 0x5c
 800397e:	4b88      	ldr	r3, [pc, #544]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003980:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003982:	4b87      	ldr	r3, [pc, #540]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003984:	2101      	movs	r1, #1
 8003986:	430a      	orrs	r2, r1
 8003988:	65da      	str	r2, [r3, #92]	; 0x5c
 800398a:	e00b      	b.n	80039a4 <HAL_RCC_OscConfig+0x41c>
 800398c:	4b84      	ldr	r3, [pc, #528]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 800398e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003990:	4b83      	ldr	r3, [pc, #524]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003992:	2101      	movs	r1, #1
 8003994:	438a      	bics	r2, r1
 8003996:	65da      	str	r2, [r3, #92]	; 0x5c
 8003998:	4b81      	ldr	r3, [pc, #516]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 800399a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800399c:	4b80      	ldr	r3, [pc, #512]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 800399e:	2104      	movs	r1, #4
 80039a0:	438a      	bics	r2, r1
 80039a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d014      	beq.n	80039d6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7ff fa88 	bl	8002ec0 <HAL_GetTick>
 80039b0:	0003      	movs	r3, r0
 80039b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b4:	e009      	b.n	80039ca <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b6:	f7ff fa83 	bl	8002ec0 <HAL_GetTick>
 80039ba:	0002      	movs	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	4a79      	ldr	r2, [pc, #484]	; (8003ba8 <HAL_RCC_OscConfig+0x620>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e0e6      	b.n	8003b98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ca:	4b75      	ldr	r3, [pc, #468]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 80039cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ce:	2202      	movs	r2, #2
 80039d0:	4013      	ands	r3, r2
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x42e>
 80039d4:	e013      	b.n	80039fe <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d6:	f7ff fa73 	bl	8002ec0 <HAL_GetTick>
 80039da:	0003      	movs	r3, r0
 80039dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039de:	e009      	b.n	80039f4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e0:	f7ff fa6e 	bl	8002ec0 <HAL_GetTick>
 80039e4:	0002      	movs	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	4a6f      	ldr	r2, [pc, #444]	; (8003ba8 <HAL_RCC_OscConfig+0x620>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e0d1      	b.n	8003b98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039f4:	4b6a      	ldr	r3, [pc, #424]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 80039f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f8:	2202      	movs	r2, #2
 80039fa:	4013      	ands	r3, r2
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80039fe:	231f      	movs	r3, #31
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d105      	bne.n	8003a14 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003a08:	4b65      	ldr	r3, [pc, #404]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a0c:	4b64      	ldr	r3, [pc, #400]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003a0e:	4967      	ldr	r1, [pc, #412]	; (8003bac <HAL_RCC_OscConfig+0x624>)
 8003a10:	400a      	ands	r2, r1
 8003a12:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d100      	bne.n	8003a1e <HAL_RCC_OscConfig+0x496>
 8003a1c:	e0bb      	b.n	8003b96 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a1e:	4b60      	ldr	r3, [pc, #384]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2238      	movs	r2, #56	; 0x38
 8003a24:	4013      	ands	r3, r2
 8003a26:	2b10      	cmp	r3, #16
 8003a28:	d100      	bne.n	8003a2c <HAL_RCC_OscConfig+0x4a4>
 8003a2a:	e07b      	b.n	8003b24 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d156      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a34:	4b5a      	ldr	r3, [pc, #360]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	4b59      	ldr	r3, [pc, #356]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003a3a:	495d      	ldr	r1, [pc, #372]	; (8003bb0 <HAL_RCC_OscConfig+0x628>)
 8003a3c:	400a      	ands	r2, r1
 8003a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7ff fa3e 	bl	8002ec0 <HAL_GetTick>
 8003a44:	0003      	movs	r3, r0
 8003a46:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4a:	f7ff fa39 	bl	8002ec0 <HAL_GetTick>
 8003a4e:	0002      	movs	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e09d      	b.n	8003b98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a5c:	4b50      	ldr	r3, [pc, #320]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	2380      	movs	r3, #128	; 0x80
 8003a62:	049b      	lsls	r3, r3, #18
 8003a64:	4013      	ands	r3, r2
 8003a66:	d1f0      	bne.n	8003a4a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a68:	4b4d      	ldr	r3, [pc, #308]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	4a51      	ldr	r2, [pc, #324]	; (8003bb4 <HAL_RCC_OscConfig+0x62c>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	0019      	movs	r1, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1a      	ldr	r2, [r3, #32]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a94:	431a      	orrs	r2, r3
 8003a96:	4b42      	ldr	r3, [pc, #264]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a9c:	4b40      	ldr	r3, [pc, #256]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	4b3f      	ldr	r3, [pc, #252]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003aa2:	2180      	movs	r1, #128	; 0x80
 8003aa4:	0449      	lsls	r1, r1, #17
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003aaa:	4b3d      	ldr	r3, [pc, #244]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	4b3c      	ldr	r3, [pc, #240]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003ab0:	2180      	movs	r1, #128	; 0x80
 8003ab2:	0549      	lsls	r1, r1, #21
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7ff fa02 	bl	8002ec0 <HAL_GetTick>
 8003abc:	0003      	movs	r3, r0
 8003abe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac2:	f7ff f9fd 	bl	8002ec0 <HAL_GetTick>
 8003ac6:	0002      	movs	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e061      	b.n	8003b98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad4:	4b32      	ldr	r3, [pc, #200]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	2380      	movs	r3, #128	; 0x80
 8003ada:	049b      	lsls	r3, r3, #18
 8003adc:	4013      	ands	r3, r2
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
 8003ae0:	e059      	b.n	8003b96 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae2:	4b2f      	ldr	r3, [pc, #188]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	4b2e      	ldr	r3, [pc, #184]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003ae8:	4931      	ldr	r1, [pc, #196]	; (8003bb0 <HAL_RCC_OscConfig+0x628>)
 8003aea:	400a      	ands	r2, r1
 8003aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aee:	f7ff f9e7 	bl	8002ec0 <HAL_GetTick>
 8003af2:	0003      	movs	r3, r0
 8003af4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af8:	f7ff f9e2 	bl	8002ec0 <HAL_GetTick>
 8003afc:	0002      	movs	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e046      	b.n	8003b98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b0a:	4b25      	ldr	r3, [pc, #148]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	2380      	movs	r3, #128	; 0x80
 8003b10:	049b      	lsls	r3, r3, #18
 8003b12:	4013      	ands	r3, r2
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003b16:	4b22      	ldr	r3, [pc, #136]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	4b21      	ldr	r3, [pc, #132]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003b1c:	4926      	ldr	r1, [pc, #152]	; (8003bb8 <HAL_RCC_OscConfig+0x630>)
 8003b1e:	400a      	ands	r2, r1
 8003b20:	60da      	str	r2, [r3, #12]
 8003b22:	e038      	b.n	8003b96 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e033      	b.n	8003b98 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003b30:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <HAL_RCC_OscConfig+0x618>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2203      	movs	r2, #3
 8003b3a:	401a      	ands	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d126      	bne.n	8003b92 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2270      	movs	r2, #112	; 0x70
 8003b48:	401a      	ands	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d11f      	bne.n	8003b92 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	23fe      	movs	r3, #254	; 0xfe
 8003b56:	01db      	lsls	r3, r3, #7
 8003b58:	401a      	ands	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d116      	bne.n	8003b92 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	23f8      	movs	r3, #248	; 0xf8
 8003b68:	039b      	lsls	r3, r3, #14
 8003b6a:	401a      	ands	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d10e      	bne.n	8003b92 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	23e0      	movs	r3, #224	; 0xe0
 8003b78:	051b      	lsls	r3, r3, #20
 8003b7a:	401a      	ands	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d106      	bne.n	8003b92 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	0f5b      	lsrs	r3, r3, #29
 8003b88:	075a      	lsls	r2, r3, #29
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d001      	beq.n	8003b96 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	0018      	movs	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b008      	add	sp, #32
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40007000 	.word	0x40007000
 8003ba8:	00001388 	.word	0x00001388
 8003bac:	efffffff 	.word	0xefffffff
 8003bb0:	feffffff 	.word	0xfeffffff
 8003bb4:	11c1808c 	.word	0x11c1808c
 8003bb8:	eefefffc 	.word	0xeefefffc

08003bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0e9      	b.n	8003da4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd0:	4b76      	ldr	r3, [pc, #472]	; (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2207      	movs	r2, #7
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d91e      	bls.n	8003c1c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bde:	4b73      	ldr	r3, [pc, #460]	; (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2207      	movs	r2, #7
 8003be4:	4393      	bics	r3, r2
 8003be6:	0019      	movs	r1, r3
 8003be8:	4b70      	ldr	r3, [pc, #448]	; (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003bf0:	f7ff f966 	bl	8002ec0 <HAL_GetTick>
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003bf8:	e009      	b.n	8003c0e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bfa:	f7ff f961 	bl	8002ec0 <HAL_GetTick>
 8003bfe:	0002      	movs	r2, r0
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	4a6a      	ldr	r2, [pc, #424]	; (8003db0 <HAL_RCC_ClockConfig+0x1f4>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e0ca      	b.n	8003da4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c0e:	4b67      	ldr	r3, [pc, #412]	; (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2207      	movs	r2, #7
 8003c14:	4013      	ands	r3, r2
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d1ee      	bne.n	8003bfa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2202      	movs	r2, #2
 8003c22:	4013      	ands	r3, r2
 8003c24:	d015      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d006      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003c30:	4b60      	ldr	r3, [pc, #384]	; (8003db4 <HAL_RCC_ClockConfig+0x1f8>)
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	4b5f      	ldr	r3, [pc, #380]	; (8003db4 <HAL_RCC_ClockConfig+0x1f8>)
 8003c36:	21e0      	movs	r1, #224	; 0xe0
 8003c38:	01c9      	lsls	r1, r1, #7
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c3e:	4b5d      	ldr	r3, [pc, #372]	; (8003db4 <HAL_RCC_ClockConfig+0x1f8>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	4a5d      	ldr	r2, [pc, #372]	; (8003db8 <HAL_RCC_ClockConfig+0x1fc>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	0019      	movs	r1, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	4b59      	ldr	r3, [pc, #356]	; (8003db4 <HAL_RCC_ClockConfig+0x1f8>)
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2201      	movs	r2, #1
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d057      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d107      	bne.n	8003c74 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c64:	4b53      	ldr	r3, [pc, #332]	; (8003db4 <HAL_RCC_ClockConfig+0x1f8>)
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	2380      	movs	r3, #128	; 0x80
 8003c6a:	029b      	lsls	r3, r3, #10
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d12b      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e097      	b.n	8003da4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d107      	bne.n	8003c8c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c7c:	4b4d      	ldr	r3, [pc, #308]	; (8003db4 <HAL_RCC_ClockConfig+0x1f8>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	2380      	movs	r3, #128	; 0x80
 8003c82:	049b      	lsls	r3, r3, #18
 8003c84:	4013      	ands	r3, r2
 8003c86:	d11f      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e08b      	b.n	8003da4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d107      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c94:	4b47      	ldr	r3, [pc, #284]	; (8003db4 <HAL_RCC_ClockConfig+0x1f8>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	2380      	movs	r3, #128	; 0x80
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d113      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e07f      	b.n	8003da4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d106      	bne.n	8003cba <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cac:	4b41      	ldr	r3, [pc, #260]	; (8003db4 <HAL_RCC_ClockConfig+0x1f8>)
 8003cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	d108      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e074      	b.n	8003da4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cba:	4b3e      	ldr	r3, [pc, #248]	; (8003db4 <HAL_RCC_ClockConfig+0x1f8>)
 8003cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d101      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e06d      	b.n	8003da4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cc8:	4b3a      	ldr	r3, [pc, #232]	; (8003db4 <HAL_RCC_ClockConfig+0x1f8>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2207      	movs	r2, #7
 8003cce:	4393      	bics	r3, r2
 8003cd0:	0019      	movs	r1, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	4b37      	ldr	r3, [pc, #220]	; (8003db4 <HAL_RCC_ClockConfig+0x1f8>)
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cdc:	f7ff f8f0 	bl	8002ec0 <HAL_GetTick>
 8003ce0:	0003      	movs	r3, r0
 8003ce2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce4:	e009      	b.n	8003cfa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce6:	f7ff f8eb 	bl	8002ec0 <HAL_GetTick>
 8003cea:	0002      	movs	r2, r0
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	4a2f      	ldr	r2, [pc, #188]	; (8003db0 <HAL_RCC_ClockConfig+0x1f4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e054      	b.n	8003da4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfa:	4b2e      	ldr	r3, [pc, #184]	; (8003db4 <HAL_RCC_ClockConfig+0x1f8>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2238      	movs	r2, #56	; 0x38
 8003d00:	401a      	ands	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d1ec      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d0c:	4b27      	ldr	r3, [pc, #156]	; (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2207      	movs	r2, #7
 8003d12:	4013      	ands	r3, r2
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d21e      	bcs.n	8003d58 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1a:	4b24      	ldr	r3, [pc, #144]	; (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2207      	movs	r2, #7
 8003d20:	4393      	bics	r3, r2
 8003d22:	0019      	movs	r1, r3
 8003d24:	4b21      	ldr	r3, [pc, #132]	; (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d2c:	f7ff f8c8 	bl	8002ec0 <HAL_GetTick>
 8003d30:	0003      	movs	r3, r0
 8003d32:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d34:	e009      	b.n	8003d4a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d36:	f7ff f8c3 	bl	8002ec0 <HAL_GetTick>
 8003d3a:	0002      	movs	r2, r0
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	4a1b      	ldr	r2, [pc, #108]	; (8003db0 <HAL_RCC_ClockConfig+0x1f4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e02c      	b.n	8003da4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d4a:	4b18      	ldr	r3, [pc, #96]	; (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2207      	movs	r2, #7
 8003d50:	4013      	ands	r3, r2
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d1ee      	bne.n	8003d36 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2204      	movs	r2, #4
 8003d5e:	4013      	ands	r3, r2
 8003d60:	d009      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003d62:	4b14      	ldr	r3, [pc, #80]	; (8003db4 <HAL_RCC_ClockConfig+0x1f8>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	4a15      	ldr	r2, [pc, #84]	; (8003dbc <HAL_RCC_ClockConfig+0x200>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	0019      	movs	r1, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <HAL_RCC_ClockConfig+0x1f8>)
 8003d72:	430a      	orrs	r2, r1
 8003d74:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003d76:	f000 f829 	bl	8003dcc <HAL_RCC_GetSysClockFreq>
 8003d7a:	0001      	movs	r1, r0
 8003d7c:	4b0d      	ldr	r3, [pc, #52]	; (8003db4 <HAL_RCC_ClockConfig+0x1f8>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	0a1b      	lsrs	r3, r3, #8
 8003d82:	220f      	movs	r2, #15
 8003d84:	401a      	ands	r2, r3
 8003d86:	4b0e      	ldr	r3, [pc, #56]	; (8003dc0 <HAL_RCC_ClockConfig+0x204>)
 8003d88:	0092      	lsls	r2, r2, #2
 8003d8a:	58d3      	ldr	r3, [r2, r3]
 8003d8c:	221f      	movs	r2, #31
 8003d8e:	4013      	ands	r3, r2
 8003d90:	000a      	movs	r2, r1
 8003d92:	40da      	lsrs	r2, r3
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <HAL_RCC_ClockConfig+0x208>)
 8003d96:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCC_ClockConfig+0x20c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f7ff f833 	bl	8002e08 <HAL_InitTick>
 8003da2:	0003      	movs	r3, r0
}
 8003da4:	0018      	movs	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b004      	add	sp, #16
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40022000 	.word	0x40022000
 8003db0:	00001388 	.word	0x00001388
 8003db4:	40021000 	.word	0x40021000
 8003db8:	fffff0ff 	.word	0xfffff0ff
 8003dbc:	ffff8fff 	.word	0xffff8fff
 8003dc0:	0800727c 	.word	0x0800727c
 8003dc4:	20000000 	.word	0x20000000
 8003dc8:	20000004 	.word	0x20000004

08003dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dd2:	4b3c      	ldr	r3, [pc, #240]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2238      	movs	r2, #56	; 0x38
 8003dd8:	4013      	ands	r3, r2
 8003dda:	d10f      	bne.n	8003dfc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003ddc:	4b39      	ldr	r3, [pc, #228]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	0adb      	lsrs	r3, r3, #11
 8003de2:	2207      	movs	r2, #7
 8003de4:	4013      	ands	r3, r2
 8003de6:	2201      	movs	r2, #1
 8003de8:	409a      	lsls	r2, r3
 8003dea:	0013      	movs	r3, r2
 8003dec:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003dee:	6839      	ldr	r1, [r7, #0]
 8003df0:	4835      	ldr	r0, [pc, #212]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003df2:	f7fc f987 	bl	8000104 <__udivsi3>
 8003df6:	0003      	movs	r3, r0
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	e05d      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dfc:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2238      	movs	r2, #56	; 0x38
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d102      	bne.n	8003e0e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e08:	4b30      	ldr	r3, [pc, #192]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x100>)
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	e054      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e0e:	4b2d      	ldr	r3, [pc, #180]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2238      	movs	r2, #56	; 0x38
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b10      	cmp	r3, #16
 8003e18:	d138      	bne.n	8003e8c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003e1a:	4b2a      	ldr	r3, [pc, #168]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	2203      	movs	r2, #3
 8003e20:	4013      	ands	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e24:	4b27      	ldr	r3, [pc, #156]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	2207      	movs	r2, #7
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	3301      	adds	r3, #1
 8003e30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b03      	cmp	r3, #3
 8003e36:	d10d      	bne.n	8003e54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	4824      	ldr	r0, [pc, #144]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x100>)
 8003e3c:	f7fc f962 	bl	8000104 <__udivsi3>
 8003e40:	0003      	movs	r3, r0
 8003e42:	0019      	movs	r1, r3
 8003e44:	4b1f      	ldr	r3, [pc, #124]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	0a1b      	lsrs	r3, r3, #8
 8003e4a:	227f      	movs	r2, #127	; 0x7f
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	434b      	muls	r3, r1
 8003e50:	617b      	str	r3, [r7, #20]
        break;
 8003e52:	e00d      	b.n	8003e70 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	481c      	ldr	r0, [pc, #112]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003e58:	f7fc f954 	bl	8000104 <__udivsi3>
 8003e5c:	0003      	movs	r3, r0
 8003e5e:	0019      	movs	r1, r3
 8003e60:	4b18      	ldr	r3, [pc, #96]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	0a1b      	lsrs	r3, r3, #8
 8003e66:	227f      	movs	r2, #127	; 0x7f
 8003e68:	4013      	ands	r3, r2
 8003e6a:	434b      	muls	r3, r1
 8003e6c:	617b      	str	r3, [r7, #20]
        break;
 8003e6e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003e70:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	0f5b      	lsrs	r3, r3, #29
 8003e76:	2207      	movs	r2, #7
 8003e78:	4013      	ands	r3, r2
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	6978      	ldr	r0, [r7, #20]
 8003e82:	f7fc f93f 	bl	8000104 <__udivsi3>
 8003e86:	0003      	movs	r3, r0
 8003e88:	613b      	str	r3, [r7, #16]
 8003e8a:	e015      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003e8c:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2238      	movs	r2, #56	; 0x38
 8003e92:	4013      	ands	r3, r2
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d103      	bne.n	8003ea0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003e98:	2380      	movs	r3, #128	; 0x80
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	e00b      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003ea0:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2238      	movs	r2, #56	; 0x38
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b18      	cmp	r3, #24
 8003eaa:	d103      	bne.n	8003eb4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003eac:	23fa      	movs	r3, #250	; 0xfa
 8003eae:	01db      	lsls	r3, r3, #7
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	e001      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003eb8:	693b      	ldr	r3, [r7, #16]
}
 8003eba:	0018      	movs	r0, r3
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	b006      	add	sp, #24
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	00f42400 	.word	0x00f42400
 8003ecc:	007a1200 	.word	0x007a1200

08003ed0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed4:	4b02      	ldr	r3, [pc, #8]	; (8003ee0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
}
 8003ed8:	0018      	movs	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	20000000 	.word	0x20000000

08003ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee4:	b5b0      	push	{r4, r5, r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003ee8:	f7ff fff2 	bl	8003ed0 <HAL_RCC_GetHCLKFreq>
 8003eec:	0004      	movs	r4, r0
 8003eee:	f7ff fb3f 	bl	8003570 <LL_RCC_GetAPB1Prescaler>
 8003ef2:	0003      	movs	r3, r0
 8003ef4:	0b1a      	lsrs	r2, r3, #12
 8003ef6:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ef8:	0092      	lsls	r2, r2, #2
 8003efa:	58d3      	ldr	r3, [r2, r3]
 8003efc:	221f      	movs	r2, #31
 8003efe:	4013      	ands	r3, r2
 8003f00:	40dc      	lsrs	r4, r3
 8003f02:	0023      	movs	r3, r4
}
 8003f04:	0018      	movs	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bdb0      	pop	{r4, r5, r7, pc}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	080072bc 	.word	0x080072bc

08003f10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003f18:	2313      	movs	r3, #19
 8003f1a:	18fb      	adds	r3, r7, r3
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f20:	2312      	movs	r3, #18
 8003f22:	18fb      	adds	r3, r7, r3
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	2380      	movs	r3, #128	; 0x80
 8003f2e:	029b      	lsls	r3, r3, #10
 8003f30:	4013      	ands	r3, r2
 8003f32:	d100      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003f34:	e0a3      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f36:	2011      	movs	r0, #17
 8003f38:	183b      	adds	r3, r7, r0
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f3e:	4ba5      	ldr	r3, [pc, #660]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f42:	2380      	movs	r3, #128	; 0x80
 8003f44:	055b      	lsls	r3, r3, #21
 8003f46:	4013      	ands	r3, r2
 8003f48:	d110      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f4a:	4ba2      	ldr	r3, [pc, #648]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f4e:	4ba1      	ldr	r3, [pc, #644]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f50:	2180      	movs	r1, #128	; 0x80
 8003f52:	0549      	lsls	r1, r1, #21
 8003f54:	430a      	orrs	r2, r1
 8003f56:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f58:	4b9e      	ldr	r3, [pc, #632]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f5c:	2380      	movs	r3, #128	; 0x80
 8003f5e:	055b      	lsls	r3, r3, #21
 8003f60:	4013      	ands	r3, r2
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f66:	183b      	adds	r3, r7, r0
 8003f68:	2201      	movs	r2, #1
 8003f6a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f6c:	4b9a      	ldr	r3, [pc, #616]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	4b99      	ldr	r3, [pc, #612]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003f72:	2180      	movs	r1, #128	; 0x80
 8003f74:	0049      	lsls	r1, r1, #1
 8003f76:	430a      	orrs	r2, r1
 8003f78:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f7a:	f7fe ffa1 	bl	8002ec0 <HAL_GetTick>
 8003f7e:	0003      	movs	r3, r0
 8003f80:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f82:	e00b      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f84:	f7fe ff9c 	bl	8002ec0 <HAL_GetTick>
 8003f88:	0002      	movs	r2, r0
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d904      	bls.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003f92:	2313      	movs	r3, #19
 8003f94:	18fb      	adds	r3, r7, r3
 8003f96:	2203      	movs	r2, #3
 8003f98:	701a      	strb	r2, [r3, #0]
        break;
 8003f9a:	e005      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f9c:	4b8e      	ldr	r3, [pc, #568]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	2380      	movs	r3, #128	; 0x80
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d0ed      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003fa8:	2313      	movs	r3, #19
 8003faa:	18fb      	adds	r3, r7, r3
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d154      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fb2:	4b88      	ldr	r3, [pc, #544]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fb6:	23c0      	movs	r3, #192	; 0xc0
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4013      	ands	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d019      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d014      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fce:	4b81      	ldr	r3, [pc, #516]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd2:	4a82      	ldr	r2, [pc, #520]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fd8:	4b7e      	ldr	r3, [pc, #504]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fdc:	4b7d      	ldr	r3, [pc, #500]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fde:	2180      	movs	r1, #128	; 0x80
 8003fe0:	0249      	lsls	r1, r1, #9
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fe6:	4b7b      	ldr	r3, [pc, #492]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fe8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fea:	4b7a      	ldr	r3, [pc, #488]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fec:	497c      	ldr	r1, [pc, #496]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003fee:	400a      	ands	r2, r1
 8003ff0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ff2:	4b78      	ldr	r3, [pc, #480]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d016      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004000:	f7fe ff5e 	bl	8002ec0 <HAL_GetTick>
 8004004:	0003      	movs	r3, r0
 8004006:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004008:	e00c      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400a:	f7fe ff59 	bl	8002ec0 <HAL_GetTick>
 800400e:	0002      	movs	r2, r0
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	4a73      	ldr	r2, [pc, #460]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d904      	bls.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800401a:	2313      	movs	r3, #19
 800401c:	18fb      	adds	r3, r7, r3
 800401e:	2203      	movs	r2, #3
 8004020:	701a      	strb	r2, [r3, #0]
            break;
 8004022:	e004      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004024:	4b6b      	ldr	r3, [pc, #428]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004028:	2202      	movs	r2, #2
 800402a:	4013      	ands	r3, r2
 800402c:	d0ed      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800402e:	2313      	movs	r3, #19
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004038:	4b66      	ldr	r3, [pc, #408]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800403a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403c:	4a67      	ldr	r2, [pc, #412]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800403e:	4013      	ands	r3, r2
 8004040:	0019      	movs	r1, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004046:	4b63      	ldr	r3, [pc, #396]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004048:	430a      	orrs	r2, r1
 800404a:	65da      	str	r2, [r3, #92]	; 0x5c
 800404c:	e00c      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800404e:	2312      	movs	r3, #18
 8004050:	18fb      	adds	r3, r7, r3
 8004052:	2213      	movs	r2, #19
 8004054:	18ba      	adds	r2, r7, r2
 8004056:	7812      	ldrb	r2, [r2, #0]
 8004058:	701a      	strb	r2, [r3, #0]
 800405a:	e005      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405c:	2312      	movs	r3, #18
 800405e:	18fb      	adds	r3, r7, r3
 8004060:	2213      	movs	r2, #19
 8004062:	18ba      	adds	r2, r7, r2
 8004064:	7812      	ldrb	r2, [r2, #0]
 8004066:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004068:	2311      	movs	r3, #17
 800406a:	18fb      	adds	r3, r7, r3
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d105      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004072:	4b58      	ldr	r3, [pc, #352]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004074:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004076:	4b57      	ldr	r3, [pc, #348]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004078:	495b      	ldr	r1, [pc, #364]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800407a:	400a      	ands	r2, r1
 800407c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2201      	movs	r2, #1
 8004084:	4013      	ands	r3, r2
 8004086:	d009      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004088:	4b52      	ldr	r3, [pc, #328]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800408a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408c:	2203      	movs	r2, #3
 800408e:	4393      	bics	r3, r2
 8004090:	0019      	movs	r1, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	4b4f      	ldr	r3, [pc, #316]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004098:	430a      	orrs	r2, r1
 800409a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2210      	movs	r2, #16
 80040a2:	4013      	ands	r3, r2
 80040a4:	d009      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040a6:	4b4b      	ldr	r3, [pc, #300]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040aa:	4a50      	ldr	r2, [pc, #320]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	0019      	movs	r1, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	4b47      	ldr	r3, [pc, #284]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040b6:	430a      	orrs	r2, r1
 80040b8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	2380      	movs	r3, #128	; 0x80
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4013      	ands	r3, r2
 80040c4:	d009      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040c6:	4b43      	ldr	r3, [pc, #268]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ca:	4a49      	ldr	r2, [pc, #292]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	0019      	movs	r1, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	695a      	ldr	r2, [r3, #20]
 80040d4:	4b3f      	ldr	r3, [pc, #252]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040d6:	430a      	orrs	r2, r1
 80040d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	2380      	movs	r3, #128	; 0x80
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4013      	ands	r3, r2
 80040e4:	d009      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040e6:	4b3b      	ldr	r3, [pc, #236]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ea:	4a42      	ldr	r2, [pc, #264]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	0019      	movs	r1, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699a      	ldr	r2, [r3, #24]
 80040f4:	4b37      	ldr	r3, [pc, #220]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040f6:	430a      	orrs	r2, r1
 80040f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2220      	movs	r2, #32
 8004100:	4013      	ands	r3, r2
 8004102:	d009      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004104:	4b33      	ldr	r3, [pc, #204]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004108:	4a3b      	ldr	r2, [pc, #236]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800410a:	4013      	ands	r3, r2
 800410c:	0019      	movs	r1, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	4b30      	ldr	r3, [pc, #192]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004114:	430a      	orrs	r2, r1
 8004116:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	2380      	movs	r3, #128	; 0x80
 800411e:	01db      	lsls	r3, r3, #7
 8004120:	4013      	ands	r3, r2
 8004122:	d015      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004124:	4b2b      	ldr	r3, [pc, #172]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	0899      	lsrs	r1, r3, #2
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69da      	ldr	r2, [r3, #28]
 8004130:	4b28      	ldr	r3, [pc, #160]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004132:	430a      	orrs	r2, r1
 8004134:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69da      	ldr	r2, [r3, #28]
 800413a:	2380      	movs	r3, #128	; 0x80
 800413c:	05db      	lsls	r3, r3, #23
 800413e:	429a      	cmp	r2, r3
 8004140:	d106      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004142:	4b24      	ldr	r3, [pc, #144]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	4b23      	ldr	r3, [pc, #140]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004148:	2180      	movs	r1, #128	; 0x80
 800414a:	0249      	lsls	r1, r1, #9
 800414c:	430a      	orrs	r2, r1
 800414e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	2380      	movs	r3, #128	; 0x80
 8004156:	039b      	lsls	r3, r3, #14
 8004158:	4013      	ands	r3, r2
 800415a:	d016      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800415c:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800415e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004160:	4a26      	ldr	r2, [pc, #152]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004162:	4013      	ands	r3, r2
 8004164:	0019      	movs	r1, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1a      	ldr	r2, [r3, #32]
 800416a:	4b1a      	ldr	r3, [pc, #104]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800416c:	430a      	orrs	r2, r1
 800416e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1a      	ldr	r2, [r3, #32]
 8004174:	2380      	movs	r3, #128	; 0x80
 8004176:	03db      	lsls	r3, r3, #15
 8004178:	429a      	cmp	r2, r3
 800417a:	d106      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800417c:	4b15      	ldr	r3, [pc, #84]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	4b14      	ldr	r3, [pc, #80]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004182:	2180      	movs	r1, #128	; 0x80
 8004184:	0449      	lsls	r1, r1, #17
 8004186:	430a      	orrs	r2, r1
 8004188:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	2380      	movs	r3, #128	; 0x80
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	4013      	ands	r3, r2
 8004194:	d016      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004196:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419a:	4a19      	ldr	r2, [pc, #100]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800419c:	4013      	ands	r3, r2
 800419e:	0019      	movs	r1, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041a6:	430a      	orrs	r2, r1
 80041a8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	2380      	movs	r3, #128	; 0x80
 80041b0:	01db      	lsls	r3, r3, #7
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d106      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80041b6:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041bc:	2180      	movs	r1, #128	; 0x80
 80041be:	0249      	lsls	r1, r1, #9
 80041c0:	430a      	orrs	r2, r1
 80041c2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80041c4:	2312      	movs	r3, #18
 80041c6:	18fb      	adds	r3, r7, r3
 80041c8:	781b      	ldrb	r3, [r3, #0]
}
 80041ca:	0018      	movs	r0, r3
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b006      	add	sp, #24
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	40021000 	.word	0x40021000
 80041d8:	40007000 	.word	0x40007000
 80041dc:	fffffcff 	.word	0xfffffcff
 80041e0:	fffeffff 	.word	0xfffeffff
 80041e4:	00001388 	.word	0x00001388
 80041e8:	efffffff 	.word	0xefffffff
 80041ec:	fffff3ff 	.word	0xfffff3ff
 80041f0:	fff3ffff 	.word	0xfff3ffff
 80041f4:	ffcfffff 	.word	0xffcfffff
 80041f8:	ffffcfff 	.word	0xffffcfff
 80041fc:	ffbfffff 	.word	0xffbfffff
 8004200:	ffff3fff 	.word	0xffff3fff

08004204 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e04a      	b.n	80042ac <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	223d      	movs	r2, #61	; 0x3d
 800421a:	5c9b      	ldrb	r3, [r3, r2]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d107      	bne.n	8004232 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	223c      	movs	r2, #60	; 0x3c
 8004226:	2100      	movs	r1, #0
 8004228:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	0018      	movs	r0, r3
 800422e:	f7fe fb7d 	bl	800292c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	223d      	movs	r2, #61	; 0x3d
 8004236:	2102      	movs	r1, #2
 8004238:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3304      	adds	r3, #4
 8004242:	0019      	movs	r1, r3
 8004244:	0010      	movs	r0, r2
 8004246:	f000 fb49 	bl	80048dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2248      	movs	r2, #72	; 0x48
 800424e:	2101      	movs	r1, #1
 8004250:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	223e      	movs	r2, #62	; 0x3e
 8004256:	2101      	movs	r1, #1
 8004258:	5499      	strb	r1, [r3, r2]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	223f      	movs	r2, #63	; 0x3f
 800425e:	2101      	movs	r1, #1
 8004260:	5499      	strb	r1, [r3, r2]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2240      	movs	r2, #64	; 0x40
 8004266:	2101      	movs	r1, #1
 8004268:	5499      	strb	r1, [r3, r2]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2241      	movs	r2, #65	; 0x41
 800426e:	2101      	movs	r1, #1
 8004270:	5499      	strb	r1, [r3, r2]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2242      	movs	r2, #66	; 0x42
 8004276:	2101      	movs	r1, #1
 8004278:	5499      	strb	r1, [r3, r2]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2243      	movs	r2, #67	; 0x43
 800427e:	2101      	movs	r1, #1
 8004280:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2244      	movs	r2, #68	; 0x44
 8004286:	2101      	movs	r1, #1
 8004288:	5499      	strb	r1, [r3, r2]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2245      	movs	r2, #69	; 0x45
 800428e:	2101      	movs	r1, #1
 8004290:	5499      	strb	r1, [r3, r2]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2246      	movs	r2, #70	; 0x46
 8004296:	2101      	movs	r1, #1
 8004298:	5499      	strb	r1, [r3, r2]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2247      	movs	r2, #71	; 0x47
 800429e:	2101      	movs	r1, #1
 80042a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	223d      	movs	r2, #61	; 0x3d
 80042a6:	2101      	movs	r1, #1
 80042a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	0018      	movs	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b002      	add	sp, #8
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e04a      	b.n	800435c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	223d      	movs	r2, #61	; 0x3d
 80042ca:	5c9b      	ldrb	r3, [r3, r2]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d107      	bne.n	80042e2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	223c      	movs	r2, #60	; 0x3c
 80042d6:	2100      	movs	r1, #0
 80042d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	0018      	movs	r0, r3
 80042de:	f000 f841 	bl	8004364 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	223d      	movs	r2, #61	; 0x3d
 80042e6:	2102      	movs	r1, #2
 80042e8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3304      	adds	r3, #4
 80042f2:	0019      	movs	r1, r3
 80042f4:	0010      	movs	r0, r2
 80042f6:	f000 faf1 	bl	80048dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2248      	movs	r2, #72	; 0x48
 80042fe:	2101      	movs	r1, #1
 8004300:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	223e      	movs	r2, #62	; 0x3e
 8004306:	2101      	movs	r1, #1
 8004308:	5499      	strb	r1, [r3, r2]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	223f      	movs	r2, #63	; 0x3f
 800430e:	2101      	movs	r1, #1
 8004310:	5499      	strb	r1, [r3, r2]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2240      	movs	r2, #64	; 0x40
 8004316:	2101      	movs	r1, #1
 8004318:	5499      	strb	r1, [r3, r2]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2241      	movs	r2, #65	; 0x41
 800431e:	2101      	movs	r1, #1
 8004320:	5499      	strb	r1, [r3, r2]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2242      	movs	r2, #66	; 0x42
 8004326:	2101      	movs	r1, #1
 8004328:	5499      	strb	r1, [r3, r2]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2243      	movs	r2, #67	; 0x43
 800432e:	2101      	movs	r1, #1
 8004330:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2244      	movs	r2, #68	; 0x44
 8004336:	2101      	movs	r1, #1
 8004338:	5499      	strb	r1, [r3, r2]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2245      	movs	r2, #69	; 0x45
 800433e:	2101      	movs	r1, #1
 8004340:	5499      	strb	r1, [r3, r2]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2246      	movs	r2, #70	; 0x46
 8004346:	2101      	movs	r1, #1
 8004348:	5499      	strb	r1, [r3, r2]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2247      	movs	r2, #71	; 0x47
 800434e:	2101      	movs	r1, #1
 8004350:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	223d      	movs	r2, #61	; 0x3d
 8004356:	2101      	movs	r1, #1
 8004358:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	0018      	movs	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	b002      	add	sp, #8
 8004362:	bd80      	pop	{r7, pc}

08004364 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800436c:	46c0      	nop			; (mov r8, r8)
 800436e:	46bd      	mov	sp, r7
 8004370:	b002      	add	sp, #8
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d108      	bne.n	8004396 <HAL_TIM_PWM_Start+0x22>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	223e      	movs	r2, #62	; 0x3e
 8004388:	5c9b      	ldrb	r3, [r3, r2]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	1e5a      	subs	r2, r3, #1
 8004390:	4193      	sbcs	r3, r2
 8004392:	b2db      	uxtb	r3, r3
 8004394:	e037      	b.n	8004406 <HAL_TIM_PWM_Start+0x92>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b04      	cmp	r3, #4
 800439a:	d108      	bne.n	80043ae <HAL_TIM_PWM_Start+0x3a>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	223f      	movs	r2, #63	; 0x3f
 80043a0:	5c9b      	ldrb	r3, [r3, r2]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	3b01      	subs	r3, #1
 80043a6:	1e5a      	subs	r2, r3, #1
 80043a8:	4193      	sbcs	r3, r2
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	e02b      	b.n	8004406 <HAL_TIM_PWM_Start+0x92>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d108      	bne.n	80043c6 <HAL_TIM_PWM_Start+0x52>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2240      	movs	r2, #64	; 0x40
 80043b8:	5c9b      	ldrb	r3, [r3, r2]
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	1e5a      	subs	r2, r3, #1
 80043c0:	4193      	sbcs	r3, r2
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	e01f      	b.n	8004406 <HAL_TIM_PWM_Start+0x92>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b0c      	cmp	r3, #12
 80043ca:	d108      	bne.n	80043de <HAL_TIM_PWM_Start+0x6a>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2241      	movs	r2, #65	; 0x41
 80043d0:	5c9b      	ldrb	r3, [r3, r2]
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	1e5a      	subs	r2, r3, #1
 80043d8:	4193      	sbcs	r3, r2
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	e013      	b.n	8004406 <HAL_TIM_PWM_Start+0x92>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b10      	cmp	r3, #16
 80043e2:	d108      	bne.n	80043f6 <HAL_TIM_PWM_Start+0x82>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2242      	movs	r2, #66	; 0x42
 80043e8:	5c9b      	ldrb	r3, [r3, r2]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	1e5a      	subs	r2, r3, #1
 80043f0:	4193      	sbcs	r3, r2
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	e007      	b.n	8004406 <HAL_TIM_PWM_Start+0x92>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2243      	movs	r2, #67	; 0x43
 80043fa:	5c9b      	ldrb	r3, [r3, r2]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	3b01      	subs	r3, #1
 8004400:	1e5a      	subs	r2, r3, #1
 8004402:	4193      	sbcs	r3, r2
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e081      	b.n	8004512 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d104      	bne.n	800441e <HAL_TIM_PWM_Start+0xaa>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	223e      	movs	r2, #62	; 0x3e
 8004418:	2102      	movs	r1, #2
 800441a:	5499      	strb	r1, [r3, r2]
 800441c:	e023      	b.n	8004466 <HAL_TIM_PWM_Start+0xf2>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b04      	cmp	r3, #4
 8004422:	d104      	bne.n	800442e <HAL_TIM_PWM_Start+0xba>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	223f      	movs	r2, #63	; 0x3f
 8004428:	2102      	movs	r1, #2
 800442a:	5499      	strb	r1, [r3, r2]
 800442c:	e01b      	b.n	8004466 <HAL_TIM_PWM_Start+0xf2>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b08      	cmp	r3, #8
 8004432:	d104      	bne.n	800443e <HAL_TIM_PWM_Start+0xca>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2240      	movs	r2, #64	; 0x40
 8004438:	2102      	movs	r1, #2
 800443a:	5499      	strb	r1, [r3, r2]
 800443c:	e013      	b.n	8004466 <HAL_TIM_PWM_Start+0xf2>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b0c      	cmp	r3, #12
 8004442:	d104      	bne.n	800444e <HAL_TIM_PWM_Start+0xda>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2241      	movs	r2, #65	; 0x41
 8004448:	2102      	movs	r1, #2
 800444a:	5499      	strb	r1, [r3, r2]
 800444c:	e00b      	b.n	8004466 <HAL_TIM_PWM_Start+0xf2>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b10      	cmp	r3, #16
 8004452:	d104      	bne.n	800445e <HAL_TIM_PWM_Start+0xea>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2242      	movs	r2, #66	; 0x42
 8004458:	2102      	movs	r1, #2
 800445a:	5499      	strb	r1, [r3, r2]
 800445c:	e003      	b.n	8004466 <HAL_TIM_PWM_Start+0xf2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2243      	movs	r2, #67	; 0x43
 8004462:	2102      	movs	r1, #2
 8004464:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6839      	ldr	r1, [r7, #0]
 800446c:	2201      	movs	r2, #1
 800446e:	0018      	movs	r0, r3
 8004470:	f000 fde2 	bl	8005038 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a28      	ldr	r2, [pc, #160]	; (800451c <HAL_TIM_PWM_Start+0x1a8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d009      	beq.n	8004492 <HAL_TIM_PWM_Start+0x11e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a27      	ldr	r2, [pc, #156]	; (8004520 <HAL_TIM_PWM_Start+0x1ac>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d004      	beq.n	8004492 <HAL_TIM_PWM_Start+0x11e>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a25      	ldr	r2, [pc, #148]	; (8004524 <HAL_TIM_PWM_Start+0x1b0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d101      	bne.n	8004496 <HAL_TIM_PWM_Start+0x122>
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <HAL_TIM_PWM_Start+0x124>
 8004496:	2300      	movs	r3, #0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2180      	movs	r1, #128	; 0x80
 80044a8:	0209      	lsls	r1, r1, #8
 80044aa:	430a      	orrs	r2, r1
 80044ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a1a      	ldr	r2, [pc, #104]	; (800451c <HAL_TIM_PWM_Start+0x1a8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00a      	beq.n	80044ce <HAL_TIM_PWM_Start+0x15a>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	2380      	movs	r3, #128	; 0x80
 80044be:	05db      	lsls	r3, r3, #23
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d004      	beq.n	80044ce <HAL_TIM_PWM_Start+0x15a>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a17      	ldr	r2, [pc, #92]	; (8004528 <HAL_TIM_PWM_Start+0x1b4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d116      	bne.n	80044fc <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	4a15      	ldr	r2, [pc, #84]	; (800452c <HAL_TIM_PWM_Start+0x1b8>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b06      	cmp	r3, #6
 80044de:	d016      	beq.n	800450e <HAL_TIM_PWM_Start+0x19a>
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	2380      	movs	r3, #128	; 0x80
 80044e4:	025b      	lsls	r3, r3, #9
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d011      	beq.n	800450e <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2101      	movs	r1, #1
 80044f6:	430a      	orrs	r2, r1
 80044f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044fa:	e008      	b.n	800450e <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2101      	movs	r1, #1
 8004508:	430a      	orrs	r2, r1
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	e000      	b.n	8004510 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800450e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	0018      	movs	r0, r3
 8004514:	46bd      	mov	sp, r7
 8004516:	b004      	add	sp, #16
 8004518:	bd80      	pop	{r7, pc}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	40012c00 	.word	0x40012c00
 8004520:	40014400 	.word	0x40014400
 8004524:	40014800 	.word	0x40014800
 8004528:	40000400 	.word	0x40000400
 800452c:	00010007 	.word	0x00010007

08004530 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800453c:	2317      	movs	r3, #23
 800453e:	18fb      	adds	r3, r7, r3
 8004540:	2200      	movs	r2, #0
 8004542:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	223c      	movs	r2, #60	; 0x3c
 8004548:	5c9b      	ldrb	r3, [r3, r2]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_TIM_PWM_ConfigChannel+0x22>
 800454e:	2302      	movs	r3, #2
 8004550:	e0e5      	b.n	800471e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	223c      	movs	r2, #60	; 0x3c
 8004556:	2101      	movs	r1, #1
 8004558:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b14      	cmp	r3, #20
 800455e:	d900      	bls.n	8004562 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004560:	e0d1      	b.n	8004706 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	009a      	lsls	r2, r3, #2
 8004566:	4b70      	ldr	r3, [pc, #448]	; (8004728 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004568:	18d3      	adds	r3, r2, r3
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	0011      	movs	r1, r2
 8004576:	0018      	movs	r0, r3
 8004578:	f000 fa26 	bl	80049c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2108      	movs	r1, #8
 8004588:	430a      	orrs	r2, r1
 800458a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699a      	ldr	r2, [r3, #24]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2104      	movs	r1, #4
 8004598:	438a      	bics	r2, r1
 800459a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6999      	ldr	r1, [r3, #24]
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	619a      	str	r2, [r3, #24]
      break;
 80045ae:	e0af      	b.n	8004710 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	0011      	movs	r1, r2
 80045b8:	0018      	movs	r0, r3
 80045ba:	f000 fa85 	bl	8004ac8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	699a      	ldr	r2, [r3, #24]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2180      	movs	r1, #128	; 0x80
 80045ca:	0109      	lsls	r1, r1, #4
 80045cc:	430a      	orrs	r2, r1
 80045ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4954      	ldr	r1, [pc, #336]	; (800472c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80045dc:	400a      	ands	r2, r1
 80045de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6999      	ldr	r1, [r3, #24]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	021a      	lsls	r2, r3, #8
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	619a      	str	r2, [r3, #24]
      break;
 80045f4:	e08c      	b.n	8004710 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	0011      	movs	r1, r2
 80045fe:	0018      	movs	r0, r3
 8004600:	f000 fae0 	bl	8004bc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69da      	ldr	r2, [r3, #28]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2108      	movs	r1, #8
 8004610:	430a      	orrs	r2, r1
 8004612:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69da      	ldr	r2, [r3, #28]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2104      	movs	r1, #4
 8004620:	438a      	bics	r2, r1
 8004622:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	69d9      	ldr	r1, [r3, #28]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	61da      	str	r2, [r3, #28]
      break;
 8004636:	e06b      	b.n	8004710 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	0011      	movs	r1, r2
 8004640:	0018      	movs	r0, r3
 8004642:	f000 fb41 	bl	8004cc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69da      	ldr	r2, [r3, #28]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2180      	movs	r1, #128	; 0x80
 8004652:	0109      	lsls	r1, r1, #4
 8004654:	430a      	orrs	r2, r1
 8004656:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69da      	ldr	r2, [r3, #28]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4932      	ldr	r1, [pc, #200]	; (800472c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004664:	400a      	ands	r2, r1
 8004666:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69d9      	ldr	r1, [r3, #28]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	021a      	lsls	r2, r3, #8
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	61da      	str	r2, [r3, #28]
      break;
 800467c:	e048      	b.n	8004710 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	0011      	movs	r1, r2
 8004686:	0018      	movs	r0, r3
 8004688:	f000 fb82 	bl	8004d90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2108      	movs	r1, #8
 8004698:	430a      	orrs	r2, r1
 800469a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2104      	movs	r1, #4
 80046a8:	438a      	bics	r2, r1
 80046aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046be:	e027      	b.n	8004710 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	0011      	movs	r1, r2
 80046c8:	0018      	movs	r0, r3
 80046ca:	f000 fbbb 	bl	8004e44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2180      	movs	r1, #128	; 0x80
 80046da:	0109      	lsls	r1, r1, #4
 80046dc:	430a      	orrs	r2, r1
 80046de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4910      	ldr	r1, [pc, #64]	; (800472c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80046ec:	400a      	ands	r2, r1
 80046ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	021a      	lsls	r2, r3, #8
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004704:	e004      	b.n	8004710 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004706:	2317      	movs	r3, #23
 8004708:	18fb      	adds	r3, r7, r3
 800470a:	2201      	movs	r2, #1
 800470c:	701a      	strb	r2, [r3, #0]
      break;
 800470e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	223c      	movs	r2, #60	; 0x3c
 8004714:	2100      	movs	r1, #0
 8004716:	5499      	strb	r1, [r3, r2]

  return status;
 8004718:	2317      	movs	r3, #23
 800471a:	18fb      	adds	r3, r7, r3
 800471c:	781b      	ldrb	r3, [r3, #0]
}
 800471e:	0018      	movs	r0, r3
 8004720:	46bd      	mov	sp, r7
 8004722:	b006      	add	sp, #24
 8004724:	bd80      	pop	{r7, pc}
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	080072dc 	.word	0x080072dc
 800472c:	fffffbff 	.word	0xfffffbff

08004730 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800473a:	230f      	movs	r3, #15
 800473c:	18fb      	adds	r3, r7, r3
 800473e:	2200      	movs	r2, #0
 8004740:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	223c      	movs	r2, #60	; 0x3c
 8004746:	5c9b      	ldrb	r3, [r3, r2]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <HAL_TIM_ConfigClockSource+0x20>
 800474c:	2302      	movs	r3, #2
 800474e:	e0bc      	b.n	80048ca <HAL_TIM_ConfigClockSource+0x19a>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	223c      	movs	r2, #60	; 0x3c
 8004754:	2101      	movs	r1, #1
 8004756:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	223d      	movs	r2, #61	; 0x3d
 800475c:	2102      	movs	r1, #2
 800475e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4a5a      	ldr	r2, [pc, #360]	; (80048d4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800476c:	4013      	ands	r3, r2
 800476e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4a59      	ldr	r2, [pc, #356]	; (80048d8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004774:	4013      	ands	r3, r2
 8004776:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2280      	movs	r2, #128	; 0x80
 8004786:	0192      	lsls	r2, r2, #6
 8004788:	4293      	cmp	r3, r2
 800478a:	d040      	beq.n	800480e <HAL_TIM_ConfigClockSource+0xde>
 800478c:	2280      	movs	r2, #128	; 0x80
 800478e:	0192      	lsls	r2, r2, #6
 8004790:	4293      	cmp	r3, r2
 8004792:	d900      	bls.n	8004796 <HAL_TIM_ConfigClockSource+0x66>
 8004794:	e088      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x178>
 8004796:	2280      	movs	r2, #128	; 0x80
 8004798:	0152      	lsls	r2, r2, #5
 800479a:	4293      	cmp	r3, r2
 800479c:	d100      	bne.n	80047a0 <HAL_TIM_ConfigClockSource+0x70>
 800479e:	e088      	b.n	80048b2 <HAL_TIM_ConfigClockSource+0x182>
 80047a0:	2280      	movs	r2, #128	; 0x80
 80047a2:	0152      	lsls	r2, r2, #5
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d900      	bls.n	80047aa <HAL_TIM_ConfigClockSource+0x7a>
 80047a8:	e07e      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x178>
 80047aa:	2b70      	cmp	r3, #112	; 0x70
 80047ac:	d018      	beq.n	80047e0 <HAL_TIM_ConfigClockSource+0xb0>
 80047ae:	d900      	bls.n	80047b2 <HAL_TIM_ConfigClockSource+0x82>
 80047b0:	e07a      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x178>
 80047b2:	2b60      	cmp	r3, #96	; 0x60
 80047b4:	d04f      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x126>
 80047b6:	d900      	bls.n	80047ba <HAL_TIM_ConfigClockSource+0x8a>
 80047b8:	e076      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x178>
 80047ba:	2b50      	cmp	r3, #80	; 0x50
 80047bc:	d03b      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x106>
 80047be:	d900      	bls.n	80047c2 <HAL_TIM_ConfigClockSource+0x92>
 80047c0:	e072      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x178>
 80047c2:	2b40      	cmp	r3, #64	; 0x40
 80047c4:	d057      	beq.n	8004876 <HAL_TIM_ConfigClockSource+0x146>
 80047c6:	d900      	bls.n	80047ca <HAL_TIM_ConfigClockSource+0x9a>
 80047c8:	e06e      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x178>
 80047ca:	2b30      	cmp	r3, #48	; 0x30
 80047cc:	d063      	beq.n	8004896 <HAL_TIM_ConfigClockSource+0x166>
 80047ce:	d86b      	bhi.n	80048a8 <HAL_TIM_ConfigClockSource+0x178>
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	d060      	beq.n	8004896 <HAL_TIM_ConfigClockSource+0x166>
 80047d4:	d868      	bhi.n	80048a8 <HAL_TIM_ConfigClockSource+0x178>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d05d      	beq.n	8004896 <HAL_TIM_ConfigClockSource+0x166>
 80047da:	2b10      	cmp	r3, #16
 80047dc:	d05b      	beq.n	8004896 <HAL_TIM_ConfigClockSource+0x166>
 80047de:	e063      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6818      	ldr	r0, [r3, #0]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	6899      	ldr	r1, [r3, #8]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f000 fc02 	bl	8004ff8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2277      	movs	r2, #119	; 0x77
 8004800:	4313      	orrs	r3, r2
 8004802:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	609a      	str	r2, [r3, #8]
      break;
 800480c:	e052      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6899      	ldr	r1, [r3, #8]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f000 fbeb 	bl	8004ff8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2180      	movs	r1, #128	; 0x80
 800482e:	01c9      	lsls	r1, r1, #7
 8004830:	430a      	orrs	r2, r1
 8004832:	609a      	str	r2, [r3, #8]
      break;
 8004834:	e03e      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	6859      	ldr	r1, [r3, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	001a      	movs	r2, r3
 8004844:	f000 fb5c 	bl	8004f00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2150      	movs	r1, #80	; 0x50
 800484e:	0018      	movs	r0, r3
 8004850:	f000 fbb6 	bl	8004fc0 <TIM_ITRx_SetConfig>
      break;
 8004854:	e02e      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6818      	ldr	r0, [r3, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	6859      	ldr	r1, [r3, #4]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	001a      	movs	r2, r3
 8004864:	f000 fb7a 	bl	8004f5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2160      	movs	r1, #96	; 0x60
 800486e:	0018      	movs	r0, r3
 8004870:	f000 fba6 	bl	8004fc0 <TIM_ITRx_SetConfig>
      break;
 8004874:	e01e      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	6859      	ldr	r1, [r3, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	001a      	movs	r2, r3
 8004884:	f000 fb3c 	bl	8004f00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2140      	movs	r1, #64	; 0x40
 800488e:	0018      	movs	r0, r3
 8004890:	f000 fb96 	bl	8004fc0 <TIM_ITRx_SetConfig>
      break;
 8004894:	e00e      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	0019      	movs	r1, r3
 80048a0:	0010      	movs	r0, r2
 80048a2:	f000 fb8d 	bl	8004fc0 <TIM_ITRx_SetConfig>
      break;
 80048a6:	e005      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80048a8:	230f      	movs	r3, #15
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	2201      	movs	r2, #1
 80048ae:	701a      	strb	r2, [r3, #0]
      break;
 80048b0:	e000      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80048b2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	223d      	movs	r2, #61	; 0x3d
 80048b8:	2101      	movs	r1, #1
 80048ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	223c      	movs	r2, #60	; 0x3c
 80048c0:	2100      	movs	r1, #0
 80048c2:	5499      	strb	r1, [r3, r2]

  return status;
 80048c4:	230f      	movs	r3, #15
 80048c6:	18fb      	adds	r3, r7, r3
 80048c8:	781b      	ldrb	r3, [r3, #0]
}
 80048ca:	0018      	movs	r0, r3
 80048cc:	46bd      	mov	sp, r7
 80048ce:	b004      	add	sp, #16
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	ffceff88 	.word	0xffceff88
 80048d8:	ffff00ff 	.word	0xffff00ff

080048dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a30      	ldr	r2, [pc, #192]	; (80049b0 <TIM_Base_SetConfig+0xd4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d008      	beq.n	8004906 <TIM_Base_SetConfig+0x2a>
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	2380      	movs	r3, #128	; 0x80
 80048f8:	05db      	lsls	r3, r3, #23
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d003      	beq.n	8004906 <TIM_Base_SetConfig+0x2a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a2c      	ldr	r2, [pc, #176]	; (80049b4 <TIM_Base_SetConfig+0xd8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d108      	bne.n	8004918 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2270      	movs	r2, #112	; 0x70
 800490a:	4393      	bics	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a25      	ldr	r2, [pc, #148]	; (80049b0 <TIM_Base_SetConfig+0xd4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d014      	beq.n	800494a <TIM_Base_SetConfig+0x6e>
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	2380      	movs	r3, #128	; 0x80
 8004924:	05db      	lsls	r3, r3, #23
 8004926:	429a      	cmp	r2, r3
 8004928:	d00f      	beq.n	800494a <TIM_Base_SetConfig+0x6e>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a21      	ldr	r2, [pc, #132]	; (80049b4 <TIM_Base_SetConfig+0xd8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00b      	beq.n	800494a <TIM_Base_SetConfig+0x6e>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a20      	ldr	r2, [pc, #128]	; (80049b8 <TIM_Base_SetConfig+0xdc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d007      	beq.n	800494a <TIM_Base_SetConfig+0x6e>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a1f      	ldr	r2, [pc, #124]	; (80049bc <TIM_Base_SetConfig+0xe0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d003      	beq.n	800494a <TIM_Base_SetConfig+0x6e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a1e      	ldr	r2, [pc, #120]	; (80049c0 <TIM_Base_SetConfig+0xe4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d108      	bne.n	800495c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4a1d      	ldr	r2, [pc, #116]	; (80049c4 <TIM_Base_SetConfig+0xe8>)
 800494e:	4013      	ands	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2280      	movs	r2, #128	; 0x80
 8004960:	4393      	bics	r3, r2
 8004962:	001a      	movs	r2, r3
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a0a      	ldr	r2, [pc, #40]	; (80049b0 <TIM_Base_SetConfig+0xd4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d007      	beq.n	800499a <TIM_Base_SetConfig+0xbe>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a0b      	ldr	r2, [pc, #44]	; (80049bc <TIM_Base_SetConfig+0xe0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d003      	beq.n	800499a <TIM_Base_SetConfig+0xbe>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a0a      	ldr	r2, [pc, #40]	; (80049c0 <TIM_Base_SetConfig+0xe4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d103      	bne.n	80049a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	615a      	str	r2, [r3, #20]
}
 80049a8:	46c0      	nop			; (mov r8, r8)
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b004      	add	sp, #16
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40012c00 	.word	0x40012c00
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40002000 	.word	0x40002000
 80049bc:	40014400 	.word	0x40014400
 80049c0:	40014800 	.word	0x40014800
 80049c4:	fffffcff 	.word	0xfffffcff

080049c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	2201      	movs	r2, #1
 80049d8:	4393      	bics	r3, r2
 80049da:	001a      	movs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4a2e      	ldr	r2, [pc, #184]	; (8004ab0 <TIM_OC1_SetConfig+0xe8>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2203      	movs	r2, #3
 80049fe:	4393      	bics	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	4393      	bics	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a24      	ldr	r2, [pc, #144]	; (8004ab4 <TIM_OC1_SetConfig+0xec>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d007      	beq.n	8004a36 <TIM_OC1_SetConfig+0x6e>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a23      	ldr	r2, [pc, #140]	; (8004ab8 <TIM_OC1_SetConfig+0xf0>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d003      	beq.n	8004a36 <TIM_OC1_SetConfig+0x6e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a22      	ldr	r2, [pc, #136]	; (8004abc <TIM_OC1_SetConfig+0xf4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d10c      	bne.n	8004a50 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2208      	movs	r2, #8
 8004a3a:	4393      	bics	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2204      	movs	r2, #4
 8004a4c:	4393      	bics	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a18      	ldr	r2, [pc, #96]	; (8004ab4 <TIM_OC1_SetConfig+0xec>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d007      	beq.n	8004a68 <TIM_OC1_SetConfig+0xa0>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a17      	ldr	r2, [pc, #92]	; (8004ab8 <TIM_OC1_SetConfig+0xf0>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d003      	beq.n	8004a68 <TIM_OC1_SetConfig+0xa0>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a16      	ldr	r2, [pc, #88]	; (8004abc <TIM_OC1_SetConfig+0xf4>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d111      	bne.n	8004a8c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4a15      	ldr	r2, [pc, #84]	; (8004ac0 <TIM_OC1_SetConfig+0xf8>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	4a14      	ldr	r2, [pc, #80]	; (8004ac4 <TIM_OC1_SetConfig+0xfc>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	621a      	str	r2, [r3, #32]
}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b006      	add	sp, #24
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	fffeff8f 	.word	0xfffeff8f
 8004ab4:	40012c00 	.word	0x40012c00
 8004ab8:	40014400 	.word	0x40014400
 8004abc:	40014800 	.word	0x40014800
 8004ac0:	fffffeff 	.word	0xfffffeff
 8004ac4:	fffffdff 	.word	0xfffffdff

08004ac8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	2210      	movs	r2, #16
 8004ad8:	4393      	bics	r3, r2
 8004ada:	001a      	movs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4a2c      	ldr	r2, [pc, #176]	; (8004ba8 <TIM_OC2_SetConfig+0xe0>)
 8004af6:	4013      	ands	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4a2b      	ldr	r2, [pc, #172]	; (8004bac <TIM_OC2_SetConfig+0xe4>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	021b      	lsls	r3, r3, #8
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2220      	movs	r2, #32
 8004b12:	4393      	bics	r3, r2
 8004b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a22      	ldr	r2, [pc, #136]	; (8004bb0 <TIM_OC2_SetConfig+0xe8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d10d      	bne.n	8004b46 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2280      	movs	r2, #128	; 0x80
 8004b2e:	4393      	bics	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2240      	movs	r2, #64	; 0x40
 8004b42:	4393      	bics	r3, r2
 8004b44:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a19      	ldr	r2, [pc, #100]	; (8004bb0 <TIM_OC2_SetConfig+0xe8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d007      	beq.n	8004b5e <TIM_OC2_SetConfig+0x96>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a18      	ldr	r2, [pc, #96]	; (8004bb4 <TIM_OC2_SetConfig+0xec>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d003      	beq.n	8004b5e <TIM_OC2_SetConfig+0x96>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a17      	ldr	r2, [pc, #92]	; (8004bb8 <TIM_OC2_SetConfig+0xf0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d113      	bne.n	8004b86 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4a16      	ldr	r2, [pc, #88]	; (8004bbc <TIM_OC2_SetConfig+0xf4>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <TIM_OC2_SetConfig+0xf8>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	621a      	str	r2, [r3, #32]
}
 8004ba0:	46c0      	nop			; (mov r8, r8)
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b006      	add	sp, #24
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	feff8fff 	.word	0xfeff8fff
 8004bac:	fffffcff 	.word	0xfffffcff
 8004bb0:	40012c00 	.word	0x40012c00
 8004bb4:	40014400 	.word	0x40014400
 8004bb8:	40014800 	.word	0x40014800
 8004bbc:	fffffbff 	.word	0xfffffbff
 8004bc0:	fffff7ff 	.word	0xfffff7ff

08004bc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	4a33      	ldr	r2, [pc, #204]	; (8004ca0 <TIM_OC3_SetConfig+0xdc>)
 8004bd4:	401a      	ands	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4a2d      	ldr	r2, [pc, #180]	; (8004ca4 <TIM_OC3_SetConfig+0xe0>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2203      	movs	r2, #3
 8004bf8:	4393      	bics	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	4a27      	ldr	r2, [pc, #156]	; (8004ca8 <TIM_OC3_SetConfig+0xe4>)
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	021b      	lsls	r3, r3, #8
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a23      	ldr	r2, [pc, #140]	; (8004cac <TIM_OC3_SetConfig+0xe8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d10d      	bne.n	8004c3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	4a22      	ldr	r2, [pc, #136]	; (8004cb0 <TIM_OC3_SetConfig+0xec>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	4a1e      	ldr	r2, [pc, #120]	; (8004cb4 <TIM_OC3_SetConfig+0xf0>)
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a1a      	ldr	r2, [pc, #104]	; (8004cac <TIM_OC3_SetConfig+0xe8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d007      	beq.n	8004c56 <TIM_OC3_SetConfig+0x92>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a1b      	ldr	r2, [pc, #108]	; (8004cb8 <TIM_OC3_SetConfig+0xf4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d003      	beq.n	8004c56 <TIM_OC3_SetConfig+0x92>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a1a      	ldr	r2, [pc, #104]	; (8004cbc <TIM_OC3_SetConfig+0xf8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d113      	bne.n	8004c7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	4a19      	ldr	r2, [pc, #100]	; (8004cc0 <TIM_OC3_SetConfig+0xfc>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	4a18      	ldr	r2, [pc, #96]	; (8004cc4 <TIM_OC3_SetConfig+0x100>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	621a      	str	r2, [r3, #32]
}
 8004c98:	46c0      	nop			; (mov r8, r8)
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	b006      	add	sp, #24
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	fffffeff 	.word	0xfffffeff
 8004ca4:	fffeff8f 	.word	0xfffeff8f
 8004ca8:	fffffdff 	.word	0xfffffdff
 8004cac:	40012c00 	.word	0x40012c00
 8004cb0:	fffff7ff 	.word	0xfffff7ff
 8004cb4:	fffffbff 	.word	0xfffffbff
 8004cb8:	40014400 	.word	0x40014400
 8004cbc:	40014800 	.word	0x40014800
 8004cc0:	ffffefff 	.word	0xffffefff
 8004cc4:	ffffdfff 	.word	0xffffdfff

08004cc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	4a26      	ldr	r2, [pc, #152]	; (8004d70 <TIM_OC4_SetConfig+0xa8>)
 8004cd8:	401a      	ands	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4a20      	ldr	r2, [pc, #128]	; (8004d74 <TIM_OC4_SetConfig+0xac>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4a1f      	ldr	r2, [pc, #124]	; (8004d78 <TIM_OC4_SetConfig+0xb0>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	021b      	lsls	r3, r3, #8
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	4a1b      	ldr	r2, [pc, #108]	; (8004d7c <TIM_OC4_SetConfig+0xb4>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	031b      	lsls	r3, r3, #12
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a17      	ldr	r2, [pc, #92]	; (8004d80 <TIM_OC4_SetConfig+0xb8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d007      	beq.n	8004d38 <TIM_OC4_SetConfig+0x70>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a16      	ldr	r2, [pc, #88]	; (8004d84 <TIM_OC4_SetConfig+0xbc>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_OC4_SetConfig+0x70>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a15      	ldr	r2, [pc, #84]	; (8004d88 <TIM_OC4_SetConfig+0xc0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d109      	bne.n	8004d4c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	4a14      	ldr	r2, [pc, #80]	; (8004d8c <TIM_OC4_SetConfig+0xc4>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	019b      	lsls	r3, r3, #6
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	621a      	str	r2, [r3, #32]
}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	b006      	add	sp, #24
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	46c0      	nop			; (mov r8, r8)
 8004d70:	ffffefff 	.word	0xffffefff
 8004d74:	feff8fff 	.word	0xfeff8fff
 8004d78:	fffffcff 	.word	0xfffffcff
 8004d7c:	ffffdfff 	.word	0xffffdfff
 8004d80:	40012c00 	.word	0x40012c00
 8004d84:	40014400 	.word	0x40014400
 8004d88:	40014800 	.word	0x40014800
 8004d8c:	ffffbfff 	.word	0xffffbfff

08004d90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	4a23      	ldr	r2, [pc, #140]	; (8004e2c <TIM_OC5_SetConfig+0x9c>)
 8004da0:	401a      	ands	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4a1d      	ldr	r2, [pc, #116]	; (8004e30 <TIM_OC5_SetConfig+0xa0>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	4a19      	ldr	r2, [pc, #100]	; (8004e34 <TIM_OC5_SetConfig+0xa4>)
 8004dce:	4013      	ands	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	041b      	lsls	r3, r3, #16
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a15      	ldr	r2, [pc, #84]	; (8004e38 <TIM_OC5_SetConfig+0xa8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d007      	beq.n	8004df6 <TIM_OC5_SetConfig+0x66>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a14      	ldr	r2, [pc, #80]	; (8004e3c <TIM_OC5_SetConfig+0xac>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d003      	beq.n	8004df6 <TIM_OC5_SetConfig+0x66>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a13      	ldr	r2, [pc, #76]	; (8004e40 <TIM_OC5_SetConfig+0xb0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d109      	bne.n	8004e0a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	4a0c      	ldr	r2, [pc, #48]	; (8004e2c <TIM_OC5_SetConfig+0x9c>)
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	621a      	str	r2, [r3, #32]
}
 8004e24:	46c0      	nop			; (mov r8, r8)
 8004e26:	46bd      	mov	sp, r7
 8004e28:	b006      	add	sp, #24
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	fffeffff 	.word	0xfffeffff
 8004e30:	fffeff8f 	.word	0xfffeff8f
 8004e34:	fffdffff 	.word	0xfffdffff
 8004e38:	40012c00 	.word	0x40012c00
 8004e3c:	40014400 	.word	0x40014400
 8004e40:	40014800 	.word	0x40014800

08004e44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	4a24      	ldr	r2, [pc, #144]	; (8004ee4 <TIM_OC6_SetConfig+0xa0>)
 8004e54:	401a      	ands	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ee8 <TIM_OC6_SetConfig+0xa4>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	021b      	lsls	r3, r3, #8
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	4a1a      	ldr	r2, [pc, #104]	; (8004eec <TIM_OC6_SetConfig+0xa8>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	051b      	lsls	r3, r3, #20
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a16      	ldr	r2, [pc, #88]	; (8004ef0 <TIM_OC6_SetConfig+0xac>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d007      	beq.n	8004eac <TIM_OC6_SetConfig+0x68>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a15      	ldr	r2, [pc, #84]	; (8004ef4 <TIM_OC6_SetConfig+0xb0>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d003      	beq.n	8004eac <TIM_OC6_SetConfig+0x68>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a14      	ldr	r2, [pc, #80]	; (8004ef8 <TIM_OC6_SetConfig+0xb4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d109      	bne.n	8004ec0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	4a13      	ldr	r2, [pc, #76]	; (8004efc <TIM_OC6_SetConfig+0xb8>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	029b      	lsls	r3, r3, #10
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	621a      	str	r2, [r3, #32]
}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	46bd      	mov	sp, r7
 8004ede:	b006      	add	sp, #24
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	ffefffff 	.word	0xffefffff
 8004ee8:	feff8fff 	.word	0xfeff8fff
 8004eec:	ffdfffff 	.word	0xffdfffff
 8004ef0:	40012c00 	.word	0x40012c00
 8004ef4:	40014400 	.word	0x40014400
 8004ef8:	40014800 	.word	0x40014800
 8004efc:	fffbffff 	.word	0xfffbffff

08004f00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	2201      	movs	r2, #1
 8004f18:	4393      	bics	r3, r2
 8004f1a:	001a      	movs	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	22f0      	movs	r2, #240	; 0xf0
 8004f2a:	4393      	bics	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	220a      	movs	r2, #10
 8004f3c:	4393      	bics	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	621a      	str	r2, [r3, #32]
}
 8004f54:	46c0      	nop			; (mov r8, r8)
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b006      	add	sp, #24
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	2210      	movs	r2, #16
 8004f6e:	4393      	bics	r3, r2
 8004f70:	001a      	movs	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	4a0d      	ldr	r2, [pc, #52]	; (8004fbc <TIM_TI2_ConfigInputStage+0x60>)
 8004f86:	4013      	ands	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	031b      	lsls	r3, r3, #12
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	22a0      	movs	r2, #160	; 0xa0
 8004f98:	4393      	bics	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	621a      	str	r2, [r3, #32]
}
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	b006      	add	sp, #24
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	ffff0fff 	.word	0xffff0fff

08004fc0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4a08      	ldr	r2, [pc, #32]	; (8004ff4 <TIM_ITRx_SetConfig+0x34>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	2207      	movs	r2, #7
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	609a      	str	r2, [r3, #8]
}
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	46bd      	mov	sp, r7
 8004fee:	b004      	add	sp, #16
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	ffcfff8f 	.word	0xffcfff8f

08004ff8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
 8005004:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	4a09      	ldr	r2, [pc, #36]	; (8005034 <TIM_ETR_SetConfig+0x3c>)
 8005010:	4013      	ands	r3, r2
 8005012:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	021a      	lsls	r2, r3, #8
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	431a      	orrs	r2, r3
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4313      	orrs	r3, r2
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	609a      	str	r2, [r3, #8]
}
 800502c:	46c0      	nop			; (mov r8, r8)
 800502e:	46bd      	mov	sp, r7
 8005030:	b006      	add	sp, #24
 8005032:	bd80      	pop	{r7, pc}
 8005034:	ffff00ff 	.word	0xffff00ff

08005038 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	221f      	movs	r2, #31
 8005048:	4013      	ands	r3, r2
 800504a:	2201      	movs	r2, #1
 800504c:	409a      	lsls	r2, r3
 800504e:	0013      	movs	r3, r2
 8005050:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	43d2      	mvns	r2, r2
 800505a:	401a      	ands	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6a1a      	ldr	r2, [r3, #32]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	211f      	movs	r1, #31
 8005068:	400b      	ands	r3, r1
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	4099      	lsls	r1, r3
 800506e:	000b      	movs	r3, r1
 8005070:	431a      	orrs	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	46bd      	mov	sp, r7
 800507a:	b006      	add	sp, #24
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	223c      	movs	r2, #60	; 0x3c
 800508e:	5c9b      	ldrb	r3, [r3, r2]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005094:	2302      	movs	r3, #2
 8005096:	e050      	b.n	800513a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	223c      	movs	r2, #60	; 0x3c
 800509c:	2101      	movs	r1, #1
 800509e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	223d      	movs	r2, #61	; 0x3d
 80050a4:	2102      	movs	r1, #2
 80050a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a21      	ldr	r2, [pc, #132]	; (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d108      	bne.n	80050d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4a20      	ldr	r2, [pc, #128]	; (8005148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050c6:	4013      	ands	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2270      	movs	r2, #112	; 0x70
 80050d8:	4393      	bics	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a14      	ldr	r2, [pc, #80]	; (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d00a      	beq.n	800510e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	2380      	movs	r3, #128	; 0x80
 80050fe:	05db      	lsls	r3, r3, #23
 8005100:	429a      	cmp	r2, r3
 8005102:	d004      	beq.n	800510e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a10      	ldr	r2, [pc, #64]	; (800514c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d10c      	bne.n	8005128 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2280      	movs	r2, #128	; 0x80
 8005112:	4393      	bics	r3, r2
 8005114:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	4313      	orrs	r3, r2
 800511e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	223d      	movs	r2, #61	; 0x3d
 800512c:	2101      	movs	r1, #1
 800512e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	223c      	movs	r2, #60	; 0x3c
 8005134:	2100      	movs	r1, #0
 8005136:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	0018      	movs	r0, r3
 800513c:	46bd      	mov	sp, r7
 800513e:	b004      	add	sp, #16
 8005140:	bd80      	pop	{r7, pc}
 8005142:	46c0      	nop			; (mov r8, r8)
 8005144:	40012c00 	.word	0x40012c00
 8005148:	ff0fffff 	.word	0xff0fffff
 800514c:	40000400 	.word	0x40000400

08005150 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	223c      	movs	r2, #60	; 0x3c
 8005162:	5c9b      	ldrb	r3, [r3, r2]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d101      	bne.n	800516c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005168:	2302      	movs	r3, #2
 800516a:	e079      	b.n	8005260 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	223c      	movs	r2, #60	; 0x3c
 8005170:	2101      	movs	r1, #1
 8005172:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	22ff      	movs	r2, #255	; 0xff
 8005178:	4393      	bics	r3, r2
 800517a:	001a      	movs	r2, r3
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4a38      	ldr	r2, [pc, #224]	; (8005268 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005188:	401a      	ands	r2, r3
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4a35      	ldr	r2, [pc, #212]	; (800526c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005196:	401a      	ands	r2, r3
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	4313      	orrs	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4a33      	ldr	r2, [pc, #204]	; (8005270 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80051a4:	401a      	ands	r2, r3
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4a30      	ldr	r2, [pc, #192]	; (8005274 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80051b2:	401a      	ands	r2, r3
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4a2e      	ldr	r2, [pc, #184]	; (8005278 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80051c0:	401a      	ands	r2, r3
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4a2b      	ldr	r2, [pc, #172]	; (800527c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80051ce:	401a      	ands	r2, r3
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4a29      	ldr	r2, [pc, #164]	; (8005280 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80051dc:	401a      	ands	r2, r3
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	041b      	lsls	r3, r3, #16
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a25      	ldr	r2, [pc, #148]	; (8005284 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d106      	bne.n	8005200 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4a24      	ldr	r2, [pc, #144]	; (8005288 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80051f6:	401a      	ands	r2, r3
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a1f      	ldr	r2, [pc, #124]	; (8005284 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d121      	bne.n	800524e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4a1f      	ldr	r2, [pc, #124]	; (800528c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800520e:	401a      	ands	r2, r3
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	051b      	lsls	r3, r3, #20
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4a1c      	ldr	r2, [pc, #112]	; (8005290 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800521e:	401a      	ands	r2, r3
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	4313      	orrs	r3, r2
 8005226:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4a1a      	ldr	r2, [pc, #104]	; (8005294 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800522c:	401a      	ands	r2, r3
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a12      	ldr	r2, [pc, #72]	; (8005284 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d106      	bne.n	800524e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4a15      	ldr	r2, [pc, #84]	; (8005298 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8005244:	401a      	ands	r2, r3
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	223c      	movs	r2, #60	; 0x3c
 800525a:	2100      	movs	r1, #0
 800525c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	0018      	movs	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	b004      	add	sp, #16
 8005266:	bd80      	pop	{r7, pc}
 8005268:	fffffcff 	.word	0xfffffcff
 800526c:	fffffbff 	.word	0xfffffbff
 8005270:	fffff7ff 	.word	0xfffff7ff
 8005274:	ffffefff 	.word	0xffffefff
 8005278:	ffffdfff 	.word	0xffffdfff
 800527c:	ffffbfff 	.word	0xffffbfff
 8005280:	fff0ffff 	.word	0xfff0ffff
 8005284:	40012c00 	.word	0x40012c00
 8005288:	efffffff 	.word	0xefffffff
 800528c:	ff0fffff 	.word	0xff0fffff
 8005290:	feffffff 	.word	0xfeffffff
 8005294:	fdffffff 	.word	0xfdffffff
 8005298:	dfffffff 	.word	0xdfffffff

0800529c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e046      	b.n	800533c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2288      	movs	r2, #136	; 0x88
 80052b2:	589b      	ldr	r3, [r3, r2]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d107      	bne.n	80052c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2284      	movs	r2, #132	; 0x84
 80052bc:	2100      	movs	r1, #0
 80052be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	0018      	movs	r0, r3
 80052c4:	f7fd fcac 	bl	8002c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2288      	movs	r2, #136	; 0x88
 80052cc:	2124      	movs	r1, #36	; 0x24
 80052ce:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2101      	movs	r1, #1
 80052dc:	438a      	bics	r2, r1
 80052de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	0018      	movs	r0, r3
 80052e4:	f000 fbd0 	bl	8005a88 <UART_SetConfig>
 80052e8:	0003      	movs	r3, r0
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e024      	b.n	800533c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	0018      	movs	r0, r3
 80052fe:	f000 fe3b 	bl	8005f78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	490d      	ldr	r1, [pc, #52]	; (8005344 <HAL_UART_Init+0xa8>)
 800530e:	400a      	ands	r2, r1
 8005310:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	212a      	movs	r1, #42	; 0x2a
 800531e:	438a      	bics	r2, r1
 8005320:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2101      	movs	r1, #1
 800532e:	430a      	orrs	r2, r1
 8005330:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	0018      	movs	r0, r3
 8005336:	f000 fed3 	bl	80060e0 <UART_CheckIdleState>
 800533a:	0003      	movs	r3, r0
}
 800533c:	0018      	movs	r0, r3
 800533e:	46bd      	mov	sp, r7
 8005340:	b002      	add	sp, #8
 8005342:	bd80      	pop	{r7, pc}
 8005344:	ffffb7ff 	.word	0xffffb7ff

08005348 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	1dbb      	adds	r3, r7, #6
 8005354:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	228c      	movs	r2, #140	; 0x8c
 800535a:	589b      	ldr	r3, [r3, r2]
 800535c:	2b20      	cmp	r3, #32
 800535e:	d14a      	bne.n	80053f6 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_UART_Receive_IT+0x26>
 8005366:	1dbb      	adds	r3, r7, #6
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e042      	b.n	80053f8 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	2380      	movs	r3, #128	; 0x80
 8005378:	015b      	lsls	r3, r3, #5
 800537a:	429a      	cmp	r2, r3
 800537c:	d109      	bne.n	8005392 <HAL_UART_Receive_IT+0x4a>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d105      	bne.n	8005392 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2201      	movs	r2, #1
 800538a:	4013      	ands	r3, r2
 800538c:	d001      	beq.n	8005392 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e032      	b.n	80053f8 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a18      	ldr	r2, [pc, #96]	; (8005400 <HAL_UART_Receive_IT+0xb8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d020      	beq.n	80053e4 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	2380      	movs	r3, #128	; 0x80
 80053aa:	041b      	lsls	r3, r3, #16
 80053ac:	4013      	ands	r3, r2
 80053ae:	d019      	beq.n	80053e4 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053b0:	f3ef 8310 	mrs	r3, PRIMASK
 80053b4:	613b      	str	r3, [r7, #16]
  return(result);
 80053b6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053b8:	61fb      	str	r3, [r7, #28]
 80053ba:	2301      	movs	r3, #1
 80053bc:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f383 8810 	msr	PRIMASK, r3
}
 80053c4:	46c0      	nop			; (mov r8, r8)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2180      	movs	r1, #128	; 0x80
 80053d2:	04c9      	lsls	r1, r1, #19
 80053d4:	430a      	orrs	r2, r1
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	f383 8810 	msr	PRIMASK, r3
}
 80053e2:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80053e4:	1dbb      	adds	r3, r7, #6
 80053e6:	881a      	ldrh	r2, [r3, #0]
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	0018      	movs	r0, r3
 80053ee:	f000 ff8d 	bl	800630c <UART_Start_Receive_IT>
 80053f2:	0003      	movs	r3, r0
 80053f4:	e000      	b.n	80053f8 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80053f6:	2302      	movs	r3, #2
  }
}
 80053f8:	0018      	movs	r0, r3
 80053fa:	46bd      	mov	sp, r7
 80053fc:	b008      	add	sp, #32
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40008000 	.word	0x40008000

08005404 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005404:	b5b0      	push	{r4, r5, r7, lr}
 8005406:	b0aa      	sub	sp, #168	; 0xa8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	22a4      	movs	r2, #164	; 0xa4
 8005414:	18b9      	adds	r1, r7, r2
 8005416:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	20a0      	movs	r0, #160	; 0xa0
 8005420:	1839      	adds	r1, r7, r0
 8005422:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	249c      	movs	r4, #156	; 0x9c
 800542c:	1939      	adds	r1, r7, r4
 800542e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005430:	0011      	movs	r1, r2
 8005432:	18bb      	adds	r3, r7, r2
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4aa2      	ldr	r2, [pc, #648]	; (80056c0 <HAL_UART_IRQHandler+0x2bc>)
 8005438:	4013      	ands	r3, r2
 800543a:	2298      	movs	r2, #152	; 0x98
 800543c:	18bd      	adds	r5, r7, r2
 800543e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8005440:	18bb      	adds	r3, r7, r2
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d11a      	bne.n	800547e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005448:	187b      	adds	r3, r7, r1
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2220      	movs	r2, #32
 800544e:	4013      	ands	r3, r2
 8005450:	d015      	beq.n	800547e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005452:	183b      	adds	r3, r7, r0
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2220      	movs	r2, #32
 8005458:	4013      	ands	r3, r2
 800545a:	d105      	bne.n	8005468 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800545c:	193b      	adds	r3, r7, r4
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	2380      	movs	r3, #128	; 0x80
 8005462:	055b      	lsls	r3, r3, #21
 8005464:	4013      	ands	r3, r2
 8005466:	d00a      	beq.n	800547e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800546c:	2b00      	cmp	r3, #0
 800546e:	d100      	bne.n	8005472 <HAL_UART_IRQHandler+0x6e>
 8005470:	e2dc      	b.n	8005a2c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	0010      	movs	r0, r2
 800547a:	4798      	blx	r3
      }
      return;
 800547c:	e2d6      	b.n	8005a2c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800547e:	2398      	movs	r3, #152	; 0x98
 8005480:	18fb      	adds	r3, r7, r3
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d100      	bne.n	800548a <HAL_UART_IRQHandler+0x86>
 8005488:	e122      	b.n	80056d0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800548a:	239c      	movs	r3, #156	; 0x9c
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a8c      	ldr	r2, [pc, #560]	; (80056c4 <HAL_UART_IRQHandler+0x2c0>)
 8005492:	4013      	ands	r3, r2
 8005494:	d106      	bne.n	80054a4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005496:	23a0      	movs	r3, #160	; 0xa0
 8005498:	18fb      	adds	r3, r7, r3
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a8a      	ldr	r2, [pc, #552]	; (80056c8 <HAL_UART_IRQHandler+0x2c4>)
 800549e:	4013      	ands	r3, r2
 80054a0:	d100      	bne.n	80054a4 <HAL_UART_IRQHandler+0xa0>
 80054a2:	e115      	b.n	80056d0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054a4:	23a4      	movs	r3, #164	; 0xa4
 80054a6:	18fb      	adds	r3, r7, r3
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2201      	movs	r2, #1
 80054ac:	4013      	ands	r3, r2
 80054ae:	d012      	beq.n	80054d6 <HAL_UART_IRQHandler+0xd2>
 80054b0:	23a0      	movs	r3, #160	; 0xa0
 80054b2:	18fb      	adds	r3, r7, r3
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	2380      	movs	r3, #128	; 0x80
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	4013      	ands	r3, r2
 80054bc:	d00b      	beq.n	80054d6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2201      	movs	r2, #1
 80054c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2290      	movs	r2, #144	; 0x90
 80054ca:	589b      	ldr	r3, [r3, r2]
 80054cc:	2201      	movs	r2, #1
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2190      	movs	r1, #144	; 0x90
 80054d4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054d6:	23a4      	movs	r3, #164	; 0xa4
 80054d8:	18fb      	adds	r3, r7, r3
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2202      	movs	r2, #2
 80054de:	4013      	ands	r3, r2
 80054e0:	d011      	beq.n	8005506 <HAL_UART_IRQHandler+0x102>
 80054e2:	239c      	movs	r3, #156	; 0x9c
 80054e4:	18fb      	adds	r3, r7, r3
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2201      	movs	r2, #1
 80054ea:	4013      	ands	r3, r2
 80054ec:	d00b      	beq.n	8005506 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2202      	movs	r2, #2
 80054f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2290      	movs	r2, #144	; 0x90
 80054fa:	589b      	ldr	r3, [r3, r2]
 80054fc:	2204      	movs	r2, #4
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2190      	movs	r1, #144	; 0x90
 8005504:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005506:	23a4      	movs	r3, #164	; 0xa4
 8005508:	18fb      	adds	r3, r7, r3
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2204      	movs	r2, #4
 800550e:	4013      	ands	r3, r2
 8005510:	d011      	beq.n	8005536 <HAL_UART_IRQHandler+0x132>
 8005512:	239c      	movs	r3, #156	; 0x9c
 8005514:	18fb      	adds	r3, r7, r3
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2201      	movs	r2, #1
 800551a:	4013      	ands	r3, r2
 800551c:	d00b      	beq.n	8005536 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2204      	movs	r2, #4
 8005524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2290      	movs	r2, #144	; 0x90
 800552a:	589b      	ldr	r3, [r3, r2]
 800552c:	2202      	movs	r2, #2
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2190      	movs	r1, #144	; 0x90
 8005534:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005536:	23a4      	movs	r3, #164	; 0xa4
 8005538:	18fb      	adds	r3, r7, r3
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2208      	movs	r2, #8
 800553e:	4013      	ands	r3, r2
 8005540:	d017      	beq.n	8005572 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005542:	23a0      	movs	r3, #160	; 0xa0
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2220      	movs	r2, #32
 800554a:	4013      	ands	r3, r2
 800554c:	d105      	bne.n	800555a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800554e:	239c      	movs	r3, #156	; 0x9c
 8005550:	18fb      	adds	r3, r7, r3
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a5b      	ldr	r2, [pc, #364]	; (80056c4 <HAL_UART_IRQHandler+0x2c0>)
 8005556:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005558:	d00b      	beq.n	8005572 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2208      	movs	r2, #8
 8005560:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2290      	movs	r2, #144	; 0x90
 8005566:	589b      	ldr	r3, [r3, r2]
 8005568:	2208      	movs	r2, #8
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2190      	movs	r1, #144	; 0x90
 8005570:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005572:	23a4      	movs	r3, #164	; 0xa4
 8005574:	18fb      	adds	r3, r7, r3
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	2380      	movs	r3, #128	; 0x80
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	4013      	ands	r3, r2
 800557e:	d013      	beq.n	80055a8 <HAL_UART_IRQHandler+0x1a4>
 8005580:	23a0      	movs	r3, #160	; 0xa0
 8005582:	18fb      	adds	r3, r7, r3
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	2380      	movs	r3, #128	; 0x80
 8005588:	04db      	lsls	r3, r3, #19
 800558a:	4013      	ands	r3, r2
 800558c:	d00c      	beq.n	80055a8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2280      	movs	r2, #128	; 0x80
 8005594:	0112      	lsls	r2, r2, #4
 8005596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2290      	movs	r2, #144	; 0x90
 800559c:	589b      	ldr	r3, [r3, r2]
 800559e:	2220      	movs	r2, #32
 80055a0:	431a      	orrs	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2190      	movs	r1, #144	; 0x90
 80055a6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2290      	movs	r2, #144	; 0x90
 80055ac:	589b      	ldr	r3, [r3, r2]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d100      	bne.n	80055b4 <HAL_UART_IRQHandler+0x1b0>
 80055b2:	e23d      	b.n	8005a30 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80055b4:	23a4      	movs	r3, #164	; 0xa4
 80055b6:	18fb      	adds	r3, r7, r3
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2220      	movs	r2, #32
 80055bc:	4013      	ands	r3, r2
 80055be:	d015      	beq.n	80055ec <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80055c0:	23a0      	movs	r3, #160	; 0xa0
 80055c2:	18fb      	adds	r3, r7, r3
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2220      	movs	r2, #32
 80055c8:	4013      	ands	r3, r2
 80055ca:	d106      	bne.n	80055da <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80055cc:	239c      	movs	r3, #156	; 0x9c
 80055ce:	18fb      	adds	r3, r7, r3
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	2380      	movs	r3, #128	; 0x80
 80055d4:	055b      	lsls	r3, r3, #21
 80055d6:	4013      	ands	r3, r2
 80055d8:	d008      	beq.n	80055ec <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d004      	beq.n	80055ec <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	0010      	movs	r0, r2
 80055ea:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2290      	movs	r2, #144	; 0x90
 80055f0:	589b      	ldr	r3, [r3, r2]
 80055f2:	2194      	movs	r1, #148	; 0x94
 80055f4:	187a      	adds	r2, r7, r1
 80055f6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2240      	movs	r2, #64	; 0x40
 8005600:	4013      	ands	r3, r2
 8005602:	2b40      	cmp	r3, #64	; 0x40
 8005604:	d004      	beq.n	8005610 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005606:	187b      	adds	r3, r7, r1
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2228      	movs	r2, #40	; 0x28
 800560c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800560e:	d04c      	beq.n	80056aa <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	0018      	movs	r0, r3
 8005614:	f000 ff9e 	bl	8006554 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	2240      	movs	r2, #64	; 0x40
 8005620:	4013      	ands	r3, r2
 8005622:	2b40      	cmp	r3, #64	; 0x40
 8005624:	d13c      	bne.n	80056a0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005626:	f3ef 8310 	mrs	r3, PRIMASK
 800562a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800562c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800562e:	2090      	movs	r0, #144	; 0x90
 8005630:	183a      	adds	r2, r7, r0
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	2301      	movs	r3, #1
 8005636:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800563a:	f383 8810 	msr	PRIMASK, r3
}
 800563e:	46c0      	nop			; (mov r8, r8)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2140      	movs	r1, #64	; 0x40
 800564c:	438a      	bics	r2, r1
 800564e:	609a      	str	r2, [r3, #8]
 8005650:	183b      	adds	r3, r7, r0
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005656:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005658:	f383 8810 	msr	PRIMASK, r3
}
 800565c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2280      	movs	r2, #128	; 0x80
 8005662:	589b      	ldr	r3, [r3, r2]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d016      	beq.n	8005696 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2280      	movs	r2, #128	; 0x80
 800566c:	589b      	ldr	r3, [r3, r2]
 800566e:	4a17      	ldr	r2, [pc, #92]	; (80056cc <HAL_UART_IRQHandler+0x2c8>)
 8005670:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2280      	movs	r2, #128	; 0x80
 8005676:	589b      	ldr	r3, [r3, r2]
 8005678:	0018      	movs	r0, r3
 800567a:	f7fd fd6b 	bl	8003154 <HAL_DMA_Abort_IT>
 800567e:	1e03      	subs	r3, r0, #0
 8005680:	d01c      	beq.n	80056bc <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2280      	movs	r2, #128	; 0x80
 8005686:	589b      	ldr	r3, [r3, r2]
 8005688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	2180      	movs	r1, #128	; 0x80
 800568e:	5852      	ldr	r2, [r2, r1]
 8005690:	0010      	movs	r0, r2
 8005692:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005694:	e012      	b.n	80056bc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	0018      	movs	r0, r3
 800569a:	f000 f9e1 	bl	8005a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800569e:	e00d      	b.n	80056bc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	0018      	movs	r0, r3
 80056a4:	f000 f9dc 	bl	8005a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a8:	e008      	b.n	80056bc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	0018      	movs	r0, r3
 80056ae:	f000 f9d7 	bl	8005a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2290      	movs	r2, #144	; 0x90
 80056b6:	2100      	movs	r1, #0
 80056b8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80056ba:	e1b9      	b.n	8005a30 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056bc:	46c0      	nop			; (mov r8, r8)
    return;
 80056be:	e1b7      	b.n	8005a30 <HAL_UART_IRQHandler+0x62c>
 80056c0:	0000080f 	.word	0x0000080f
 80056c4:	10000001 	.word	0x10000001
 80056c8:	04000120 	.word	0x04000120
 80056cc:	08006621 	.word	0x08006621

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d000      	beq.n	80056da <HAL_UART_IRQHandler+0x2d6>
 80056d8:	e13e      	b.n	8005958 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80056da:	23a4      	movs	r3, #164	; 0xa4
 80056dc:	18fb      	adds	r3, r7, r3
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2210      	movs	r2, #16
 80056e2:	4013      	ands	r3, r2
 80056e4:	d100      	bne.n	80056e8 <HAL_UART_IRQHandler+0x2e4>
 80056e6:	e137      	b.n	8005958 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80056e8:	23a0      	movs	r3, #160	; 0xa0
 80056ea:	18fb      	adds	r3, r7, r3
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2210      	movs	r2, #16
 80056f0:	4013      	ands	r3, r2
 80056f2:	d100      	bne.n	80056f6 <HAL_UART_IRQHandler+0x2f2>
 80056f4:	e130      	b.n	8005958 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2210      	movs	r2, #16
 80056fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2240      	movs	r2, #64	; 0x40
 8005706:	4013      	ands	r3, r2
 8005708:	2b40      	cmp	r3, #64	; 0x40
 800570a:	d000      	beq.n	800570e <HAL_UART_IRQHandler+0x30a>
 800570c:	e0a4      	b.n	8005858 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2280      	movs	r2, #128	; 0x80
 8005712:	589b      	ldr	r3, [r3, r2]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	217e      	movs	r1, #126	; 0x7e
 800571a:	187b      	adds	r3, r7, r1
 800571c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800571e:	187b      	adds	r3, r7, r1
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d100      	bne.n	8005728 <HAL_UART_IRQHandler+0x324>
 8005726:	e185      	b.n	8005a34 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	225c      	movs	r2, #92	; 0x5c
 800572c:	5a9b      	ldrh	r3, [r3, r2]
 800572e:	187a      	adds	r2, r7, r1
 8005730:	8812      	ldrh	r2, [r2, #0]
 8005732:	429a      	cmp	r2, r3
 8005734:	d300      	bcc.n	8005738 <HAL_UART_IRQHandler+0x334>
 8005736:	e17d      	b.n	8005a34 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	187a      	adds	r2, r7, r1
 800573c:	215e      	movs	r1, #94	; 0x5e
 800573e:	8812      	ldrh	r2, [r2, #0]
 8005740:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2280      	movs	r2, #128	; 0x80
 8005746:	589b      	ldr	r3, [r3, r2]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2220      	movs	r2, #32
 800574e:	4013      	ands	r3, r2
 8005750:	d170      	bne.n	8005834 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005752:	f3ef 8310 	mrs	r3, PRIMASK
 8005756:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800575a:	67bb      	str	r3, [r7, #120]	; 0x78
 800575c:	2301      	movs	r3, #1
 800575e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005762:	f383 8810 	msr	PRIMASK, r3
}
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	49b4      	ldr	r1, [pc, #720]	; (8005a44 <HAL_UART_IRQHandler+0x640>)
 8005774:	400a      	ands	r2, r1
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800577a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800577c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577e:	f383 8810 	msr	PRIMASK, r3
}
 8005782:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005784:	f3ef 8310 	mrs	r3, PRIMASK
 8005788:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800578a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578c:	677b      	str	r3, [r7, #116]	; 0x74
 800578e:	2301      	movs	r3, #1
 8005790:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005794:	f383 8810 	msr	PRIMASK, r3
}
 8005798:	46c0      	nop			; (mov r8, r8)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2101      	movs	r1, #1
 80057a6:	438a      	bics	r2, r1
 80057a8:	609a      	str	r2, [r3, #8]
 80057aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ac:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057b0:	f383 8810 	msr	PRIMASK, r3
}
 80057b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057b6:	f3ef 8310 	mrs	r3, PRIMASK
 80057ba:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80057bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057be:	673b      	str	r3, [r7, #112]	; 0x70
 80057c0:	2301      	movs	r3, #1
 80057c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c6:	f383 8810 	msr	PRIMASK, r3
}
 80057ca:	46c0      	nop			; (mov r8, r8)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689a      	ldr	r2, [r3, #8]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2140      	movs	r1, #64	; 0x40
 80057d8:	438a      	bics	r2, r1
 80057da:	609a      	str	r2, [r3, #8]
 80057dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057de:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e2:	f383 8810 	msr	PRIMASK, r3
}
 80057e6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	228c      	movs	r2, #140	; 0x8c
 80057ec:	2120      	movs	r1, #32
 80057ee:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f6:	f3ef 8310 	mrs	r3, PRIMASK
 80057fa:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80057fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005800:	2301      	movs	r3, #1
 8005802:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005804:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005806:	f383 8810 	msr	PRIMASK, r3
}
 800580a:	46c0      	nop			; (mov r8, r8)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2110      	movs	r1, #16
 8005818:	438a      	bics	r2, r1
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800581e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005822:	f383 8810 	msr	PRIMASK, r3
}
 8005826:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2280      	movs	r2, #128	; 0x80
 800582c:	589b      	ldr	r3, [r3, r2]
 800582e:	0018      	movs	r0, r3
 8005830:	f7fd fc2e 	bl	8003090 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	225c      	movs	r2, #92	; 0x5c
 800583e:	5a9a      	ldrh	r2, [r3, r2]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	215e      	movs	r1, #94	; 0x5e
 8005844:	5a5b      	ldrh	r3, [r3, r1]
 8005846:	b29b      	uxth	r3, r3
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	b29a      	uxth	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	0011      	movs	r1, r2
 8005850:	0018      	movs	r0, r3
 8005852:	f000 f90d 	bl	8005a70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005856:	e0ed      	b.n	8005a34 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	225c      	movs	r2, #92	; 0x5c
 800585c:	5a99      	ldrh	r1, [r3, r2]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	225e      	movs	r2, #94	; 0x5e
 8005862:	5a9b      	ldrh	r3, [r3, r2]
 8005864:	b29a      	uxth	r2, r3
 8005866:	208e      	movs	r0, #142	; 0x8e
 8005868:	183b      	adds	r3, r7, r0
 800586a:	1a8a      	subs	r2, r1, r2
 800586c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	225e      	movs	r2, #94	; 0x5e
 8005872:	5a9b      	ldrh	r3, [r3, r2]
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d100      	bne.n	800587c <HAL_UART_IRQHandler+0x478>
 800587a:	e0dd      	b.n	8005a38 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800587c:	183b      	adds	r3, r7, r0
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d100      	bne.n	8005886 <HAL_UART_IRQHandler+0x482>
 8005884:	e0d8      	b.n	8005a38 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005886:	f3ef 8310 	mrs	r3, PRIMASK
 800588a:	60fb      	str	r3, [r7, #12]
  return(result);
 800588c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800588e:	2488      	movs	r4, #136	; 0x88
 8005890:	193a      	adds	r2, r7, r4
 8005892:	6013      	str	r3, [r2, #0]
 8005894:	2301      	movs	r3, #1
 8005896:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f383 8810 	msr	PRIMASK, r3
}
 800589e:	46c0      	nop			; (mov r8, r8)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4967      	ldr	r1, [pc, #412]	; (8005a48 <HAL_UART_IRQHandler+0x644>)
 80058ac:	400a      	ands	r2, r1
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	193b      	adds	r3, r7, r4
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f383 8810 	msr	PRIMASK, r3
}
 80058bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058be:	f3ef 8310 	mrs	r3, PRIMASK
 80058c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80058c4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058c6:	2484      	movs	r4, #132	; 0x84
 80058c8:	193a      	adds	r2, r7, r4
 80058ca:	6013      	str	r3, [r2, #0]
 80058cc:	2301      	movs	r3, #1
 80058ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	f383 8810 	msr	PRIMASK, r3
}
 80058d6:	46c0      	nop			; (mov r8, r8)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	495a      	ldr	r1, [pc, #360]	; (8005a4c <HAL_UART_IRQHandler+0x648>)
 80058e4:	400a      	ands	r2, r1
 80058e6:	609a      	str	r2, [r3, #8]
 80058e8:	193b      	adds	r3, r7, r4
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	f383 8810 	msr	PRIMASK, r3
}
 80058f4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	228c      	movs	r2, #140	; 0x8c
 80058fa:	2120      	movs	r1, #32
 80058fc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800590a:	f3ef 8310 	mrs	r3, PRIMASK
 800590e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005912:	2480      	movs	r4, #128	; 0x80
 8005914:	193a      	adds	r2, r7, r4
 8005916:	6013      	str	r3, [r2, #0]
 8005918:	2301      	movs	r3, #1
 800591a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	f383 8810 	msr	PRIMASK, r3
}
 8005922:	46c0      	nop			; (mov r8, r8)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2110      	movs	r1, #16
 8005930:	438a      	bics	r2, r1
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	193b      	adds	r3, r7, r4
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	f383 8810 	msr	PRIMASK, r3
}
 8005940:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2202      	movs	r2, #2
 8005946:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005948:	183b      	adds	r3, r7, r0
 800594a:	881a      	ldrh	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	0011      	movs	r1, r2
 8005950:	0018      	movs	r0, r3
 8005952:	f000 f88d 	bl	8005a70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005956:	e06f      	b.n	8005a38 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005958:	23a4      	movs	r3, #164	; 0xa4
 800595a:	18fb      	adds	r3, r7, r3
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	2380      	movs	r3, #128	; 0x80
 8005960:	035b      	lsls	r3, r3, #13
 8005962:	4013      	ands	r3, r2
 8005964:	d010      	beq.n	8005988 <HAL_UART_IRQHandler+0x584>
 8005966:	239c      	movs	r3, #156	; 0x9c
 8005968:	18fb      	adds	r3, r7, r3
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	2380      	movs	r3, #128	; 0x80
 800596e:	03db      	lsls	r3, r3, #15
 8005970:	4013      	ands	r3, r2
 8005972:	d009      	beq.n	8005988 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2280      	movs	r2, #128	; 0x80
 800597a:	0352      	lsls	r2, r2, #13
 800597c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	0018      	movs	r0, r3
 8005982:	f001 faf1 	bl	8006f68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005986:	e05a      	b.n	8005a3e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005988:	23a4      	movs	r3, #164	; 0xa4
 800598a:	18fb      	adds	r3, r7, r3
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2280      	movs	r2, #128	; 0x80
 8005990:	4013      	ands	r3, r2
 8005992:	d016      	beq.n	80059c2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005994:	23a0      	movs	r3, #160	; 0xa0
 8005996:	18fb      	adds	r3, r7, r3
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2280      	movs	r2, #128	; 0x80
 800599c:	4013      	ands	r3, r2
 800599e:	d106      	bne.n	80059ae <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80059a0:	239c      	movs	r3, #156	; 0x9c
 80059a2:	18fb      	adds	r3, r7, r3
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	2380      	movs	r3, #128	; 0x80
 80059a8:	041b      	lsls	r3, r3, #16
 80059aa:	4013      	ands	r3, r2
 80059ac:	d009      	beq.n	80059c2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d042      	beq.n	8005a3c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	0010      	movs	r0, r2
 80059be:	4798      	blx	r3
    }
    return;
 80059c0:	e03c      	b.n	8005a3c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80059c2:	23a4      	movs	r3, #164	; 0xa4
 80059c4:	18fb      	adds	r3, r7, r3
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2240      	movs	r2, #64	; 0x40
 80059ca:	4013      	ands	r3, r2
 80059cc:	d00a      	beq.n	80059e4 <HAL_UART_IRQHandler+0x5e0>
 80059ce:	23a0      	movs	r3, #160	; 0xa0
 80059d0:	18fb      	adds	r3, r7, r3
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2240      	movs	r2, #64	; 0x40
 80059d6:	4013      	ands	r3, r2
 80059d8:	d004      	beq.n	80059e4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	0018      	movs	r0, r3
 80059de:	f000 fe36 	bl	800664e <UART_EndTransmit_IT>
    return;
 80059e2:	e02c      	b.n	8005a3e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80059e4:	23a4      	movs	r3, #164	; 0xa4
 80059e6:	18fb      	adds	r3, r7, r3
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	2380      	movs	r3, #128	; 0x80
 80059ec:	041b      	lsls	r3, r3, #16
 80059ee:	4013      	ands	r3, r2
 80059f0:	d00b      	beq.n	8005a0a <HAL_UART_IRQHandler+0x606>
 80059f2:	23a0      	movs	r3, #160	; 0xa0
 80059f4:	18fb      	adds	r3, r7, r3
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	2380      	movs	r3, #128	; 0x80
 80059fa:	05db      	lsls	r3, r3, #23
 80059fc:	4013      	ands	r3, r2
 80059fe:	d004      	beq.n	8005a0a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	0018      	movs	r0, r3
 8005a04:	f001 fac0 	bl	8006f88 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a08:	e019      	b.n	8005a3e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005a0a:	23a4      	movs	r3, #164	; 0xa4
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	2380      	movs	r3, #128	; 0x80
 8005a12:	045b      	lsls	r3, r3, #17
 8005a14:	4013      	ands	r3, r2
 8005a16:	d012      	beq.n	8005a3e <HAL_UART_IRQHandler+0x63a>
 8005a18:	23a0      	movs	r3, #160	; 0xa0
 8005a1a:	18fb      	adds	r3, r7, r3
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	da0d      	bge.n	8005a3e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	0018      	movs	r0, r3
 8005a26:	f001 faa7 	bl	8006f78 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a2a:	e008      	b.n	8005a3e <HAL_UART_IRQHandler+0x63a>
      return;
 8005a2c:	46c0      	nop			; (mov r8, r8)
 8005a2e:	e006      	b.n	8005a3e <HAL_UART_IRQHandler+0x63a>
    return;
 8005a30:	46c0      	nop			; (mov r8, r8)
 8005a32:	e004      	b.n	8005a3e <HAL_UART_IRQHandler+0x63a>
      return;
 8005a34:	46c0      	nop			; (mov r8, r8)
 8005a36:	e002      	b.n	8005a3e <HAL_UART_IRQHandler+0x63a>
      return;
 8005a38:	46c0      	nop			; (mov r8, r8)
 8005a3a:	e000      	b.n	8005a3e <HAL_UART_IRQHandler+0x63a>
    return;
 8005a3c:	46c0      	nop			; (mov r8, r8)
  }
}
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	b02a      	add	sp, #168	; 0xa8
 8005a42:	bdb0      	pop	{r4, r5, r7, pc}
 8005a44:	fffffeff 	.word	0xfffffeff
 8005a48:	fffffedf 	.word	0xfffffedf
 8005a4c:	effffffe 	.word	0xeffffffe

08005a50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a58:	46c0      	nop			; (mov r8, r8)
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	b002      	add	sp, #8
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a68:	46c0      	nop			; (mov r8, r8)
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	b002      	add	sp, #8
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	000a      	movs	r2, r1
 8005a7a:	1cbb      	adds	r3, r7, #2
 8005a7c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a7e:	46c0      	nop			; (mov r8, r8)
 8005a80:	46bd      	mov	sp, r7
 8005a82:	b002      	add	sp, #8
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a88:	b5b0      	push	{r4, r5, r7, lr}
 8005a8a:	b090      	sub	sp, #64	; 0x40
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a90:	231a      	movs	r3, #26
 8005a92:	2220      	movs	r2, #32
 8005a94:	189b      	adds	r3, r3, r2
 8005a96:	19db      	adds	r3, r3, r7
 8005a98:	2200      	movs	r2, #0
 8005a9a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	689a      	ldr	r2, [r3, #8]
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4ac4      	ldr	r2, [pc, #784]	; (8005dcc <UART_SetConfig+0x344>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	0019      	movs	r1, r3
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac6:	430b      	orrs	r3, r1
 8005ac8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	4abf      	ldr	r2, [pc, #764]	; (8005dd0 <UART_SetConfig+0x348>)
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	68d9      	ldr	r1, [r3, #12]
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	0003      	movs	r3, r0
 8005ae0:	430b      	orrs	r3, r1
 8005ae2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4ab9      	ldr	r2, [pc, #740]	; (8005dd4 <UART_SetConfig+0x34c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d004      	beq.n	8005afe <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005afa:	4313      	orrs	r3, r2
 8005afc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	4ab4      	ldr	r2, [pc, #720]	; (8005dd8 <UART_SetConfig+0x350>)
 8005b06:	4013      	ands	r3, r2
 8005b08:	0019      	movs	r1, r3
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b10:	430b      	orrs	r3, r1
 8005b12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1a:	220f      	movs	r2, #15
 8005b1c:	4393      	bics	r3, r2
 8005b1e:	0018      	movs	r0, r3
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	0003      	movs	r3, r0
 8005b2a:	430b      	orrs	r3, r1
 8005b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4aaa      	ldr	r2, [pc, #680]	; (8005ddc <UART_SetConfig+0x354>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d131      	bne.n	8005b9c <UART_SetConfig+0x114>
 8005b38:	4ba9      	ldr	r3, [pc, #676]	; (8005de0 <UART_SetConfig+0x358>)
 8005b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3c:	2203      	movs	r2, #3
 8005b3e:	4013      	ands	r3, r2
 8005b40:	2b03      	cmp	r3, #3
 8005b42:	d01d      	beq.n	8005b80 <UART_SetConfig+0xf8>
 8005b44:	d823      	bhi.n	8005b8e <UART_SetConfig+0x106>
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d00c      	beq.n	8005b64 <UART_SetConfig+0xdc>
 8005b4a:	d820      	bhi.n	8005b8e <UART_SetConfig+0x106>
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <UART_SetConfig+0xce>
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d00e      	beq.n	8005b72 <UART_SetConfig+0xea>
 8005b54:	e01b      	b.n	8005b8e <UART_SetConfig+0x106>
 8005b56:	231b      	movs	r3, #27
 8005b58:	2220      	movs	r2, #32
 8005b5a:	189b      	adds	r3, r3, r2
 8005b5c:	19db      	adds	r3, r3, r7
 8005b5e:	2200      	movs	r2, #0
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	e071      	b.n	8005c48 <UART_SetConfig+0x1c0>
 8005b64:	231b      	movs	r3, #27
 8005b66:	2220      	movs	r2, #32
 8005b68:	189b      	adds	r3, r3, r2
 8005b6a:	19db      	adds	r3, r3, r7
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	701a      	strb	r2, [r3, #0]
 8005b70:	e06a      	b.n	8005c48 <UART_SetConfig+0x1c0>
 8005b72:	231b      	movs	r3, #27
 8005b74:	2220      	movs	r2, #32
 8005b76:	189b      	adds	r3, r3, r2
 8005b78:	19db      	adds	r3, r3, r7
 8005b7a:	2204      	movs	r2, #4
 8005b7c:	701a      	strb	r2, [r3, #0]
 8005b7e:	e063      	b.n	8005c48 <UART_SetConfig+0x1c0>
 8005b80:	231b      	movs	r3, #27
 8005b82:	2220      	movs	r2, #32
 8005b84:	189b      	adds	r3, r3, r2
 8005b86:	19db      	adds	r3, r3, r7
 8005b88:	2208      	movs	r2, #8
 8005b8a:	701a      	strb	r2, [r3, #0]
 8005b8c:	e05c      	b.n	8005c48 <UART_SetConfig+0x1c0>
 8005b8e:	231b      	movs	r3, #27
 8005b90:	2220      	movs	r2, #32
 8005b92:	189b      	adds	r3, r3, r2
 8005b94:	19db      	adds	r3, r3, r7
 8005b96:	2210      	movs	r2, #16
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	e055      	b.n	8005c48 <UART_SetConfig+0x1c0>
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a90      	ldr	r2, [pc, #576]	; (8005de4 <UART_SetConfig+0x35c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d106      	bne.n	8005bb4 <UART_SetConfig+0x12c>
 8005ba6:	231b      	movs	r3, #27
 8005ba8:	2220      	movs	r2, #32
 8005baa:	189b      	adds	r3, r3, r2
 8005bac:	19db      	adds	r3, r3, r7
 8005bae:	2200      	movs	r2, #0
 8005bb0:	701a      	strb	r2, [r3, #0]
 8005bb2:	e049      	b.n	8005c48 <UART_SetConfig+0x1c0>
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a86      	ldr	r2, [pc, #536]	; (8005dd4 <UART_SetConfig+0x34c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d13e      	bne.n	8005c3c <UART_SetConfig+0x1b4>
 8005bbe:	4b88      	ldr	r3, [pc, #544]	; (8005de0 <UART_SetConfig+0x358>)
 8005bc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bc2:	23c0      	movs	r3, #192	; 0xc0
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	22c0      	movs	r2, #192	; 0xc0
 8005bca:	0112      	lsls	r2, r2, #4
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d027      	beq.n	8005c20 <UART_SetConfig+0x198>
 8005bd0:	22c0      	movs	r2, #192	; 0xc0
 8005bd2:	0112      	lsls	r2, r2, #4
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d82a      	bhi.n	8005c2e <UART_SetConfig+0x1a6>
 8005bd8:	2280      	movs	r2, #128	; 0x80
 8005bda:	0112      	lsls	r2, r2, #4
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d011      	beq.n	8005c04 <UART_SetConfig+0x17c>
 8005be0:	2280      	movs	r2, #128	; 0x80
 8005be2:	0112      	lsls	r2, r2, #4
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d822      	bhi.n	8005c2e <UART_SetConfig+0x1a6>
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d004      	beq.n	8005bf6 <UART_SetConfig+0x16e>
 8005bec:	2280      	movs	r2, #128	; 0x80
 8005bee:	00d2      	lsls	r2, r2, #3
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d00e      	beq.n	8005c12 <UART_SetConfig+0x18a>
 8005bf4:	e01b      	b.n	8005c2e <UART_SetConfig+0x1a6>
 8005bf6:	231b      	movs	r3, #27
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	189b      	adds	r3, r3, r2
 8005bfc:	19db      	adds	r3, r3, r7
 8005bfe:	2200      	movs	r2, #0
 8005c00:	701a      	strb	r2, [r3, #0]
 8005c02:	e021      	b.n	8005c48 <UART_SetConfig+0x1c0>
 8005c04:	231b      	movs	r3, #27
 8005c06:	2220      	movs	r2, #32
 8005c08:	189b      	adds	r3, r3, r2
 8005c0a:	19db      	adds	r3, r3, r7
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	701a      	strb	r2, [r3, #0]
 8005c10:	e01a      	b.n	8005c48 <UART_SetConfig+0x1c0>
 8005c12:	231b      	movs	r3, #27
 8005c14:	2220      	movs	r2, #32
 8005c16:	189b      	adds	r3, r3, r2
 8005c18:	19db      	adds	r3, r3, r7
 8005c1a:	2204      	movs	r2, #4
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	e013      	b.n	8005c48 <UART_SetConfig+0x1c0>
 8005c20:	231b      	movs	r3, #27
 8005c22:	2220      	movs	r2, #32
 8005c24:	189b      	adds	r3, r3, r2
 8005c26:	19db      	adds	r3, r3, r7
 8005c28:	2208      	movs	r2, #8
 8005c2a:	701a      	strb	r2, [r3, #0]
 8005c2c:	e00c      	b.n	8005c48 <UART_SetConfig+0x1c0>
 8005c2e:	231b      	movs	r3, #27
 8005c30:	2220      	movs	r2, #32
 8005c32:	189b      	adds	r3, r3, r2
 8005c34:	19db      	adds	r3, r3, r7
 8005c36:	2210      	movs	r2, #16
 8005c38:	701a      	strb	r2, [r3, #0]
 8005c3a:	e005      	b.n	8005c48 <UART_SetConfig+0x1c0>
 8005c3c:	231b      	movs	r3, #27
 8005c3e:	2220      	movs	r2, #32
 8005c40:	189b      	adds	r3, r3, r2
 8005c42:	19db      	adds	r3, r3, r7
 8005c44:	2210      	movs	r2, #16
 8005c46:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a61      	ldr	r2, [pc, #388]	; (8005dd4 <UART_SetConfig+0x34c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d000      	beq.n	8005c54 <UART_SetConfig+0x1cc>
 8005c52:	e092      	b.n	8005d7a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c54:	231b      	movs	r3, #27
 8005c56:	2220      	movs	r2, #32
 8005c58:	189b      	adds	r3, r3, r2
 8005c5a:	19db      	adds	r3, r3, r7
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d015      	beq.n	8005c8e <UART_SetConfig+0x206>
 8005c62:	dc18      	bgt.n	8005c96 <UART_SetConfig+0x20e>
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	d00d      	beq.n	8005c84 <UART_SetConfig+0x1fc>
 8005c68:	dc15      	bgt.n	8005c96 <UART_SetConfig+0x20e>
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d002      	beq.n	8005c74 <UART_SetConfig+0x1ec>
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d005      	beq.n	8005c7e <UART_SetConfig+0x1f6>
 8005c72:	e010      	b.n	8005c96 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c74:	f7fe f936 	bl	8003ee4 <HAL_RCC_GetPCLK1Freq>
 8005c78:	0003      	movs	r3, r0
 8005c7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c7c:	e014      	b.n	8005ca8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c7e:	4b5a      	ldr	r3, [pc, #360]	; (8005de8 <UART_SetConfig+0x360>)
 8005c80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c82:	e011      	b.n	8005ca8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c84:	f7fe f8a2 	bl	8003dcc <HAL_RCC_GetSysClockFreq>
 8005c88:	0003      	movs	r3, r0
 8005c8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c8c:	e00c      	b.n	8005ca8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c8e:	2380      	movs	r3, #128	; 0x80
 8005c90:	021b      	lsls	r3, r3, #8
 8005c92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c94:	e008      	b.n	8005ca8 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8005c96:	2300      	movs	r3, #0
 8005c98:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005c9a:	231a      	movs	r3, #26
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	189b      	adds	r3, r3, r2
 8005ca0:	19db      	adds	r3, r3, r7
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	701a      	strb	r2, [r3, #0]
        break;
 8005ca6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d100      	bne.n	8005cb0 <UART_SetConfig+0x228>
 8005cae:	e147      	b.n	8005f40 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cb4:	4b4d      	ldr	r3, [pc, #308]	; (8005dec <UART_SetConfig+0x364>)
 8005cb6:	0052      	lsls	r2, r2, #1
 8005cb8:	5ad3      	ldrh	r3, [r2, r3]
 8005cba:	0019      	movs	r1, r3
 8005cbc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005cbe:	f7fa fa21 	bl	8000104 <__udivsi3>
 8005cc2:	0003      	movs	r3, r0
 8005cc4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	0013      	movs	r3, r2
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	189b      	adds	r3, r3, r2
 8005cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d305      	bcc.n	8005ce2 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d906      	bls.n	8005cf0 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8005ce2:	231a      	movs	r3, #26
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	189b      	adds	r3, r3, r2
 8005ce8:	19db      	adds	r3, r3, r7
 8005cea:	2201      	movs	r2, #1
 8005cec:	701a      	strb	r2, [r3, #0]
 8005cee:	e127      	b.n	8005f40 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf2:	61bb      	str	r3, [r7, #24]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cfc:	4b3b      	ldr	r3, [pc, #236]	; (8005dec <UART_SetConfig+0x364>)
 8005cfe:	0052      	lsls	r2, r2, #1
 8005d00:	5ad3      	ldrh	r3, [r2, r3]
 8005d02:	613b      	str	r3, [r7, #16]
 8005d04:	2300      	movs	r3, #0
 8005d06:	617b      	str	r3, [r7, #20]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	69b8      	ldr	r0, [r7, #24]
 8005d0e:	69f9      	ldr	r1, [r7, #28]
 8005d10:	f7fa fb6e 	bl	80003f0 <__aeabi_uldivmod>
 8005d14:	0002      	movs	r2, r0
 8005d16:	000b      	movs	r3, r1
 8005d18:	0e11      	lsrs	r1, r2, #24
 8005d1a:	021d      	lsls	r5, r3, #8
 8005d1c:	430d      	orrs	r5, r1
 8005d1e:	0214      	lsls	r4, r2, #8
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	085b      	lsrs	r3, r3, #1
 8005d26:	60bb      	str	r3, [r7, #8]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	68b8      	ldr	r0, [r7, #8]
 8005d2e:	68f9      	ldr	r1, [r7, #12]
 8005d30:	1900      	adds	r0, r0, r4
 8005d32:	4169      	adcs	r1, r5
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	603b      	str	r3, [r7, #0]
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	607b      	str	r3, [r7, #4]
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f7fa fb55 	bl	80003f0 <__aeabi_uldivmod>
 8005d46:	0002      	movs	r2, r0
 8005d48:	000b      	movs	r3, r1
 8005d4a:	0013      	movs	r3, r2
 8005d4c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d50:	23c0      	movs	r3, #192	; 0xc0
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d309      	bcc.n	8005d6c <UART_SetConfig+0x2e4>
 8005d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d5a:	2380      	movs	r3, #128	; 0x80
 8005d5c:	035b      	lsls	r3, r3, #13
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d204      	bcs.n	8005d6c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d68:	60da      	str	r2, [r3, #12]
 8005d6a:	e0e9      	b.n	8005f40 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8005d6c:	231a      	movs	r3, #26
 8005d6e:	2220      	movs	r2, #32
 8005d70:	189b      	adds	r3, r3, r2
 8005d72:	19db      	adds	r3, r3, r7
 8005d74:	2201      	movs	r2, #1
 8005d76:	701a      	strb	r2, [r3, #0]
 8005d78:	e0e2      	b.n	8005f40 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	69da      	ldr	r2, [r3, #28]
 8005d7e:	2380      	movs	r3, #128	; 0x80
 8005d80:	021b      	lsls	r3, r3, #8
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d000      	beq.n	8005d88 <UART_SetConfig+0x300>
 8005d86:	e083      	b.n	8005e90 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005d88:	231b      	movs	r3, #27
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	189b      	adds	r3, r3, r2
 8005d8e:	19db      	adds	r3, r3, r7
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	2b08      	cmp	r3, #8
 8005d94:	d015      	beq.n	8005dc2 <UART_SetConfig+0x33a>
 8005d96:	dc2b      	bgt.n	8005df0 <UART_SetConfig+0x368>
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d00d      	beq.n	8005db8 <UART_SetConfig+0x330>
 8005d9c:	dc28      	bgt.n	8005df0 <UART_SetConfig+0x368>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <UART_SetConfig+0x320>
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d005      	beq.n	8005db2 <UART_SetConfig+0x32a>
 8005da6:	e023      	b.n	8005df0 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005da8:	f7fe f89c 	bl	8003ee4 <HAL_RCC_GetPCLK1Freq>
 8005dac:	0003      	movs	r3, r0
 8005dae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005db0:	e027      	b.n	8005e02 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005db2:	4b0d      	ldr	r3, [pc, #52]	; (8005de8 <UART_SetConfig+0x360>)
 8005db4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005db6:	e024      	b.n	8005e02 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005db8:	f7fe f808 	bl	8003dcc <HAL_RCC_GetSysClockFreq>
 8005dbc:	0003      	movs	r3, r0
 8005dbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dc0:	e01f      	b.n	8005e02 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dc2:	2380      	movs	r3, #128	; 0x80
 8005dc4:	021b      	lsls	r3, r3, #8
 8005dc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dc8:	e01b      	b.n	8005e02 <UART_SetConfig+0x37a>
 8005dca:	46c0      	nop			; (mov r8, r8)
 8005dcc:	cfff69f3 	.word	0xcfff69f3
 8005dd0:	ffffcfff 	.word	0xffffcfff
 8005dd4:	40008000 	.word	0x40008000
 8005dd8:	11fff4ff 	.word	0x11fff4ff
 8005ddc:	40013800 	.word	0x40013800
 8005de0:	40021000 	.word	0x40021000
 8005de4:	40004400 	.word	0x40004400
 8005de8:	00f42400 	.word	0x00f42400
 8005dec:	08007330 	.word	0x08007330
      default:
        pclk = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005df4:	231a      	movs	r3, #26
 8005df6:	2220      	movs	r2, #32
 8005df8:	189b      	adds	r3, r3, r2
 8005dfa:	19db      	adds	r3, r3, r7
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	701a      	strb	r2, [r3, #0]
        break;
 8005e00:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d100      	bne.n	8005e0a <UART_SetConfig+0x382>
 8005e08:	e09a      	b.n	8005f40 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e0e:	4b58      	ldr	r3, [pc, #352]	; (8005f70 <UART_SetConfig+0x4e8>)
 8005e10:	0052      	lsls	r2, r2, #1
 8005e12:	5ad3      	ldrh	r3, [r2, r3]
 8005e14:	0019      	movs	r1, r3
 8005e16:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005e18:	f7fa f974 	bl	8000104 <__udivsi3>
 8005e1c:	0003      	movs	r3, r0
 8005e1e:	005a      	lsls	r2, r3, #1
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	085b      	lsrs	r3, r3, #1
 8005e26:	18d2      	adds	r2, r2, r3
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	0019      	movs	r1, r3
 8005e2e:	0010      	movs	r0, r2
 8005e30:	f7fa f968 	bl	8000104 <__udivsi3>
 8005e34:	0003      	movs	r3, r0
 8005e36:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3a:	2b0f      	cmp	r3, #15
 8005e3c:	d921      	bls.n	8005e82 <UART_SetConfig+0x3fa>
 8005e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e40:	2380      	movs	r3, #128	; 0x80
 8005e42:	025b      	lsls	r3, r3, #9
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d21c      	bcs.n	8005e82 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	200e      	movs	r0, #14
 8005e4e:	2420      	movs	r4, #32
 8005e50:	1903      	adds	r3, r0, r4
 8005e52:	19db      	adds	r3, r3, r7
 8005e54:	210f      	movs	r1, #15
 8005e56:	438a      	bics	r2, r1
 8005e58:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5c:	085b      	lsrs	r3, r3, #1
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	2207      	movs	r2, #7
 8005e62:	4013      	ands	r3, r2
 8005e64:	b299      	uxth	r1, r3
 8005e66:	1903      	adds	r3, r0, r4
 8005e68:	19db      	adds	r3, r3, r7
 8005e6a:	1902      	adds	r2, r0, r4
 8005e6c:	19d2      	adds	r2, r2, r7
 8005e6e:	8812      	ldrh	r2, [r2, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	1902      	adds	r2, r0, r4
 8005e7a:	19d2      	adds	r2, r2, r7
 8005e7c:	8812      	ldrh	r2, [r2, #0]
 8005e7e:	60da      	str	r2, [r3, #12]
 8005e80:	e05e      	b.n	8005f40 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005e82:	231a      	movs	r3, #26
 8005e84:	2220      	movs	r2, #32
 8005e86:	189b      	adds	r3, r3, r2
 8005e88:	19db      	adds	r3, r3, r7
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	e057      	b.n	8005f40 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e90:	231b      	movs	r3, #27
 8005e92:	2220      	movs	r2, #32
 8005e94:	189b      	adds	r3, r3, r2
 8005e96:	19db      	adds	r3, r3, r7
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	2b08      	cmp	r3, #8
 8005e9c:	d015      	beq.n	8005eca <UART_SetConfig+0x442>
 8005e9e:	dc18      	bgt.n	8005ed2 <UART_SetConfig+0x44a>
 8005ea0:	2b04      	cmp	r3, #4
 8005ea2:	d00d      	beq.n	8005ec0 <UART_SetConfig+0x438>
 8005ea4:	dc15      	bgt.n	8005ed2 <UART_SetConfig+0x44a>
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d002      	beq.n	8005eb0 <UART_SetConfig+0x428>
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d005      	beq.n	8005eba <UART_SetConfig+0x432>
 8005eae:	e010      	b.n	8005ed2 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eb0:	f7fe f818 	bl	8003ee4 <HAL_RCC_GetPCLK1Freq>
 8005eb4:	0003      	movs	r3, r0
 8005eb6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005eb8:	e014      	b.n	8005ee4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005eba:	4b2e      	ldr	r3, [pc, #184]	; (8005f74 <UART_SetConfig+0x4ec>)
 8005ebc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ebe:	e011      	b.n	8005ee4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ec0:	f7fd ff84 	bl	8003dcc <HAL_RCC_GetSysClockFreq>
 8005ec4:	0003      	movs	r3, r0
 8005ec6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ec8:	e00c      	b.n	8005ee4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eca:	2380      	movs	r3, #128	; 0x80
 8005ecc:	021b      	lsls	r3, r3, #8
 8005ece:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ed0:	e008      	b.n	8005ee4 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005ed6:	231a      	movs	r3, #26
 8005ed8:	2220      	movs	r2, #32
 8005eda:	189b      	adds	r3, r3, r2
 8005edc:	19db      	adds	r3, r3, r7
 8005ede:	2201      	movs	r2, #1
 8005ee0:	701a      	strb	r2, [r3, #0]
        break;
 8005ee2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d02a      	beq.n	8005f40 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eee:	4b20      	ldr	r3, [pc, #128]	; (8005f70 <UART_SetConfig+0x4e8>)
 8005ef0:	0052      	lsls	r2, r2, #1
 8005ef2:	5ad3      	ldrh	r3, [r2, r3]
 8005ef4:	0019      	movs	r1, r3
 8005ef6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005ef8:	f7fa f904 	bl	8000104 <__udivsi3>
 8005efc:	0003      	movs	r3, r0
 8005efe:	001a      	movs	r2, r3
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	085b      	lsrs	r3, r3, #1
 8005f06:	18d2      	adds	r2, r2, r3
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	0019      	movs	r1, r3
 8005f0e:	0010      	movs	r0, r2
 8005f10:	f7fa f8f8 	bl	8000104 <__udivsi3>
 8005f14:	0003      	movs	r3, r0
 8005f16:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1a:	2b0f      	cmp	r3, #15
 8005f1c:	d90a      	bls.n	8005f34 <UART_SetConfig+0x4ac>
 8005f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f20:	2380      	movs	r3, #128	; 0x80
 8005f22:	025b      	lsls	r3, r3, #9
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d205      	bcs.n	8005f34 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	60da      	str	r2, [r3, #12]
 8005f32:	e005      	b.n	8005f40 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005f34:	231a      	movs	r3, #26
 8005f36:	2220      	movs	r2, #32
 8005f38:	189b      	adds	r3, r3, r2
 8005f3a:	19db      	adds	r3, r3, r7
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	226a      	movs	r2, #106	; 0x6a
 8005f44:	2101      	movs	r1, #1
 8005f46:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	2268      	movs	r2, #104	; 0x68
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	2200      	movs	r2, #0
 8005f54:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	2200      	movs	r2, #0
 8005f5a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005f5c:	231a      	movs	r3, #26
 8005f5e:	2220      	movs	r2, #32
 8005f60:	189b      	adds	r3, r3, r2
 8005f62:	19db      	adds	r3, r3, r7
 8005f64:	781b      	ldrb	r3, [r3, #0]
}
 8005f66:	0018      	movs	r0, r3
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	b010      	add	sp, #64	; 0x40
 8005f6c:	bdb0      	pop	{r4, r5, r7, pc}
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	08007330 	.word	0x08007330
 8005f74:	00f42400 	.word	0x00f42400

08005f78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f84:	2201      	movs	r2, #1
 8005f86:	4013      	ands	r3, r2
 8005f88:	d00b      	beq.n	8005fa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	4a4a      	ldr	r2, [pc, #296]	; (80060bc <UART_AdvFeatureConfig+0x144>)
 8005f92:	4013      	ands	r3, r2
 8005f94:	0019      	movs	r1, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	4013      	ands	r3, r2
 8005faa:	d00b      	beq.n	8005fc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	4a43      	ldr	r2, [pc, #268]	; (80060c0 <UART_AdvFeatureConfig+0x148>)
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	0019      	movs	r1, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc8:	2204      	movs	r2, #4
 8005fca:	4013      	ands	r3, r2
 8005fcc:	d00b      	beq.n	8005fe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	4a3b      	ldr	r2, [pc, #236]	; (80060c4 <UART_AdvFeatureConfig+0x14c>)
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	0019      	movs	r1, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fea:	2208      	movs	r2, #8
 8005fec:	4013      	ands	r3, r2
 8005fee:	d00b      	beq.n	8006008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	4a34      	ldr	r2, [pc, #208]	; (80060c8 <UART_AdvFeatureConfig+0x150>)
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	0019      	movs	r1, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	430a      	orrs	r2, r1
 8006006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600c:	2210      	movs	r2, #16
 800600e:	4013      	ands	r3, r2
 8006010:	d00b      	beq.n	800602a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	4a2c      	ldr	r2, [pc, #176]	; (80060cc <UART_AdvFeatureConfig+0x154>)
 800601a:	4013      	ands	r3, r2
 800601c:	0019      	movs	r1, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602e:	2220      	movs	r2, #32
 8006030:	4013      	ands	r3, r2
 8006032:	d00b      	beq.n	800604c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	4a25      	ldr	r2, [pc, #148]	; (80060d0 <UART_AdvFeatureConfig+0x158>)
 800603c:	4013      	ands	r3, r2
 800603e:	0019      	movs	r1, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006050:	2240      	movs	r2, #64	; 0x40
 8006052:	4013      	ands	r3, r2
 8006054:	d01d      	beq.n	8006092 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	4a1d      	ldr	r2, [pc, #116]	; (80060d4 <UART_AdvFeatureConfig+0x15c>)
 800605e:	4013      	ands	r3, r2
 8006060:	0019      	movs	r1, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006072:	2380      	movs	r3, #128	; 0x80
 8006074:	035b      	lsls	r3, r3, #13
 8006076:	429a      	cmp	r2, r3
 8006078:	d10b      	bne.n	8006092 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	4a15      	ldr	r2, [pc, #84]	; (80060d8 <UART_AdvFeatureConfig+0x160>)
 8006082:	4013      	ands	r3, r2
 8006084:	0019      	movs	r1, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006096:	2280      	movs	r2, #128	; 0x80
 8006098:	4013      	ands	r3, r2
 800609a:	d00b      	beq.n	80060b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	4a0e      	ldr	r2, [pc, #56]	; (80060dc <UART_AdvFeatureConfig+0x164>)
 80060a4:	4013      	ands	r3, r2
 80060a6:	0019      	movs	r1, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	605a      	str	r2, [r3, #4]
  }
}
 80060b4:	46c0      	nop			; (mov r8, r8)
 80060b6:	46bd      	mov	sp, r7
 80060b8:	b002      	add	sp, #8
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	fffdffff 	.word	0xfffdffff
 80060c0:	fffeffff 	.word	0xfffeffff
 80060c4:	fffbffff 	.word	0xfffbffff
 80060c8:	ffff7fff 	.word	0xffff7fff
 80060cc:	ffffefff 	.word	0xffffefff
 80060d0:	ffffdfff 	.word	0xffffdfff
 80060d4:	ffefffff 	.word	0xffefffff
 80060d8:	ff9fffff 	.word	0xff9fffff
 80060dc:	fff7ffff 	.word	0xfff7ffff

080060e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af02      	add	r7, sp, #8
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2290      	movs	r2, #144	; 0x90
 80060ec:	2100      	movs	r1, #0
 80060ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060f0:	f7fc fee6 	bl	8002ec0 <HAL_GetTick>
 80060f4:	0003      	movs	r3, r0
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2208      	movs	r2, #8
 8006100:	4013      	ands	r3, r2
 8006102:	2b08      	cmp	r3, #8
 8006104:	d10c      	bne.n	8006120 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2280      	movs	r2, #128	; 0x80
 800610a:	0391      	lsls	r1, r2, #14
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	4a1a      	ldr	r2, [pc, #104]	; (8006178 <UART_CheckIdleState+0x98>)
 8006110:	9200      	str	r2, [sp, #0]
 8006112:	2200      	movs	r2, #0
 8006114:	f000 f832 	bl	800617c <UART_WaitOnFlagUntilTimeout>
 8006118:	1e03      	subs	r3, r0, #0
 800611a:	d001      	beq.n	8006120 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e026      	b.n	800616e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2204      	movs	r2, #4
 8006128:	4013      	ands	r3, r2
 800612a:	2b04      	cmp	r3, #4
 800612c:	d10c      	bne.n	8006148 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2280      	movs	r2, #128	; 0x80
 8006132:	03d1      	lsls	r1, r2, #15
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	4a10      	ldr	r2, [pc, #64]	; (8006178 <UART_CheckIdleState+0x98>)
 8006138:	9200      	str	r2, [sp, #0]
 800613a:	2200      	movs	r2, #0
 800613c:	f000 f81e 	bl	800617c <UART_WaitOnFlagUntilTimeout>
 8006140:	1e03      	subs	r3, r0, #0
 8006142:	d001      	beq.n	8006148 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e012      	b.n	800616e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2288      	movs	r2, #136	; 0x88
 800614c:	2120      	movs	r1, #32
 800614e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	228c      	movs	r2, #140	; 0x8c
 8006154:	2120      	movs	r1, #32
 8006156:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2284      	movs	r2, #132	; 0x84
 8006168:	2100      	movs	r1, #0
 800616a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	0018      	movs	r0, r3
 8006170:	46bd      	mov	sp, r7
 8006172:	b004      	add	sp, #16
 8006174:	bd80      	pop	{r7, pc}
 8006176:	46c0      	nop			; (mov r8, r8)
 8006178:	01ffffff 	.word	0x01ffffff

0800617c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b094      	sub	sp, #80	; 0x50
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	603b      	str	r3, [r7, #0]
 8006188:	1dfb      	adds	r3, r7, #7
 800618a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800618c:	e0a7      	b.n	80062de <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800618e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006190:	3301      	adds	r3, #1
 8006192:	d100      	bne.n	8006196 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006194:	e0a3      	b.n	80062de <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006196:	f7fc fe93 	bl	8002ec0 <HAL_GetTick>
 800619a:	0002      	movs	r2, r0
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d302      	bcc.n	80061ac <UART_WaitOnFlagUntilTimeout+0x30>
 80061a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d13f      	bne.n	800622c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ac:	f3ef 8310 	mrs	r3, PRIMASK
 80061b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80061b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80061b4:	647b      	str	r3, [r7, #68]	; 0x44
 80061b6:	2301      	movs	r3, #1
 80061b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061bc:	f383 8810 	msr	PRIMASK, r3
}
 80061c0:	46c0      	nop			; (mov r8, r8)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	494e      	ldr	r1, [pc, #312]	; (8006308 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80061ce:	400a      	ands	r2, r1
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061d4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	f383 8810 	msr	PRIMASK, r3
}
 80061dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061de:	f3ef 8310 	mrs	r3, PRIMASK
 80061e2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80061e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e6:	643b      	str	r3, [r7, #64]	; 0x40
 80061e8:	2301      	movs	r3, #1
 80061ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ee:	f383 8810 	msr	PRIMASK, r3
}
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2101      	movs	r1, #1
 8006200:	438a      	bics	r2, r1
 8006202:	609a      	str	r2, [r3, #8]
 8006204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006206:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800620a:	f383 8810 	msr	PRIMASK, r3
}
 800620e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2288      	movs	r2, #136	; 0x88
 8006214:	2120      	movs	r1, #32
 8006216:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	228c      	movs	r2, #140	; 0x8c
 800621c:	2120      	movs	r1, #32
 800621e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2284      	movs	r2, #132	; 0x84
 8006224:	2100      	movs	r1, #0
 8006226:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e069      	b.n	8006300 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2204      	movs	r2, #4
 8006234:	4013      	ands	r3, r2
 8006236:	d052      	beq.n	80062de <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	69da      	ldr	r2, [r3, #28]
 800623e:	2380      	movs	r3, #128	; 0x80
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	401a      	ands	r2, r3
 8006244:	2380      	movs	r3, #128	; 0x80
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	429a      	cmp	r2, r3
 800624a:	d148      	bne.n	80062de <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2280      	movs	r2, #128	; 0x80
 8006252:	0112      	lsls	r2, r2, #4
 8006254:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006256:	f3ef 8310 	mrs	r3, PRIMASK
 800625a:	613b      	str	r3, [r7, #16]
  return(result);
 800625c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800625e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006260:	2301      	movs	r3, #1
 8006262:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f383 8810 	msr	PRIMASK, r3
}
 800626a:	46c0      	nop			; (mov r8, r8)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4924      	ldr	r1, [pc, #144]	; (8006308 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006278:	400a      	ands	r2, r1
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800627e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	f383 8810 	msr	PRIMASK, r3
}
 8006286:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006288:	f3ef 8310 	mrs	r3, PRIMASK
 800628c:	61fb      	str	r3, [r7, #28]
  return(result);
 800628e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006290:	64bb      	str	r3, [r7, #72]	; 0x48
 8006292:	2301      	movs	r3, #1
 8006294:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	f383 8810 	msr	PRIMASK, r3
}
 800629c:	46c0      	nop			; (mov r8, r8)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2101      	movs	r1, #1
 80062aa:	438a      	bics	r2, r1
 80062ac:	609a      	str	r2, [r3, #8]
 80062ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	f383 8810 	msr	PRIMASK, r3
}
 80062b8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2288      	movs	r2, #136	; 0x88
 80062be:	2120      	movs	r1, #32
 80062c0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	228c      	movs	r2, #140	; 0x8c
 80062c6:	2120      	movs	r1, #32
 80062c8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2290      	movs	r2, #144	; 0x90
 80062ce:	2120      	movs	r1, #32
 80062d0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2284      	movs	r2, #132	; 0x84
 80062d6:	2100      	movs	r1, #0
 80062d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e010      	b.n	8006300 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	4013      	ands	r3, r2
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	425a      	negs	r2, r3
 80062ee:	4153      	adcs	r3, r2
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	001a      	movs	r2, r3
 80062f4:	1dfb      	adds	r3, r7, #7
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d100      	bne.n	80062fe <UART_WaitOnFlagUntilTimeout+0x182>
 80062fc:	e747      	b.n	800618e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	0018      	movs	r0, r3
 8006302:	46bd      	mov	sp, r7
 8006304:	b014      	add	sp, #80	; 0x50
 8006306:	bd80      	pop	{r7, pc}
 8006308:	fffffe5f 	.word	0xfffffe5f

0800630c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b098      	sub	sp, #96	; 0x60
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	1dbb      	adds	r3, r7, #6
 8006318:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	1dba      	adds	r2, r7, #6
 8006324:	215c      	movs	r1, #92	; 0x5c
 8006326:	8812      	ldrh	r2, [r2, #0]
 8006328:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	1dba      	adds	r2, r7, #6
 800632e:	215e      	movs	r1, #94	; 0x5e
 8006330:	8812      	ldrh	r2, [r2, #0]
 8006332:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	2380      	movs	r3, #128	; 0x80
 8006340:	015b      	lsls	r3, r3, #5
 8006342:	429a      	cmp	r2, r3
 8006344:	d10d      	bne.n	8006362 <UART_Start_Receive_IT+0x56>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d104      	bne.n	8006358 <UART_Start_Receive_IT+0x4c>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2260      	movs	r2, #96	; 0x60
 8006352:	497b      	ldr	r1, [pc, #492]	; (8006540 <UART_Start_Receive_IT+0x234>)
 8006354:	5299      	strh	r1, [r3, r2]
 8006356:	e02e      	b.n	80063b6 <UART_Start_Receive_IT+0xaa>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2260      	movs	r2, #96	; 0x60
 800635c:	21ff      	movs	r1, #255	; 0xff
 800635e:	5299      	strh	r1, [r3, r2]
 8006360:	e029      	b.n	80063b6 <UART_Start_Receive_IT+0xaa>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10d      	bne.n	8006386 <UART_Start_Receive_IT+0x7a>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d104      	bne.n	800637c <UART_Start_Receive_IT+0x70>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2260      	movs	r2, #96	; 0x60
 8006376:	21ff      	movs	r1, #255	; 0xff
 8006378:	5299      	strh	r1, [r3, r2]
 800637a:	e01c      	b.n	80063b6 <UART_Start_Receive_IT+0xaa>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2260      	movs	r2, #96	; 0x60
 8006380:	217f      	movs	r1, #127	; 0x7f
 8006382:	5299      	strh	r1, [r3, r2]
 8006384:	e017      	b.n	80063b6 <UART_Start_Receive_IT+0xaa>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	689a      	ldr	r2, [r3, #8]
 800638a:	2380      	movs	r3, #128	; 0x80
 800638c:	055b      	lsls	r3, r3, #21
 800638e:	429a      	cmp	r2, r3
 8006390:	d10d      	bne.n	80063ae <UART_Start_Receive_IT+0xa2>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d104      	bne.n	80063a4 <UART_Start_Receive_IT+0x98>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2260      	movs	r2, #96	; 0x60
 800639e:	217f      	movs	r1, #127	; 0x7f
 80063a0:	5299      	strh	r1, [r3, r2]
 80063a2:	e008      	b.n	80063b6 <UART_Start_Receive_IT+0xaa>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2260      	movs	r2, #96	; 0x60
 80063a8:	213f      	movs	r1, #63	; 0x3f
 80063aa:	5299      	strh	r1, [r3, r2]
 80063ac:	e003      	b.n	80063b6 <UART_Start_Receive_IT+0xaa>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2260      	movs	r2, #96	; 0x60
 80063b2:	2100      	movs	r1, #0
 80063b4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2290      	movs	r2, #144	; 0x90
 80063ba:	2100      	movs	r1, #0
 80063bc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	228c      	movs	r2, #140	; 0x8c
 80063c2:	2122      	movs	r1, #34	; 0x22
 80063c4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063c6:	f3ef 8310 	mrs	r3, PRIMASK
 80063ca:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80063cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063d0:	2301      	movs	r3, #1
 80063d2:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063d6:	f383 8810 	msr	PRIMASK, r3
}
 80063da:	46c0      	nop			; (mov r8, r8)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2101      	movs	r1, #1
 80063e8:	430a      	orrs	r2, r1
 80063ea:	609a      	str	r2, [r3, #8]
 80063ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063ee:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063f2:	f383 8810 	msr	PRIMASK, r3
}
 80063f6:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80063fc:	2380      	movs	r3, #128	; 0x80
 80063fe:	059b      	lsls	r3, r3, #22
 8006400:	429a      	cmp	r2, r3
 8006402:	d150      	bne.n	80064a6 <UART_Start_Receive_IT+0x19a>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2268      	movs	r2, #104	; 0x68
 8006408:	5a9b      	ldrh	r3, [r3, r2]
 800640a:	1dba      	adds	r2, r7, #6
 800640c:	8812      	ldrh	r2, [r2, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d349      	bcc.n	80064a6 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	2380      	movs	r3, #128	; 0x80
 8006418:	015b      	lsls	r3, r3, #5
 800641a:	429a      	cmp	r2, r3
 800641c:	d107      	bne.n	800642e <UART_Start_Receive_IT+0x122>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d103      	bne.n	800642e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4a46      	ldr	r2, [pc, #280]	; (8006544 <UART_Start_Receive_IT+0x238>)
 800642a:	675a      	str	r2, [r3, #116]	; 0x74
 800642c:	e002      	b.n	8006434 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	4a45      	ldr	r2, [pc, #276]	; (8006548 <UART_Start_Receive_IT+0x23c>)
 8006432:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d019      	beq.n	8006470 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800643c:	f3ef 8310 	mrs	r3, PRIMASK
 8006440:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006444:	65bb      	str	r3, [r7, #88]	; 0x58
 8006446:	2301      	movs	r3, #1
 8006448:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800644a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644c:	f383 8810 	msr	PRIMASK, r3
}
 8006450:	46c0      	nop			; (mov r8, r8)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2180      	movs	r1, #128	; 0x80
 800645e:	0049      	lsls	r1, r1, #1
 8006460:	430a      	orrs	r2, r1
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006466:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800646a:	f383 8810 	msr	PRIMASK, r3
}
 800646e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006470:	f3ef 8310 	mrs	r3, PRIMASK
 8006474:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006476:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006478:	657b      	str	r3, [r7, #84]	; 0x54
 800647a:	2301      	movs	r3, #1
 800647c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800647e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006480:	f383 8810 	msr	PRIMASK, r3
}
 8006484:	46c0      	nop			; (mov r8, r8)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689a      	ldr	r2, [r3, #8]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2180      	movs	r1, #128	; 0x80
 8006492:	0549      	lsls	r1, r1, #21
 8006494:	430a      	orrs	r2, r1
 8006496:	609a      	str	r2, [r3, #8]
 8006498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800649a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800649c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649e:	f383 8810 	msr	PRIMASK, r3
}
 80064a2:	46c0      	nop			; (mov r8, r8)
 80064a4:	e047      	b.n	8006536 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	2380      	movs	r3, #128	; 0x80
 80064ac:	015b      	lsls	r3, r3, #5
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d107      	bne.n	80064c2 <UART_Start_Receive_IT+0x1b6>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d103      	bne.n	80064c2 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4a23      	ldr	r2, [pc, #140]	; (800654c <UART_Start_Receive_IT+0x240>)
 80064be:	675a      	str	r2, [r3, #116]	; 0x74
 80064c0:	e002      	b.n	80064c8 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4a22      	ldr	r2, [pc, #136]	; (8006550 <UART_Start_Receive_IT+0x244>)
 80064c6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d019      	beq.n	8006504 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064d0:	f3ef 8310 	mrs	r3, PRIMASK
 80064d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80064d6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80064d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064da:	2301      	movs	r3, #1
 80064dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	f383 8810 	msr	PRIMASK, r3
}
 80064e4:	46c0      	nop			; (mov r8, r8)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2190      	movs	r1, #144	; 0x90
 80064f2:	0049      	lsls	r1, r1, #1
 80064f4:	430a      	orrs	r2, r1
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	f383 8810 	msr	PRIMASK, r3
}
 8006502:	e018      	b.n	8006536 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006504:	f3ef 8310 	mrs	r3, PRIMASK
 8006508:	613b      	str	r3, [r7, #16]
  return(result);
 800650a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800650c:	653b      	str	r3, [r7, #80]	; 0x50
 800650e:	2301      	movs	r3, #1
 8006510:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f383 8810 	msr	PRIMASK, r3
}
 8006518:	46c0      	nop			; (mov r8, r8)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2120      	movs	r1, #32
 8006526:	430a      	orrs	r2, r1
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800652c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	f383 8810 	msr	PRIMASK, r3
}
 8006534:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	0018      	movs	r0, r3
 800653a:	46bd      	mov	sp, r7
 800653c:	b018      	add	sp, #96	; 0x60
 800653e:	bd80      	pop	{r7, pc}
 8006540:	000001ff 	.word	0x000001ff
 8006544:	08006c7d 	.word	0x08006c7d
 8006548:	08006991 	.word	0x08006991
 800654c:	0800681d 	.word	0x0800681d
 8006550:	080066a9 	.word	0x080066a9

08006554 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b08e      	sub	sp, #56	; 0x38
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800655c:	f3ef 8310 	mrs	r3, PRIMASK
 8006560:	617b      	str	r3, [r7, #20]
  return(result);
 8006562:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006564:	637b      	str	r3, [r7, #52]	; 0x34
 8006566:	2301      	movs	r3, #1
 8006568:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	f383 8810 	msr	PRIMASK, r3
}
 8006570:	46c0      	nop			; (mov r8, r8)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4926      	ldr	r1, [pc, #152]	; (8006618 <UART_EndRxTransfer+0xc4>)
 800657e:	400a      	ands	r2, r1
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006584:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	f383 8810 	msr	PRIMASK, r3
}
 800658c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800658e:	f3ef 8310 	mrs	r3, PRIMASK
 8006592:	623b      	str	r3, [r7, #32]
  return(result);
 8006594:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006596:	633b      	str	r3, [r7, #48]	; 0x30
 8006598:	2301      	movs	r3, #1
 800659a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	f383 8810 	msr	PRIMASK, r3
}
 80065a2:	46c0      	nop			; (mov r8, r8)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689a      	ldr	r2, [r3, #8]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	491b      	ldr	r1, [pc, #108]	; (800661c <UART_EndRxTransfer+0xc8>)
 80065b0:	400a      	ands	r2, r1
 80065b2:	609a      	str	r2, [r3, #8]
 80065b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ba:	f383 8810 	msr	PRIMASK, r3
}
 80065be:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d118      	bne.n	80065fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065c8:	f3ef 8310 	mrs	r3, PRIMASK
 80065cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80065ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065d2:	2301      	movs	r3, #1
 80065d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f383 8810 	msr	PRIMASK, r3
}
 80065dc:	46c0      	nop			; (mov r8, r8)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2110      	movs	r1, #16
 80065ea:	438a      	bics	r2, r1
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	f383 8810 	msr	PRIMASK, r3
}
 80065f8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	228c      	movs	r2, #140	; 0x8c
 80065fe:	2120      	movs	r1, #32
 8006600:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800660e:	46c0      	nop			; (mov r8, r8)
 8006610:	46bd      	mov	sp, r7
 8006612:	b00e      	add	sp, #56	; 0x38
 8006614:	bd80      	pop	{r7, pc}
 8006616:	46c0      	nop			; (mov r8, r8)
 8006618:	fffffedf 	.word	0xfffffedf
 800661c:	effffffe 	.word	0xeffffffe

08006620 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	225e      	movs	r2, #94	; 0x5e
 8006632:	2100      	movs	r1, #0
 8006634:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2256      	movs	r2, #86	; 0x56
 800663a:	2100      	movs	r1, #0
 800663c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	0018      	movs	r0, r3
 8006642:	f7ff fa0d 	bl	8005a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006646:	46c0      	nop			; (mov r8, r8)
 8006648:	46bd      	mov	sp, r7
 800664a:	b004      	add	sp, #16
 800664c:	bd80      	pop	{r7, pc}

0800664e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b086      	sub	sp, #24
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006656:	f3ef 8310 	mrs	r3, PRIMASK
 800665a:	60bb      	str	r3, [r7, #8]
  return(result);
 800665c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800665e:	617b      	str	r3, [r7, #20]
 8006660:	2301      	movs	r3, #1
 8006662:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f383 8810 	msr	PRIMASK, r3
}
 800666a:	46c0      	nop			; (mov r8, r8)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2140      	movs	r1, #64	; 0x40
 8006678:	438a      	bics	r2, r1
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f383 8810 	msr	PRIMASK, r3
}
 8006686:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2288      	movs	r2, #136	; 0x88
 800668c:	2120      	movs	r1, #32
 800668e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	0018      	movs	r0, r3
 800669a:	f7ff f9d9 	bl	8005a50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800669e:	46c0      	nop			; (mov r8, r8)
 80066a0:	46bd      	mov	sp, r7
 80066a2:	b006      	add	sp, #24
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b090      	sub	sp, #64	; 0x40
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80066b0:	203e      	movs	r0, #62	; 0x3e
 80066b2:	183b      	adds	r3, r7, r0
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	2160      	movs	r1, #96	; 0x60
 80066b8:	5a52      	ldrh	r2, [r2, r1]
 80066ba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	228c      	movs	r2, #140	; 0x8c
 80066c0:	589b      	ldr	r3, [r3, r2]
 80066c2:	2b22      	cmp	r3, #34	; 0x22
 80066c4:	d000      	beq.n	80066c8 <UART_RxISR_8BIT+0x20>
 80066c6:	e09a      	b.n	80067fe <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066ce:	213c      	movs	r1, #60	; 0x3c
 80066d0:	187b      	adds	r3, r7, r1
 80066d2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066d4:	187b      	adds	r3, r7, r1
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	183b      	adds	r3, r7, r0
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	b2d9      	uxtb	r1, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e4:	400a      	ands	r2, r1
 80066e6:	b2d2      	uxtb	r2, r2
 80066e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	225e      	movs	r2, #94	; 0x5e
 80066f8:	5a9b      	ldrh	r3, [r3, r2]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	3b01      	subs	r3, #1
 80066fe:	b299      	uxth	r1, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	225e      	movs	r2, #94	; 0x5e
 8006704:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	225e      	movs	r2, #94	; 0x5e
 800670a:	5a9b      	ldrh	r3, [r3, r2]
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d000      	beq.n	8006714 <UART_RxISR_8BIT+0x6c>
 8006712:	e07c      	b.n	800680e <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006714:	f3ef 8310 	mrs	r3, PRIMASK
 8006718:	61bb      	str	r3, [r7, #24]
  return(result);
 800671a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800671c:	63bb      	str	r3, [r7, #56]	; 0x38
 800671e:	2301      	movs	r3, #1
 8006720:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	f383 8810 	msr	PRIMASK, r3
}
 8006728:	46c0      	nop			; (mov r8, r8)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4938      	ldr	r1, [pc, #224]	; (8006818 <UART_RxISR_8BIT+0x170>)
 8006736:	400a      	ands	r2, r1
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	f383 8810 	msr	PRIMASK, r3
}
 8006744:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006746:	f3ef 8310 	mrs	r3, PRIMASK
 800674a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674e:	637b      	str	r3, [r7, #52]	; 0x34
 8006750:	2301      	movs	r3, #1
 8006752:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	f383 8810 	msr	PRIMASK, r3
}
 800675a:	46c0      	nop			; (mov r8, r8)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689a      	ldr	r2, [r3, #8]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2101      	movs	r1, #1
 8006768:	438a      	bics	r2, r1
 800676a:	609a      	str	r2, [r3, #8]
 800676c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006772:	f383 8810 	msr	PRIMASK, r3
}
 8006776:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	228c      	movs	r2, #140	; 0x8c
 800677c:	2120      	movs	r1, #32
 800677e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006790:	2b01      	cmp	r3, #1
 8006792:	d12f      	bne.n	80067f4 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800679a:	f3ef 8310 	mrs	r3, PRIMASK
 800679e:	60fb      	str	r3, [r7, #12]
  return(result);
 80067a0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067a2:	633b      	str	r3, [r7, #48]	; 0x30
 80067a4:	2301      	movs	r3, #1
 80067a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f383 8810 	msr	PRIMASK, r3
}
 80067ae:	46c0      	nop			; (mov r8, r8)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2110      	movs	r1, #16
 80067bc:	438a      	bics	r2, r1
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f383 8810 	msr	PRIMASK, r3
}
 80067ca:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	2210      	movs	r2, #16
 80067d4:	4013      	ands	r3, r2
 80067d6:	2b10      	cmp	r3, #16
 80067d8:	d103      	bne.n	80067e2 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2210      	movs	r2, #16
 80067e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	225c      	movs	r2, #92	; 0x5c
 80067e6:	5a9a      	ldrh	r2, [r3, r2]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	0011      	movs	r1, r2
 80067ec:	0018      	movs	r0, r3
 80067ee:	f7ff f93f 	bl	8005a70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80067f2:	e00c      	b.n	800680e <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	0018      	movs	r0, r3
 80067f8:	f7fb fe3a 	bl	8002470 <HAL_UART_RxCpltCallback>
}
 80067fc:	e007      	b.n	800680e <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	699a      	ldr	r2, [r3, #24]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2108      	movs	r1, #8
 800680a:	430a      	orrs	r2, r1
 800680c:	619a      	str	r2, [r3, #24]
}
 800680e:	46c0      	nop			; (mov r8, r8)
 8006810:	46bd      	mov	sp, r7
 8006812:	b010      	add	sp, #64	; 0x40
 8006814:	bd80      	pop	{r7, pc}
 8006816:	46c0      	nop			; (mov r8, r8)
 8006818:	fffffedf 	.word	0xfffffedf

0800681c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b090      	sub	sp, #64	; 0x40
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006824:	203e      	movs	r0, #62	; 0x3e
 8006826:	183b      	adds	r3, r7, r0
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	2160      	movs	r1, #96	; 0x60
 800682c:	5a52      	ldrh	r2, [r2, r1]
 800682e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	228c      	movs	r2, #140	; 0x8c
 8006834:	589b      	ldr	r3, [r3, r2]
 8006836:	2b22      	cmp	r3, #34	; 0x22
 8006838:	d000      	beq.n	800683c <UART_RxISR_16BIT+0x20>
 800683a:	e09a      	b.n	8006972 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006842:	213c      	movs	r1, #60	; 0x3c
 8006844:	187b      	adds	r3, r7, r1
 8006846:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800684c:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800684e:	187b      	adds	r3, r7, r1
 8006850:	183a      	adds	r2, r7, r0
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	8812      	ldrh	r2, [r2, #0]
 8006856:	4013      	ands	r3, r2
 8006858:	b29a      	uxth	r2, r3
 800685a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006862:	1c9a      	adds	r2, r3, #2
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	225e      	movs	r2, #94	; 0x5e
 800686c:	5a9b      	ldrh	r3, [r3, r2]
 800686e:	b29b      	uxth	r3, r3
 8006870:	3b01      	subs	r3, #1
 8006872:	b299      	uxth	r1, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	225e      	movs	r2, #94	; 0x5e
 8006878:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	225e      	movs	r2, #94	; 0x5e
 800687e:	5a9b      	ldrh	r3, [r3, r2]
 8006880:	b29b      	uxth	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d000      	beq.n	8006888 <UART_RxISR_16BIT+0x6c>
 8006886:	e07c      	b.n	8006982 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006888:	f3ef 8310 	mrs	r3, PRIMASK
 800688c:	617b      	str	r3, [r7, #20]
  return(result);
 800688e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006890:	637b      	str	r3, [r7, #52]	; 0x34
 8006892:	2301      	movs	r3, #1
 8006894:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	f383 8810 	msr	PRIMASK, r3
}
 800689c:	46c0      	nop			; (mov r8, r8)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4938      	ldr	r1, [pc, #224]	; (800698c <UART_RxISR_16BIT+0x170>)
 80068aa:	400a      	ands	r2, r1
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	f383 8810 	msr	PRIMASK, r3
}
 80068b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ba:	f3ef 8310 	mrs	r3, PRIMASK
 80068be:	623b      	str	r3, [r7, #32]
  return(result);
 80068c0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c2:	633b      	str	r3, [r7, #48]	; 0x30
 80068c4:	2301      	movs	r3, #1
 80068c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	f383 8810 	msr	PRIMASK, r3
}
 80068ce:	46c0      	nop			; (mov r8, r8)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689a      	ldr	r2, [r3, #8]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2101      	movs	r1, #1
 80068dc:	438a      	bics	r2, r1
 80068de:	609a      	str	r2, [r3, #8]
 80068e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e6:	f383 8810 	msr	PRIMASK, r3
}
 80068ea:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	228c      	movs	r2, #140	; 0x8c
 80068f0:	2120      	movs	r1, #32
 80068f2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006904:	2b01      	cmp	r3, #1
 8006906:	d12f      	bne.n	8006968 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800690e:	f3ef 8310 	mrs	r3, PRIMASK
 8006912:	60bb      	str	r3, [r7, #8]
  return(result);
 8006914:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006918:	2301      	movs	r3, #1
 800691a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f383 8810 	msr	PRIMASK, r3
}
 8006922:	46c0      	nop			; (mov r8, r8)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2110      	movs	r1, #16
 8006930:	438a      	bics	r2, r1
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006936:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f383 8810 	msr	PRIMASK, r3
}
 800693e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	2210      	movs	r2, #16
 8006948:	4013      	ands	r3, r2
 800694a:	2b10      	cmp	r3, #16
 800694c:	d103      	bne.n	8006956 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2210      	movs	r2, #16
 8006954:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	225c      	movs	r2, #92	; 0x5c
 800695a:	5a9a      	ldrh	r2, [r3, r2]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	0011      	movs	r1, r2
 8006960:	0018      	movs	r0, r3
 8006962:	f7ff f885 	bl	8005a70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006966:	e00c      	b.n	8006982 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	0018      	movs	r0, r3
 800696c:	f7fb fd80 	bl	8002470 <HAL_UART_RxCpltCallback>
}
 8006970:	e007      	b.n	8006982 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	699a      	ldr	r2, [r3, #24]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2108      	movs	r1, #8
 800697e:	430a      	orrs	r2, r1
 8006980:	619a      	str	r2, [r3, #24]
}
 8006982:	46c0      	nop			; (mov r8, r8)
 8006984:	46bd      	mov	sp, r7
 8006986:	b010      	add	sp, #64	; 0x40
 8006988:	bd80      	pop	{r7, pc}
 800698a:	46c0      	nop			; (mov r8, r8)
 800698c:	fffffedf 	.word	0xfffffedf

08006990 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b09c      	sub	sp, #112	; 0x70
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006998:	236a      	movs	r3, #106	; 0x6a
 800699a:	18fb      	adds	r3, r7, r3
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	2160      	movs	r1, #96	; 0x60
 80069a0:	5a52      	ldrh	r2, [r2, r1]
 80069a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	228c      	movs	r2, #140	; 0x8c
 80069c0:	589b      	ldr	r3, [r3, r2]
 80069c2:	2b22      	cmp	r3, #34	; 0x22
 80069c4:	d000      	beq.n	80069c8 <UART_RxISR_8BIT_FIFOEN+0x38>
 80069c6:	e144      	b.n	8006c52 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80069c8:	235e      	movs	r3, #94	; 0x5e
 80069ca:	18fb      	adds	r3, r7, r3
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	2168      	movs	r1, #104	; 0x68
 80069d0:	5a52      	ldrh	r2, [r2, r1]
 80069d2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80069d4:	e0eb      	b.n	8006bae <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069dc:	215c      	movs	r1, #92	; 0x5c
 80069de:	187b      	adds	r3, r7, r1
 80069e0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069e2:	187b      	adds	r3, r7, r1
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	236a      	movs	r3, #106	; 0x6a
 80069ea:	18fb      	adds	r3, r7, r3
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	b2d9      	uxtb	r1, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f4:	400a      	ands	r2, r1
 80069f6:	b2d2      	uxtb	r2, r2
 80069f8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	225e      	movs	r2, #94	; 0x5e
 8006a08:	5a9b      	ldrh	r3, [r3, r2]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	b299      	uxth	r1, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	225e      	movs	r2, #94	; 0x5e
 8006a14:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a20:	2207      	movs	r2, #7
 8006a22:	4013      	ands	r3, r2
 8006a24:	d049      	beq.n	8006aba <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a28:	2201      	movs	r2, #1
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	d010      	beq.n	8006a50 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8006a2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006a30:	2380      	movs	r3, #128	; 0x80
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	4013      	ands	r3, r2
 8006a36:	d00b      	beq.n	8006a50 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2290      	movs	r2, #144	; 0x90
 8006a44:	589b      	ldr	r3, [r3, r2]
 8006a46:	2201      	movs	r2, #1
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2190      	movs	r1, #144	; 0x90
 8006a4e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a52:	2202      	movs	r2, #2
 8006a54:	4013      	ands	r3, r2
 8006a56:	d00f      	beq.n	8006a78 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8006a58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	d00b      	beq.n	8006a78 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2202      	movs	r2, #2
 8006a66:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2290      	movs	r2, #144	; 0x90
 8006a6c:	589b      	ldr	r3, [r3, r2]
 8006a6e:	2204      	movs	r2, #4
 8006a70:	431a      	orrs	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2190      	movs	r1, #144	; 0x90
 8006a76:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a7a:	2204      	movs	r2, #4
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	d00f      	beq.n	8006aa0 <UART_RxISR_8BIT_FIFOEN+0x110>
 8006a80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a82:	2201      	movs	r2, #1
 8006a84:	4013      	ands	r3, r2
 8006a86:	d00b      	beq.n	8006aa0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2204      	movs	r2, #4
 8006a8e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2290      	movs	r2, #144	; 0x90
 8006a94:	589b      	ldr	r3, [r3, r2]
 8006a96:	2202      	movs	r2, #2
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2190      	movs	r1, #144	; 0x90
 8006a9e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2290      	movs	r2, #144	; 0x90
 8006aa4:	589b      	ldr	r3, [r3, r2]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d007      	beq.n	8006aba <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	0018      	movs	r0, r3
 8006aae:	f7fe ffd7 	bl	8005a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2290      	movs	r2, #144	; 0x90
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	225e      	movs	r2, #94	; 0x5e
 8006abe:	5a9b      	ldrh	r3, [r3, r2]
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d173      	bne.n	8006bae <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8006aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ace:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad6:	f383 8810 	msr	PRIMASK, r3
}
 8006ada:	46c0      	nop			; (mov r8, r8)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4961      	ldr	r1, [pc, #388]	; (8006c6c <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8006ae8:	400a      	ands	r2, r1
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006aee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af2:	f383 8810 	msr	PRIMASK, r3
}
 8006af6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006af8:	f3ef 8310 	mrs	r3, PRIMASK
 8006afc:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8006afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b00:	657b      	str	r3, [r7, #84]	; 0x54
 8006b02:	2301      	movs	r3, #1
 8006b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b08:	f383 8810 	msr	PRIMASK, r3
}
 8006b0c:	46c0      	nop			; (mov r8, r8)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	689a      	ldr	r2, [r3, #8]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4955      	ldr	r1, [pc, #340]	; (8006c70 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8006b1a:	400a      	ands	r2, r1
 8006b1c:	609a      	str	r2, [r3, #8]
 8006b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b20:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b24:	f383 8810 	msr	PRIMASK, r3
}
 8006b28:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	228c      	movs	r2, #140	; 0x8c
 8006b2e:	2120      	movs	r1, #32
 8006b30:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d12f      	bne.n	8006ba6 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b50:	623b      	str	r3, [r7, #32]
  return(result);
 8006b52:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b54:	653b      	str	r3, [r7, #80]	; 0x50
 8006b56:	2301      	movs	r3, #1
 8006b58:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	f383 8810 	msr	PRIMASK, r3
}
 8006b60:	46c0      	nop			; (mov r8, r8)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2110      	movs	r1, #16
 8006b6e:	438a      	bics	r2, r1
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b74:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	f383 8810 	msr	PRIMASK, r3
}
 8006b7c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	2210      	movs	r2, #16
 8006b86:	4013      	ands	r3, r2
 8006b88:	2b10      	cmp	r3, #16
 8006b8a:	d103      	bne.n	8006b94 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2210      	movs	r2, #16
 8006b92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	225c      	movs	r2, #92	; 0x5c
 8006b98:	5a9a      	ldrh	r2, [r3, r2]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	0011      	movs	r1, r2
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	f7fe ff66 	bl	8005a70 <HAL_UARTEx_RxEventCallback>
 8006ba4:	e003      	b.n	8006bae <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	0018      	movs	r0, r3
 8006baa:	f7fb fc61 	bl	8002470 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006bae:	235e      	movs	r3, #94	; 0x5e
 8006bb0:	18fb      	adds	r3, r7, r3
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d004      	beq.n	8006bc2 <UART_RxISR_8BIT_FIFOEN+0x232>
 8006bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bba:	2220      	movs	r2, #32
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	d000      	beq.n	8006bc2 <UART_RxISR_8BIT_FIFOEN+0x232>
 8006bc0:	e709      	b.n	80069d6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006bc2:	204e      	movs	r0, #78	; 0x4e
 8006bc4:	183b      	adds	r3, r7, r0
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	215e      	movs	r1, #94	; 0x5e
 8006bca:	5a52      	ldrh	r2, [r2, r1]
 8006bcc:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006bce:	0001      	movs	r1, r0
 8006bd0:	187b      	adds	r3, r7, r1
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d044      	beq.n	8006c62 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2268      	movs	r2, #104	; 0x68
 8006bdc:	5a9b      	ldrh	r3, [r3, r2]
 8006bde:	187a      	adds	r2, r7, r1
 8006be0:	8812      	ldrh	r2, [r2, #0]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d23d      	bcs.n	8006c62 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006be6:	f3ef 8310 	mrs	r3, PRIMASK
 8006bea:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bec:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f383 8810 	msr	PRIMASK, r3
}
 8006bfa:	46c0      	nop			; (mov r8, r8)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689a      	ldr	r2, [r3, #8]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	491b      	ldr	r1, [pc, #108]	; (8006c74 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8006c08:	400a      	ands	r2, r1
 8006c0a:	609a      	str	r2, [r3, #8]
 8006c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f383 8810 	msr	PRIMASK, r3
}
 8006c16:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a17      	ldr	r2, [pc, #92]	; (8006c78 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8006c1c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c22:	617b      	str	r3, [r7, #20]
  return(result);
 8006c24:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c26:	647b      	str	r3, [r7, #68]	; 0x44
 8006c28:	2301      	movs	r3, #1
 8006c2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	f383 8810 	msr	PRIMASK, r3
}
 8006c32:	46c0      	nop			; (mov r8, r8)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2120      	movs	r1, #32
 8006c40:	430a      	orrs	r2, r1
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	f383 8810 	msr	PRIMASK, r3
}
 8006c4e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c50:	e007      	b.n	8006c62 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	699a      	ldr	r2, [r3, #24]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2108      	movs	r1, #8
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	619a      	str	r2, [r3, #24]
}
 8006c62:	46c0      	nop			; (mov r8, r8)
 8006c64:	46bd      	mov	sp, r7
 8006c66:	b01c      	add	sp, #112	; 0x70
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	fffffeff 	.word	0xfffffeff
 8006c70:	effffffe 	.word	0xeffffffe
 8006c74:	efffffff 	.word	0xefffffff
 8006c78:	080066a9 	.word	0x080066a9

08006c7c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b09e      	sub	sp, #120	; 0x78
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006c84:	2372      	movs	r3, #114	; 0x72
 8006c86:	18fb      	adds	r3, r7, r3
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	2160      	movs	r1, #96	; 0x60
 8006c8c:	5a52      	ldrh	r2, [r2, r1]
 8006c8e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	228c      	movs	r2, #140	; 0x8c
 8006cac:	589b      	ldr	r3, [r3, r2]
 8006cae:	2b22      	cmp	r3, #34	; 0x22
 8006cb0:	d000      	beq.n	8006cb4 <UART_RxISR_16BIT_FIFOEN+0x38>
 8006cb2:	e144      	b.n	8006f3e <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006cb4:	2366      	movs	r3, #102	; 0x66
 8006cb6:	18fb      	adds	r3, r7, r3
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	2168      	movs	r1, #104	; 0x68
 8006cbc:	5a52      	ldrh	r2, [r2, r1]
 8006cbe:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006cc0:	e0eb      	b.n	8006e9a <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cc8:	2164      	movs	r1, #100	; 0x64
 8006cca:	187b      	adds	r3, r7, r1
 8006ccc:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd2:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8006cd4:	187b      	adds	r3, r7, r1
 8006cd6:	2272      	movs	r2, #114	; 0x72
 8006cd8:	18ba      	adds	r2, r7, r2
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	8812      	ldrh	r2, [r2, #0]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ce4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cea:	1c9a      	adds	r2, r3, #2
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	225e      	movs	r2, #94	; 0x5e
 8006cf4:	5a9b      	ldrh	r3, [r3, r2]
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b299      	uxth	r1, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	225e      	movs	r2, #94	; 0x5e
 8006d00:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d0c:	2207      	movs	r2, #7
 8006d0e:	4013      	ands	r3, r2
 8006d10:	d049      	beq.n	8006da6 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d14:	2201      	movs	r2, #1
 8006d16:	4013      	ands	r3, r2
 8006d18:	d010      	beq.n	8006d3c <UART_RxISR_16BIT_FIFOEN+0xc0>
 8006d1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d1c:	2380      	movs	r3, #128	; 0x80
 8006d1e:	005b      	lsls	r3, r3, #1
 8006d20:	4013      	ands	r3, r2
 8006d22:	d00b      	beq.n	8006d3c <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2290      	movs	r2, #144	; 0x90
 8006d30:	589b      	ldr	r3, [r3, r2]
 8006d32:	2201      	movs	r2, #1
 8006d34:	431a      	orrs	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2190      	movs	r1, #144	; 0x90
 8006d3a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d3e:	2202      	movs	r2, #2
 8006d40:	4013      	ands	r3, r2
 8006d42:	d00f      	beq.n	8006d64 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8006d44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d46:	2201      	movs	r2, #1
 8006d48:	4013      	ands	r3, r2
 8006d4a:	d00b      	beq.n	8006d64 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2202      	movs	r2, #2
 8006d52:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2290      	movs	r2, #144	; 0x90
 8006d58:	589b      	ldr	r3, [r3, r2]
 8006d5a:	2204      	movs	r2, #4
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2190      	movs	r1, #144	; 0x90
 8006d62:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d66:	2204      	movs	r2, #4
 8006d68:	4013      	ands	r3, r2
 8006d6a:	d00f      	beq.n	8006d8c <UART_RxISR_16BIT_FIFOEN+0x110>
 8006d6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d6e:	2201      	movs	r2, #1
 8006d70:	4013      	ands	r3, r2
 8006d72:	d00b      	beq.n	8006d8c <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2204      	movs	r2, #4
 8006d7a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2290      	movs	r2, #144	; 0x90
 8006d80:	589b      	ldr	r3, [r3, r2]
 8006d82:	2202      	movs	r2, #2
 8006d84:	431a      	orrs	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2190      	movs	r1, #144	; 0x90
 8006d8a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2290      	movs	r2, #144	; 0x90
 8006d90:	589b      	ldr	r3, [r3, r2]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d007      	beq.n	8006da6 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	0018      	movs	r0, r3
 8006d9a:	f7fe fe61 	bl	8005a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2290      	movs	r2, #144	; 0x90
 8006da2:	2100      	movs	r1, #0
 8006da4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	225e      	movs	r2, #94	; 0x5e
 8006daa:	5a9b      	ldrh	r3, [r3, r2]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d173      	bne.n	8006e9a <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006db2:	f3ef 8310 	mrs	r3, PRIMASK
 8006db6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc2:	f383 8810 	msr	PRIMASK, r3
}
 8006dc6:	46c0      	nop			; (mov r8, r8)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4961      	ldr	r1, [pc, #388]	; (8006f58 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8006dd4:	400a      	ands	r2, r1
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dda:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	f383 8810 	msr	PRIMASK, r3
}
 8006de2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006de4:	f3ef 8310 	mrs	r3, PRIMASK
 8006de8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006dec:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dee:	2301      	movs	r3, #1
 8006df0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df4:	f383 8810 	msr	PRIMASK, r3
}
 8006df8:	46c0      	nop			; (mov r8, r8)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4955      	ldr	r1, [pc, #340]	; (8006f5c <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8006e06:	400a      	ands	r2, r1
 8006e08:	609a      	str	r2, [r3, #8]
 8006e0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e0c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e10:	f383 8810 	msr	PRIMASK, r3
}
 8006e14:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	228c      	movs	r2, #140	; 0x8c
 8006e1a:	2120      	movs	r1, #32
 8006e1c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d12f      	bne.n	8006e92 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e38:	f3ef 8310 	mrs	r3, PRIMASK
 8006e3c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e40:	657b      	str	r3, [r7, #84]	; 0x54
 8006e42:	2301      	movs	r3, #1
 8006e44:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e48:	f383 8810 	msr	PRIMASK, r3
}
 8006e4c:	46c0      	nop			; (mov r8, r8)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2110      	movs	r1, #16
 8006e5a:	438a      	bics	r2, r1
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e64:	f383 8810 	msr	PRIMASK, r3
}
 8006e68:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	2210      	movs	r2, #16
 8006e72:	4013      	ands	r3, r2
 8006e74:	2b10      	cmp	r3, #16
 8006e76:	d103      	bne.n	8006e80 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2210      	movs	r2, #16
 8006e7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	225c      	movs	r2, #92	; 0x5c
 8006e84:	5a9a      	ldrh	r2, [r3, r2]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	0011      	movs	r1, r2
 8006e8a:	0018      	movs	r0, r3
 8006e8c:	f7fe fdf0 	bl	8005a70 <HAL_UARTEx_RxEventCallback>
 8006e90:	e003      	b.n	8006e9a <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	0018      	movs	r0, r3
 8006e96:	f7fb faeb 	bl	8002470 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e9a:	2366      	movs	r3, #102	; 0x66
 8006e9c:	18fb      	adds	r3, r7, r3
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d004      	beq.n	8006eae <UART_RxISR_16BIT_FIFOEN+0x232>
 8006ea4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	d000      	beq.n	8006eae <UART_RxISR_16BIT_FIFOEN+0x232>
 8006eac:	e709      	b.n	8006cc2 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006eae:	2052      	movs	r0, #82	; 0x52
 8006eb0:	183b      	adds	r3, r7, r0
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	215e      	movs	r1, #94	; 0x5e
 8006eb6:	5a52      	ldrh	r2, [r2, r1]
 8006eb8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006eba:	0001      	movs	r1, r0
 8006ebc:	187b      	adds	r3, r7, r1
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d044      	beq.n	8006f4e <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2268      	movs	r2, #104	; 0x68
 8006ec8:	5a9b      	ldrh	r3, [r3, r2]
 8006eca:	187a      	adds	r2, r7, r1
 8006ecc:	8812      	ldrh	r2, [r2, #0]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d23d      	bcs.n	8006f4e <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ed6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006edc:	2301      	movs	r3, #1
 8006ede:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	f383 8810 	msr	PRIMASK, r3
}
 8006ee6:	46c0      	nop			; (mov r8, r8)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689a      	ldr	r2, [r3, #8]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	491b      	ldr	r1, [pc, #108]	; (8006f60 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8006ef4:	400a      	ands	r2, r1
 8006ef6:	609a      	str	r2, [r3, #8]
 8006ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006efa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f383 8810 	msr	PRIMASK, r3
}
 8006f02:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a17      	ldr	r2, [pc, #92]	; (8006f64 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8006f08:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f0e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f10:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f12:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f14:	2301      	movs	r3, #1
 8006f16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	f383 8810 	msr	PRIMASK, r3
}
 8006f1e:	46c0      	nop			; (mov r8, r8)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2120      	movs	r1, #32
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	f383 8810 	msr	PRIMASK, r3
}
 8006f3a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f3c:	e007      	b.n	8006f4e <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	699a      	ldr	r2, [r3, #24]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2108      	movs	r1, #8
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	619a      	str	r2, [r3, #24]
}
 8006f4e:	46c0      	nop			; (mov r8, r8)
 8006f50:	46bd      	mov	sp, r7
 8006f52:	b01e      	add	sp, #120	; 0x78
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	46c0      	nop			; (mov r8, r8)
 8006f58:	fffffeff 	.word	0xfffffeff
 8006f5c:	effffffe 	.word	0xeffffffe
 8006f60:	efffffff 	.word	0xefffffff
 8006f64:	0800681d 	.word	0x0800681d

08006f68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f70:	46c0      	nop			; (mov r8, r8)
 8006f72:	46bd      	mov	sp, r7
 8006f74:	b002      	add	sp, #8
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006f80:	46c0      	nop			; (mov r8, r8)
 8006f82:	46bd      	mov	sp, r7
 8006f84:	b002      	add	sp, #8
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006f90:	46c0      	nop			; (mov r8, r8)
 8006f92:	46bd      	mov	sp, r7
 8006f94:	b002      	add	sp, #8
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2284      	movs	r2, #132	; 0x84
 8006fa4:	5c9b      	ldrb	r3, [r3, r2]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d101      	bne.n	8006fae <HAL_UARTEx_DisableFifoMode+0x16>
 8006faa:	2302      	movs	r3, #2
 8006fac:	e027      	b.n	8006ffe <HAL_UARTEx_DisableFifoMode+0x66>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2284      	movs	r2, #132	; 0x84
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2288      	movs	r2, #136	; 0x88
 8006fba:	2124      	movs	r1, #36	; 0x24
 8006fbc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	438a      	bics	r2, r1
 8006fd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	4a0b      	ldr	r2, [pc, #44]	; (8007008 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006fda:	4013      	ands	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2288      	movs	r2, #136	; 0x88
 8006ff0:	2120      	movs	r1, #32
 8006ff2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2284      	movs	r2, #132	; 0x84
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	0018      	movs	r0, r3
 8007000:	46bd      	mov	sp, r7
 8007002:	b004      	add	sp, #16
 8007004:	bd80      	pop	{r7, pc}
 8007006:	46c0      	nop			; (mov r8, r8)
 8007008:	dfffffff 	.word	0xdfffffff

0800700c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2284      	movs	r2, #132	; 0x84
 800701a:	5c9b      	ldrb	r3, [r3, r2]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d101      	bne.n	8007024 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007020:	2302      	movs	r3, #2
 8007022:	e02e      	b.n	8007082 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2284      	movs	r2, #132	; 0x84
 8007028:	2101      	movs	r1, #1
 800702a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2288      	movs	r2, #136	; 0x88
 8007030:	2124      	movs	r1, #36	; 0x24
 8007032:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2101      	movs	r1, #1
 8007048:	438a      	bics	r2, r1
 800704a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	00db      	lsls	r3, r3, #3
 8007054:	08d9      	lsrs	r1, r3, #3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	0018      	movs	r0, r3
 8007064:	f000 f854 	bl	8007110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2288      	movs	r2, #136	; 0x88
 8007074:	2120      	movs	r1, #32
 8007076:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2284      	movs	r2, #132	; 0x84
 800707c:	2100      	movs	r1, #0
 800707e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	0018      	movs	r0, r3
 8007084:	46bd      	mov	sp, r7
 8007086:	b004      	add	sp, #16
 8007088:	bd80      	pop	{r7, pc}
	...

0800708c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2284      	movs	r2, #132	; 0x84
 800709a:	5c9b      	ldrb	r3, [r3, r2]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d101      	bne.n	80070a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80070a0:	2302      	movs	r3, #2
 80070a2:	e02f      	b.n	8007104 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2284      	movs	r2, #132	; 0x84
 80070a8:	2101      	movs	r1, #1
 80070aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2288      	movs	r2, #136	; 0x88
 80070b0:	2124      	movs	r1, #36	; 0x24
 80070b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2101      	movs	r1, #1
 80070c8:	438a      	bics	r2, r1
 80070ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	4a0e      	ldr	r2, [pc, #56]	; (800710c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80070d4:	4013      	ands	r3, r2
 80070d6:	0019      	movs	r1, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	0018      	movs	r0, r3
 80070e6:	f000 f813 	bl	8007110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2288      	movs	r2, #136	; 0x88
 80070f6:	2120      	movs	r1, #32
 80070f8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2284      	movs	r2, #132	; 0x84
 80070fe:	2100      	movs	r1, #0
 8007100:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	0018      	movs	r0, r3
 8007106:	46bd      	mov	sp, r7
 8007108:	b004      	add	sp, #16
 800710a:	bd80      	pop	{r7, pc}
 800710c:	f1ffffff 	.word	0xf1ffffff

08007110 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800711c:	2b00      	cmp	r3, #0
 800711e:	d108      	bne.n	8007132 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	226a      	movs	r2, #106	; 0x6a
 8007124:	2101      	movs	r1, #1
 8007126:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2268      	movs	r2, #104	; 0x68
 800712c:	2101      	movs	r1, #1
 800712e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007130:	e043      	b.n	80071ba <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007132:	260f      	movs	r6, #15
 8007134:	19bb      	adds	r3, r7, r6
 8007136:	2208      	movs	r2, #8
 8007138:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800713a:	200e      	movs	r0, #14
 800713c:	183b      	adds	r3, r7, r0
 800713e:	2208      	movs	r2, #8
 8007140:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	0e5b      	lsrs	r3, r3, #25
 800714a:	b2da      	uxtb	r2, r3
 800714c:	240d      	movs	r4, #13
 800714e:	193b      	adds	r3, r7, r4
 8007150:	2107      	movs	r1, #7
 8007152:	400a      	ands	r2, r1
 8007154:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	0f5b      	lsrs	r3, r3, #29
 800715e:	b2da      	uxtb	r2, r3
 8007160:	250c      	movs	r5, #12
 8007162:	197b      	adds	r3, r7, r5
 8007164:	2107      	movs	r1, #7
 8007166:	400a      	ands	r2, r1
 8007168:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800716a:	183b      	adds	r3, r7, r0
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	197a      	adds	r2, r7, r5
 8007170:	7812      	ldrb	r2, [r2, #0]
 8007172:	4914      	ldr	r1, [pc, #80]	; (80071c4 <UARTEx_SetNbDataToProcess+0xb4>)
 8007174:	5c8a      	ldrb	r2, [r1, r2]
 8007176:	435a      	muls	r2, r3
 8007178:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800717a:	197b      	adds	r3, r7, r5
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	4a12      	ldr	r2, [pc, #72]	; (80071c8 <UARTEx_SetNbDataToProcess+0xb8>)
 8007180:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007182:	0019      	movs	r1, r3
 8007184:	f7f9 f848 	bl	8000218 <__divsi3>
 8007188:	0003      	movs	r3, r0
 800718a:	b299      	uxth	r1, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	226a      	movs	r2, #106	; 0x6a
 8007190:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007192:	19bb      	adds	r3, r7, r6
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	193a      	adds	r2, r7, r4
 8007198:	7812      	ldrb	r2, [r2, #0]
 800719a:	490a      	ldr	r1, [pc, #40]	; (80071c4 <UARTEx_SetNbDataToProcess+0xb4>)
 800719c:	5c8a      	ldrb	r2, [r1, r2]
 800719e:	435a      	muls	r2, r3
 80071a0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80071a2:	193b      	adds	r3, r7, r4
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	4a08      	ldr	r2, [pc, #32]	; (80071c8 <UARTEx_SetNbDataToProcess+0xb8>)
 80071a8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071aa:	0019      	movs	r1, r3
 80071ac:	f7f9 f834 	bl	8000218 <__divsi3>
 80071b0:	0003      	movs	r3, r0
 80071b2:	b299      	uxth	r1, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2268      	movs	r2, #104	; 0x68
 80071b8:	5299      	strh	r1, [r3, r2]
}
 80071ba:	46c0      	nop			; (mov r8, r8)
 80071bc:	46bd      	mov	sp, r7
 80071be:	b005      	add	sp, #20
 80071c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071c2:	46c0      	nop			; (mov r8, r8)
 80071c4:	08007348 	.word	0x08007348
 80071c8:	08007350 	.word	0x08007350

080071cc <__libc_init_array>:
 80071cc:	b570      	push	{r4, r5, r6, lr}
 80071ce:	2600      	movs	r6, #0
 80071d0:	4d0c      	ldr	r5, [pc, #48]	; (8007204 <__libc_init_array+0x38>)
 80071d2:	4c0d      	ldr	r4, [pc, #52]	; (8007208 <__libc_init_array+0x3c>)
 80071d4:	1b64      	subs	r4, r4, r5
 80071d6:	10a4      	asrs	r4, r4, #2
 80071d8:	42a6      	cmp	r6, r4
 80071da:	d109      	bne.n	80071f0 <__libc_init_array+0x24>
 80071dc:	2600      	movs	r6, #0
 80071de:	f000 f821 	bl	8007224 <_init>
 80071e2:	4d0a      	ldr	r5, [pc, #40]	; (800720c <__libc_init_array+0x40>)
 80071e4:	4c0a      	ldr	r4, [pc, #40]	; (8007210 <__libc_init_array+0x44>)
 80071e6:	1b64      	subs	r4, r4, r5
 80071e8:	10a4      	asrs	r4, r4, #2
 80071ea:	42a6      	cmp	r6, r4
 80071ec:	d105      	bne.n	80071fa <__libc_init_array+0x2e>
 80071ee:	bd70      	pop	{r4, r5, r6, pc}
 80071f0:	00b3      	lsls	r3, r6, #2
 80071f2:	58eb      	ldr	r3, [r5, r3]
 80071f4:	4798      	blx	r3
 80071f6:	3601      	adds	r6, #1
 80071f8:	e7ee      	b.n	80071d8 <__libc_init_array+0xc>
 80071fa:	00b3      	lsls	r3, r6, #2
 80071fc:	58eb      	ldr	r3, [r5, r3]
 80071fe:	4798      	blx	r3
 8007200:	3601      	adds	r6, #1
 8007202:	e7f2      	b.n	80071ea <__libc_init_array+0x1e>
 8007204:	08007360 	.word	0x08007360
 8007208:	08007360 	.word	0x08007360
 800720c:	08007360 	.word	0x08007360
 8007210:	08007364 	.word	0x08007364

08007214 <memset>:
 8007214:	0003      	movs	r3, r0
 8007216:	1882      	adds	r2, r0, r2
 8007218:	4293      	cmp	r3, r2
 800721a:	d100      	bne.n	800721e <memset+0xa>
 800721c:	4770      	bx	lr
 800721e:	7019      	strb	r1, [r3, #0]
 8007220:	3301      	adds	r3, #1
 8007222:	e7f9      	b.n	8007218 <memset+0x4>

08007224 <_init>:
 8007224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007226:	46c0      	nop			; (mov r8, r8)
 8007228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800722a:	bc08      	pop	{r3}
 800722c:	469e      	mov	lr, r3
 800722e:	4770      	bx	lr

08007230 <_fini>:
 8007230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007232:	46c0      	nop			; (mov r8, r8)
 8007234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007236:	bc08      	pop	{r3}
 8007238:	469e      	mov	lr, r3
 800723a:	4770      	bx	lr
